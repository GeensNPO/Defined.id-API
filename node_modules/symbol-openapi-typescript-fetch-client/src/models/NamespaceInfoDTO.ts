/* tslint:disable */
/* eslint-disable */
/*
 * Copyright 2019 NEM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest 2.1.0
 *
 * The version of the OpenAPI document: 0.10.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    NamespaceDTO,
    NamespaceDTOFromJSON,
    NamespaceDTOFromJSONTyped,
    NamespaceDTOToJSON,
    NamespaceMetaDTO,
    NamespaceMetaDTOFromJSON,
    NamespaceMetaDTOFromJSONTyped,
    NamespaceMetaDTOToJSON,
} from './';

/**
 * 
 * @export
 * @interface NamespaceInfoDTO
 */
export interface NamespaceInfoDTO {
    /**
     * Internal resource identifier.
     * @type {string}
     * @memberof NamespaceInfoDTO
     */
    id: string;
    /**
     * 
     * @type {NamespaceMetaDTO}
     * @memberof NamespaceInfoDTO
     */
    meta: NamespaceMetaDTO;
    /**
     * 
     * @type {NamespaceDTO}
     * @memberof NamespaceInfoDTO
     */
    namespace: NamespaceDTO;
}

export function NamespaceInfoDTOFromJSON(json: any): NamespaceInfoDTO {
    return NamespaceInfoDTOFromJSONTyped(json, false);
}

export function NamespaceInfoDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): NamespaceInfoDTO {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'meta': json['meta'],
        'namespace': json['namespace'],
    };
}

export function NamespaceInfoDTOToJSON(value?: NamespaceInfoDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'meta': value.meta,
        'namespace': value.namespace,
    };
}


