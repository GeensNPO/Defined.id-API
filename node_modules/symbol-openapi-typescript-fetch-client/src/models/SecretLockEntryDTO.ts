/* tslint:disable */
/* eslint-disable */
/*
 * Copyright 2019 NEM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest 2.1.0
 *
 * The version of the OpenAPI document: 0.10.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    LockHashAlgorithmEnum,
    LockHashAlgorithmEnumFromJSON,
    LockHashAlgorithmEnumFromJSONTyped,
    LockHashAlgorithmEnumToJSON,
} from './';

/**
 * 
 * @export
 * @interface SecretLockEntryDTO
 */
export interface SecretLockEntryDTO {
    /**
     * Address expressed in hexadecimal base.
     * @type {string}
     * @memberof SecretLockEntryDTO
     */
    ownerAddress: string;
    /**
     * Mosaic identifier.
     * @type {string}
     * @memberof SecretLockEntryDTO
     */
    mosaicId: string;
    /**
     * Absolute amount. An amount of 123456789 (absolute) for a mosaic with divisibility 6 means 123.456789 (relative).
     * @type {string}
     * @memberof SecretLockEntryDTO
     */
    amount: string;
    /**
     * Height of the blockchain.
     * @type {string}
     * @memberof SecretLockEntryDTO
     */
    endHeight: string;
    /**
     * A number that indicates the status.
     * @type {number}
     * @memberof SecretLockEntryDTO
     */
    status: number;
    /**
     * 
     * @type {LockHashAlgorithmEnum}
     * @memberof SecretLockEntryDTO
     */
    hashAlgorithm: LockHashAlgorithmEnum;
    /**
     * Secret.
     * @type {string}
     * @memberof SecretLockEntryDTO
     */
    secret: string;
    /**
     * Address expressed in hexadecimal base.
     * @type {string}
     * @memberof SecretLockEntryDTO
     */
    recipientAddress: string;
    /**
     * 
     * @type {string}
     * @memberof SecretLockEntryDTO
     */
    compositeHash: string;
}

export function SecretLockEntryDTOFromJSON(json: any): SecretLockEntryDTO {
    return SecretLockEntryDTOFromJSONTyped(json, false);
}

export function SecretLockEntryDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): SecretLockEntryDTO {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'ownerAddress': json['ownerAddress'],
        'mosaicId': json['mosaicId'],
        'amount': json['amount'],
        'endHeight': json['endHeight'],
        'status': json['status'],
        'hashAlgorithm': json['hashAlgorithm'],
        'secret': json['secret'],
        'recipientAddress': json['recipientAddress'],
        'compositeHash': json['compositeHash'],
    };
}

export function SecretLockEntryDTOToJSON(value?: SecretLockEntryDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'ownerAddress': value.ownerAddress,
        'mosaicId': value.mosaicId,
        'amount': value.amount,
        'endHeight': value.endHeight,
        'status': value.status,
        'hashAlgorithm': value.hashAlgorithm,
        'secret': value.secret,
        'recipientAddress': value.recipientAddress,
        'compositeHash': value.compositeHash,
    };
}


