/* tslint:disable */
/* eslint-disable */
/*
 * Copyright 2019 NEM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest 2.1.0
 *
 * The version of the OpenAPI document: 0.10.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ModelError,
    ModelErrorFromJSON,
    ModelErrorToJSON,
    MosaicIds,
    MosaicIdsFromJSON,
    MosaicIdsToJSON,
    MosaicInfoDTO,
    MosaicInfoDTOFromJSON,
    MosaicInfoDTOToJSON,
    MosaicPage,
    MosaicPageFromJSON,
    MosaicPageToJSON,
    Order,
    OrderFromJSON,
    OrderToJSON,
} from '../models';

export interface GetMosaicRequest {
    mosaicId: string;
}

export interface GetMosaicsRequest {
    mosaicIds: MosaicIds;
}

export interface SearchMosaicsRequest {
    ownerAddress?: string;
    pageSize?: number;
    pageNumber?: number;
    offset?: string;
    order?: Order;
}

/**
 * 
 */
export class MosaicRoutesApi extends runtime.BaseAPI {

    /**
     * Gets the mosaic definition for a given mosaic identifier.
     * Get mosaic information
     */
    async getMosaicRaw(requestParameters: GetMosaicRequest): Promise<runtime.ApiResponse<MosaicInfoDTO>> {
        if (requestParameters.mosaicId === null || requestParameters.mosaicId === undefined) {
            throw new runtime.RequiredError('mosaicId','Required parameter requestParameters.mosaicId was null or undefined when calling getMosaic.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/mosaics/{mosaicId}`.replace(`{${"mosaicId"}}`, encodeURIComponent(String(requestParameters.mosaicId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MosaicInfoDTOFromJSON(jsonValue));
    }

    /**
     * Gets the mosaic definition for a given mosaic identifier.
     * Get mosaic information
     */
    async getMosaic(mosaicId: string): Promise<MosaicInfoDTO> {
        const response = await this.getMosaicRaw({ mosaicId: mosaicId });
        return await response.value();
    }

    /**
     * Gets an array of mosaic definition.
     * Get mosaics information for an array of mosaics
     */
    async getMosaicsRaw(requestParameters: GetMosaicsRequest): Promise<runtime.ApiResponse<Array<MosaicInfoDTO>>> {
        if (requestParameters.mosaicIds === null || requestParameters.mosaicIds === undefined) {
            throw new runtime.RequiredError('mosaicIds','Required parameter requestParameters.mosaicIds was null or undefined when calling getMosaics.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/mosaics`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MosaicIdsToJSON(requestParameters.mosaicIds),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MosaicInfoDTOFromJSON));
    }

    /**
     * Gets an array of mosaic definition.
     * Get mosaics information for an array of mosaics
     */
    async getMosaics(mosaicIds: MosaicIds): Promise<Array<MosaicInfoDTO>> {
        const response = await this.getMosaicsRaw({ mosaicIds: mosaicIds });
        return await response.value();
    }

    /**
     * Gets an array of mosaics.
     * Search mosaics
     */
    async searchMosaicsRaw(requestParameters: SearchMosaicsRequest): Promise<runtime.ApiResponse<MosaicPage>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.ownerAddress !== undefined) {
            queryParameters['ownerAddress'] = requestParameters.ownerAddress;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/mosaics`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MosaicPageFromJSON(jsonValue));
    }

    /**
     * Gets an array of mosaics.
     * Search mosaics
     */
    async searchMosaics(ownerAddress?: string, pageSize?: number, pageNumber?: number, offset?: string, order?: Order): Promise<MosaicPage> {
        const response = await this.searchMosaicsRaw({ ownerAddress: ownerAddress, pageSize: pageSize, pageNumber: pageNumber, offset: offset, order: order });
        return await response.value();
    }

}
