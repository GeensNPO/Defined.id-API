/* tslint:disable */
/* eslint-disable */
/*
 * Copyright 2019 NEM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest 2.1.0
 *
 * The version of the OpenAPI document: 0.10.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ModelError,
    ModelErrorFromJSON,
    ModelErrorToJSON,
    Order,
    OrderFromJSON,
    OrderToJSON,
    ReceiptTypeEnum,
    ReceiptTypeEnumFromJSON,
    ReceiptTypeEnumToJSON,
    ResolutionStatementPage,
    ResolutionStatementPageFromJSON,
    ResolutionStatementPageToJSON,
    TransactionStatementPage,
    TransactionStatementPageFromJSON,
    TransactionStatementPageToJSON,
} from '../models';

export interface SearchAddressResolutionStatementsRequest {
    height?: string;
    pageSize?: number;
    pageNumber?: number;
    offset?: string;
    order?: Order;
}

export interface SearchMosaicResolutionStatementsRequest {
    height?: string;
    pageSize?: number;
    pageNumber?: number;
    offset?: string;
    order?: Order;
}

export interface SearchReceiptsRequest {
    height?: string;
    receiptType?: Array<ReceiptTypeEnum>;
    recipientAddress?: string;
    senderAddress?: string;
    targetAddress?: string;
    artifactId?: string;
    pageSize?: number;
    pageNumber?: number;
    offset?: string;
    order?: Order;
}

/**
 * 
 */
export class ReceiptRoutesApi extends runtime.BaseAPI {

    /**
     * Gets an array of address resolution statements.
     * Get receipts address resolution statements
     */
    async searchAddressResolutionStatementsRaw(requestParameters: SearchAddressResolutionStatementsRequest): Promise<runtime.ApiResponse<ResolutionStatementPage>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.height !== undefined) {
            queryParameters['height'] = requestParameters.height;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statements/resolutions/address`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ResolutionStatementPageFromJSON(jsonValue));
    }

    /**
     * Gets an array of address resolution statements.
     * Get receipts address resolution statements
     */
    async searchAddressResolutionStatements(height?: string, pageSize?: number, pageNumber?: number, offset?: string, order?: Order): Promise<ResolutionStatementPage> {
        const response = await this.searchAddressResolutionStatementsRaw({ height: height, pageSize: pageSize, pageNumber: pageNumber, offset: offset, order: order });
        return await response.value();
    }

    /**
     * Gets an array of mosaic resolution statements.
     * Get receipts mosaic resolution statements
     */
    async searchMosaicResolutionStatementsRaw(requestParameters: SearchMosaicResolutionStatementsRequest): Promise<runtime.ApiResponse<ResolutionStatementPage>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.height !== undefined) {
            queryParameters['height'] = requestParameters.height;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statements/resolutions/mosaic`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ResolutionStatementPageFromJSON(jsonValue));
    }

    /**
     * Gets an array of mosaic resolution statements.
     * Get receipts mosaic resolution statements
     */
    async searchMosaicResolutionStatements(height?: string, pageSize?: number, pageNumber?: number, offset?: string, order?: Order): Promise<ResolutionStatementPage> {
        const response = await this.searchMosaicResolutionStatementsRaw({ height: height, pageSize: pageSize, pageNumber: pageNumber, offset: offset, order: order });
        return await response.value();
    }

    /**
     * Gets an array of transaction statements.
     * Search transaction statements
     */
    async searchReceiptsRaw(requestParameters: SearchReceiptsRequest): Promise<runtime.ApiResponse<TransactionStatementPage>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.height !== undefined) {
            queryParameters['height'] = requestParameters.height;
        }

        if (requestParameters.receiptType) {
            queryParameters['receiptType'] = requestParameters.receiptType;
        }

        if (requestParameters.recipientAddress !== undefined) {
            queryParameters['recipientAddress'] = requestParameters.recipientAddress;
        }

        if (requestParameters.senderAddress !== undefined) {
            queryParameters['senderAddress'] = requestParameters.senderAddress;
        }

        if (requestParameters.targetAddress !== undefined) {
            queryParameters['targetAddress'] = requestParameters.targetAddress;
        }

        if (requestParameters.artifactId !== undefined) {
            queryParameters['artifactId'] = requestParameters.artifactId;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statements/transaction`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionStatementPageFromJSON(jsonValue));
    }

    /**
     * Gets an array of transaction statements.
     * Search transaction statements
     */
    async searchReceipts(height?: string, receiptType?: Array<ReceiptTypeEnum>, recipientAddress?: string, senderAddress?: string, targetAddress?: string, artifactId?: string, pageSize?: number, pageNumber?: number, offset?: string, order?: Order): Promise<TransactionStatementPage> {
        const response = await this.searchReceiptsRaw({ height: height, receiptType: receiptType, recipientAddress: recipientAddress, senderAddress: senderAddress, targetAddress: targetAddress, artifactId: artifactId, pageSize: pageSize, pageNumber: pageNumber, offset: offset, order: order });
        return await response.value();
    }

}
