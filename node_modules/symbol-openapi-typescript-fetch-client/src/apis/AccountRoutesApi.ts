/* tslint:disable */
/* eslint-disable */
/*
 * Copyright 2019 NEM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest 2.1.0
 *
 * The version of the OpenAPI document: 0.10.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AccountIds,
    AccountIdsFromJSON,
    AccountIdsToJSON,
    AccountInfoDTO,
    AccountInfoDTOFromJSON,
    AccountInfoDTOToJSON,
    AccountOrderByEnum,
    AccountOrderByEnumFromJSON,
    AccountOrderByEnumToJSON,
    AccountPage,
    AccountPageFromJSON,
    AccountPageToJSON,
    ModelError,
    ModelErrorFromJSON,
    ModelErrorToJSON,
    Order,
    OrderFromJSON,
    OrderToJSON,
} from '../models';

export interface GetAccountInfoRequest {
    accountId: string;
}

export interface GetAccountsInfoRequest {
    accountIds?: AccountIds;
}

export interface SearchAccountsRequest {
    pageSize?: number;
    pageNumber?: number;
    offset?: string;
    order?: Order;
    orderBy?: AccountOrderByEnum;
    mosaicId?: string;
}

/**
 * 
 */
export class AccountRoutesApi extends runtime.BaseAPI {

    /**
     * Returns the account information.
     * Get account information
     */
    async getAccountInfoRaw(requestParameters: GetAccountInfoRequest): Promise<runtime.ApiResponse<AccountInfoDTO>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getAccountInfo.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/accounts/{accountId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountInfoDTOFromJSON(jsonValue));
    }

    /**
     * Returns the account information.
     * Get account information
     */
    async getAccountInfo(accountId: string): Promise<AccountInfoDTO> {
        const response = await this.getAccountInfoRaw({ accountId: accountId });
        return await response.value();
    }

    /**
     * Returns the account information for an array of accounts.
     * Get accounts information
     */
    async getAccountsInfoRaw(requestParameters: GetAccountsInfoRequest): Promise<runtime.ApiResponse<Array<AccountInfoDTO>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/accounts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AccountIdsToJSON(requestParameters.accountIds),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AccountInfoDTOFromJSON));
    }

    /**
     * Returns the account information for an array of accounts.
     * Get accounts information
     */
    async getAccountsInfo(accountIds?: AccountIds): Promise<Array<AccountInfoDTO>> {
        const response = await this.getAccountsInfoRaw({ accountIds: accountIds });
        return await response.value();
    }

    /**
     * Gets an array of accounts.
     * Search accounts
     */
    async searchAccountsRaw(requestParameters: SearchAccountsRequest): Promise<runtime.ApiResponse<AccountPage>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.mosaicId !== undefined) {
            queryParameters['mosaicId'] = requestParameters.mosaicId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/accounts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountPageFromJSON(jsonValue));
    }

    /**
     * Gets an array of accounts.
     * Search accounts
     */
    async searchAccounts(pageSize?: number, pageNumber?: number, offset?: string, order?: Order, orderBy?: AccountOrderByEnum, mosaicId?: string): Promise<AccountPage> {
        const response = await this.searchAccountsRaw({ pageSize: pageSize, pageNumber: pageNumber, offset: offset, order: order, orderBy: orderBy, mosaicId: mosaicId });
        return await response.value();
    }

}
