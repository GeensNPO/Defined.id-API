"use strict";
/* tslint:disable */
/* eslint-disable */
/*
 * Copyright 2019 NEM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest 2.1.0
 *
 * The version of the OpenAPI document: 0.10.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecretLockRoutesApi = void 0;
const runtime = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class SecretLockRoutesApi extends runtime.BaseAPI {
    /**
     * Gets the secret lock for a given secret.
     * Get secret lock information
     */
    getSecretLockRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.secret === null || requestParameters.secret === undefined) {
                throw new runtime.RequiredError('secret', 'Required parameter requestParameters.secret was null or undefined when calling getSecretLock.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/lock/secret/{secret}`.replace(`{${"secret"}}`, encodeURIComponent(String(requestParameters.secret))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.SecretLockInfoDTOFromJSON(jsonValue));
        });
    }
    /**
     * Gets the secret lock for a given secret.
     * Get secret lock information
     */
    getSecretLock(secret) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getSecretLockRaw({ secret: secret });
            return yield response.value();
        });
    }
    /**
     * Returns an array of secret locks.
     * Search secret lock entries
     */
    searchSecretLockRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.address === null || requestParameters.address === undefined) {
                throw new runtime.RequiredError('address', 'Required parameter requestParameters.address was null or undefined when calling searchSecretLock.');
            }
            const queryParameters = {};
            if (requestParameters.pageSize !== undefined) {
                queryParameters['pageSize'] = requestParameters.pageSize;
            }
            if (requestParameters.pageNumber !== undefined) {
                queryParameters['pageNumber'] = requestParameters.pageNumber;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.order !== undefined) {
                queryParameters['order'] = requestParameters.order;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/account/{address}/lock/secret`.replace(`{${"address"}}`, encodeURIComponent(String(requestParameters.address))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.SecretLockPageFromJSON(jsonValue));
        });
    }
    /**
     * Returns an array of secret locks.
     * Search secret lock entries
     */
    searchSecretLock(address, pageSize, pageNumber, offset, order) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.searchSecretLockRaw({ address: address, pageSize: pageSize, pageNumber: pageNumber, offset: offset, order: order });
            return yield response.value();
        });
    }
}
exports.SecretLockRoutesApi = SecretLockRoutesApi;
