/**
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest 2.1.0
 *
 * The version of the OpenAPI document: 0.10.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { AnnounceTransactionInfoDTO, Cosignature, Order, TransactionIds, TransactionInfoDTO, TransactionPage, TransactionPayload, TransactionTypeEnum } from '../models';
export interface AnnounceCosignatureTransactionRequest {
    cosignature: Cosignature;
}
export interface AnnouncePartialTransactionRequest {
    transactionPayload: TransactionPayload;
}
export interface AnnounceTransactionRequest {
    transactionPayload: TransactionPayload;
}
export interface GetConfirmedTransactionRequest {
    transactionId: string;
}
export interface GetConfirmedTransactionsRequest {
    transactionIds: TransactionIds;
}
export interface GetPartialTransactionRequest {
    transactionId: string;
}
export interface GetPartialTransactionsRequest {
    transactionIds: TransactionIds;
}
export interface GetUnconfirmedTransactionRequest {
    transactionId: string;
}
export interface GetUnconfirmedTransactionsRequest {
    transactionIds: TransactionIds;
}
export interface SearchConfirmedTransactionsRequest {
    address?: string;
    recipientAddress?: string;
    signerPublicKey?: string;
    height?: string;
    fromHeight?: string;
    toHeight?: string;
    type?: Array<TransactionTypeEnum>;
    embedded?: boolean;
    pageSize?: number;
    pageNumber?: number;
    offset?: string;
    order?: Order;
}
export interface SearchPartialTransactionsRequest {
    address?: string;
    recipientAddress?: string;
    signerPublicKey?: string;
    height?: string;
    fromHeight?: string;
    toHeight?: string;
    type?: Array<TransactionTypeEnum>;
    embedded?: boolean;
    pageSize?: number;
    pageNumber?: number;
    offset?: string;
    order?: Order;
}
export interface SearchUnconfirmedTransactionsRequest {
    address?: string;
    recipientAddress?: string;
    signerPublicKey?: string;
    height?: string;
    fromHeight?: string;
    toHeight?: string;
    type?: Array<TransactionTypeEnum>;
    embedded?: boolean;
    pageSize?: number;
    pageNumber?: number;
    offset?: string;
    order?: Order;
}
/**
 *
 */
export declare class TransactionRoutesApi extends runtime.BaseAPI {
    /**
     * Announces a cosignature transaction to the network.
     * Announce a cosignature transaction
     */
    announceCosignatureTransactionRaw(requestParameters: AnnounceCosignatureTransactionRequest): Promise<runtime.ApiResponse<AnnounceTransactionInfoDTO>>;
    /**
     * Announces a cosignature transaction to the network.
     * Announce a cosignature transaction
     */
    announceCosignatureTransaction(cosignature: Cosignature): Promise<AnnounceTransactionInfoDTO>;
    /**
     * Announces an aggregate bonded transaction to the network.
     * Announce an aggregate bonded transaction
     */
    announcePartialTransactionRaw(requestParameters: AnnouncePartialTransactionRequest): Promise<runtime.ApiResponse<AnnounceTransactionInfoDTO>>;
    /**
     * Announces an aggregate bonded transaction to the network.
     * Announce an aggregate bonded transaction
     */
    announcePartialTransaction(transactionPayload: TransactionPayload): Promise<AnnounceTransactionInfoDTO>;
    /**
     * Announces a transaction to the network. The [catbuffer library](https://github.com/nemtech/catbuffer) defines the protocol to serialize and deserialize Symbol entities. Catbuffers are integrated into [Symbol SDKs](https://nemtech.github.io/sdk.html).  It\'s recommended to use SDKs instead of calling the API endpoint directly to announce transactions.
     * Announce a new transaction
     */
    announceTransactionRaw(requestParameters: AnnounceTransactionRequest): Promise<runtime.ApiResponse<AnnounceTransactionInfoDTO>>;
    /**
     * Announces a transaction to the network. The [catbuffer library](https://github.com/nemtech/catbuffer) defines the protocol to serialize and deserialize Symbol entities. Catbuffers are integrated into [Symbol SDKs](https://nemtech.github.io/sdk.html).  It\'s recommended to use SDKs instead of calling the API endpoint directly to announce transactions.
     * Announce a new transaction
     */
    announceTransaction(transactionPayload: TransactionPayload): Promise<AnnounceTransactionInfoDTO>;
    /**
     * Returns confirmed transaction information given a transactionId or hash.
     * Get confirmed transaction information
     */
    getConfirmedTransactionRaw(requestParameters: GetConfirmedTransactionRequest): Promise<runtime.ApiResponse<TransactionInfoDTO>>;
    /**
     * Returns confirmed transaction information given a transactionId or hash.
     * Get confirmed transaction information
     */
    getConfirmedTransaction(transactionId: string): Promise<TransactionInfoDTO>;
    /**
     * Returns confirmed transactions information for a given array of transactionIds.
     * Get confirmed trasactions information
     */
    getConfirmedTransactionsRaw(requestParameters: GetConfirmedTransactionsRequest): Promise<runtime.ApiResponse<Array<TransactionInfoDTO>>>;
    /**
     * Returns confirmed transactions information for a given array of transactionIds.
     * Get confirmed trasactions information
     */
    getConfirmedTransactions(transactionIds: TransactionIds): Promise<Array<TransactionInfoDTO>>;
    /**
     * Returns partial transaction information given a transactionId or hash.
     * Get partial transaction information
     */
    getPartialTransactionRaw(requestParameters: GetPartialTransactionRequest): Promise<runtime.ApiResponse<TransactionInfoDTO>>;
    /**
     * Returns partial transaction information given a transactionId or hash.
     * Get partial transaction information
     */
    getPartialTransaction(transactionId: string): Promise<TransactionInfoDTO>;
    /**
     * Returns partial transactions information for a given array of transactionIds.
     * Get partial trasactions information
     */
    getPartialTransactionsRaw(requestParameters: GetPartialTransactionsRequest): Promise<runtime.ApiResponse<Array<TransactionInfoDTO>>>;
    /**
     * Returns partial transactions information for a given array of transactionIds.
     * Get partial trasactions information
     */
    getPartialTransactions(transactionIds: TransactionIds): Promise<Array<TransactionInfoDTO>>;
    /**
     * Returns unconfirmed transaction information given a transactionId or hash.
     * Get unconfirmed transaction information
     */
    getUnconfirmedTransactionRaw(requestParameters: GetUnconfirmedTransactionRequest): Promise<runtime.ApiResponse<TransactionInfoDTO>>;
    /**
     * Returns unconfirmed transaction information given a transactionId or hash.
     * Get unconfirmed transaction information
     */
    getUnconfirmedTransaction(transactionId: string): Promise<TransactionInfoDTO>;
    /**
     * Returns unconfirmed transactions information for a given array of transactionIds.
     * Get unconfirmed trasactions information
     */
    getUnconfirmedTransactionsRaw(requestParameters: GetUnconfirmedTransactionsRequest): Promise<runtime.ApiResponse<Array<TransactionInfoDTO>>>;
    /**
     * Returns unconfirmed transactions information for a given array of transactionIds.
     * Get unconfirmed trasactions information
     */
    getUnconfirmedTransactions(transactionIds: TransactionIds): Promise<Array<TransactionInfoDTO>>;
    /**
     * Returns an array of confirmed transactions.
     * Search confirmed transactions
     */
    searchConfirmedTransactionsRaw(requestParameters: SearchConfirmedTransactionsRequest): Promise<runtime.ApiResponse<TransactionPage>>;
    /**
     * Returns an array of confirmed transactions.
     * Search confirmed transactions
     */
    searchConfirmedTransactions(address?: string, recipientAddress?: string, signerPublicKey?: string, height?: string, fromHeight?: string, toHeight?: string, type?: Array<TransactionTypeEnum>, embedded?: boolean, pageSize?: number, pageNumber?: number, offset?: string, order?: Order): Promise<TransactionPage>;
    /**
     * Returns an array of partial transactions.
     * Search partial transactions
     */
    searchPartialTransactionsRaw(requestParameters: SearchPartialTransactionsRequest): Promise<runtime.ApiResponse<TransactionPage>>;
    /**
     * Returns an array of partial transactions.
     * Search partial transactions
     */
    searchPartialTransactions(address?: string, recipientAddress?: string, signerPublicKey?: string, height?: string, fromHeight?: string, toHeight?: string, type?: Array<TransactionTypeEnum>, embedded?: boolean, pageSize?: number, pageNumber?: number, offset?: string, order?: Order): Promise<TransactionPage>;
    /**
     * Returns an array of unconfirmed transactions.
     * Search unconfirmed transactions
     */
    searchUnconfirmedTransactionsRaw(requestParameters: SearchUnconfirmedTransactionsRequest): Promise<runtime.ApiResponse<TransactionPage>>;
    /**
     * Returns an array of unconfirmed transactions.
     * Search unconfirmed transactions
     */
    searchUnconfirmedTransactions(address?: string, recipientAddress?: string, signerPublicKey?: string, height?: string, fromHeight?: string, toHeight?: string, type?: Array<TransactionTypeEnum>, embedded?: boolean, pageSize?: number, pageNumber?: number, offset?: string, order?: Order): Promise<TransactionPage>;
}
