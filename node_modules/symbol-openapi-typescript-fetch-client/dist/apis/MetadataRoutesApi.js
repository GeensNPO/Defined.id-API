"use strict";
/* tslint:disable */
/* eslint-disable */
/*
 * Copyright 2019 NEM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest 2.1.0
 *
 * The version of the OpenAPI document: 0.10.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetadataRoutesApi = void 0;
const runtime = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class MetadataRoutesApi extends runtime.BaseAPI {
    /**
     * Returns an array of metadata.
     * Search metadata entries
     */
    searchMetadataEntriesRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.sourceAddress !== undefined) {
                queryParameters['sourceAddress'] = requestParameters.sourceAddress;
            }
            if (requestParameters.targetAddress !== undefined) {
                queryParameters['targetAddress'] = requestParameters.targetAddress;
            }
            if (requestParameters.scopedMetadataKey !== undefined) {
                queryParameters['scopedMetadataKey'] = requestParameters.scopedMetadataKey;
            }
            if (requestParameters.targetId !== undefined) {
                queryParameters['targetId'] = requestParameters.targetId;
            }
            if (requestParameters.metadataType !== undefined) {
                queryParameters['metadataType'] = requestParameters.metadataType;
            }
            if (requestParameters.pageSize !== undefined) {
                queryParameters['pageSize'] = requestParameters.pageSize;
            }
            if (requestParameters.pageNumber !== undefined) {
                queryParameters['pageNumber'] = requestParameters.pageNumber;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.order !== undefined) {
                queryParameters['order'] = requestParameters.order;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/metadata`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.MetadataPageFromJSON(jsonValue));
        });
    }
    /**
     * Returns an array of metadata.
     * Search metadata entries
     */
    searchMetadataEntries(sourceAddress, targetAddress, scopedMetadataKey, targetId, metadataType, pageSize, pageNumber, offset, order) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.searchMetadataEntriesRaw({ sourceAddress: sourceAddress, targetAddress: targetAddress, scopedMetadataKey: scopedMetadataKey, targetId: targetId, metadataType: metadataType, pageSize: pageSize, pageNumber: pageNumber, offset: offset, order: order });
            return yield response.value();
        });
    }
}
exports.MetadataRoutesApi = MetadataRoutesApi;
