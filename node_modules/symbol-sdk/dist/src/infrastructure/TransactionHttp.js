"use strict";
/*
 * Copyright 2018 NEM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const operators_1 = require("rxjs/operators");
const symbol_openapi_typescript_fetch_client_1 = require("symbol-openapi-typescript-fetch-client");
const DtoMapping_1 = require("../core/utils/DtoMapping");
const TransactionAnnounceResponse_1 = require("../model/transaction/TransactionAnnounceResponse");
const TransactionType_1 = require("../model/transaction/TransactionType");
const Http_1 = require("./Http");
const CreateTransactionFromDTO_1 = require("./transaction/CreateTransactionFromDTO");
const TransactionGroup_1 = require("./TransactionGroup");
/**
 * Transaction http repository.
 *
 * @since 1.0
 */
class TransactionHttp extends Http_1.Http {
    /**
     * Constructor
     * @param url Base catapult-rest url
     * @param fetchApi fetch function to be used when performing rest requests.
     */
    constructor(url, fetchApi) {
        super(url, fetchApi);
        this.transactionRoutesApi = new symbol_openapi_typescript_fetch_client_1.TransactionRoutesApi(this.config());
        this.blockRoutesApi = new symbol_openapi_typescript_fetch_client_1.BlockRoutesApi(this.config());
    }
    /**
     * Gets a transaction for a transactionId
     * @param transactionId - Transaction id or hash.
     * @param transactionGroup - Transaction group.
     * @returns Observable<Transaction>
     */
    getTransaction(transactionId, transactionGroup) {
        return this.call(this.getTransactionByGroup(transactionId, transactionGroup), (body) => CreateTransactionFromDTO_1.CreateTransactionFromDTO(body));
    }
    /**
     * Gets an array of transactions for different transaction ids
     * @param transactionIds - Array of transactions id and/or hash.
     * @param transactionGroup - Transaction group.
     * @returns Observable<Transaction[]>
     */
    getTransactionsById(transactionIds, transactionGroup) {
        const transactionIdsBody = {
            transactionIds,
        };
        switch (transactionGroup) {
            case TransactionGroup_1.TransactionGroup.Confirmed:
                return this.call(this.transactionRoutesApi.getConfirmedTransactions(transactionIdsBody), (body) => body.map((transactionDTO) => {
                    return CreateTransactionFromDTO_1.CreateTransactionFromDTO(transactionDTO);
                }));
            case TransactionGroup_1.TransactionGroup.Unconfirmed:
                return this.call(this.transactionRoutesApi.getUnconfirmedTransactions(transactionIdsBody), (body) => body.map((transactionDTO) => {
                    return CreateTransactionFromDTO_1.CreateTransactionFromDTO(transactionDTO);
                }));
            case TransactionGroup_1.TransactionGroup.Partial:
                return this.call(this.transactionRoutesApi.getPartialTransactions(transactionIdsBody), (body) => body.map((transactionDTO) => {
                    return CreateTransactionFromDTO_1.CreateTransactionFromDTO(transactionDTO);
                }));
        }
    }
    /**
     * Send a signed transaction
     * @param signedTransaction - Signed transaction
     * @returns Observable<TransactionAnnounceResponse>
     */
    announce(signedTransaction) {
        if (signedTransaction.type === TransactionType_1.TransactionType.AGGREGATE_BONDED) {
            throw new Error("Announcing aggregate bonded transaction should use 'announceAggregateBonded'");
        }
        return this.call(this.transactionRoutesApi.announceTransaction(signedTransaction), (body) => new TransactionAnnounceResponse_1.TransactionAnnounceResponse(body.message));
    }
    /**
     * Send a signed transaction with missing signatures
     * @param signedTransaction - Signed transaction
     * @returns Observable<TransactionAnnounceResponse>
     */
    announceAggregateBonded(signedTransaction) {
        if (signedTransaction.type !== TransactionType_1.TransactionType.AGGREGATE_BONDED) {
            throw new Error('Only Transaction Type 0x4241 is allowed for announce aggregate bonded');
        }
        return this.call(this.transactionRoutesApi.announcePartialTransaction(signedTransaction), (body) => new TransactionAnnounceResponse_1.TransactionAnnounceResponse(body.message));
    }
    /**
     * Send a cosignature signed transaction of an already announced transaction
     * @param cosignatureSignedTransaction - Cosignature signed transaction
     * @returns Observable<TransactionAnnounceResponse>
     */
    announceAggregateBondedCosignature(cosignatureSignedTransaction) {
        const cosignature = {
            parentHash: cosignatureSignedTransaction.parentHash,
            signerPublicKey: cosignatureSignedTransaction.signerPublicKey,
            signature: cosignatureSignedTransaction.signature,
            version: cosignatureSignedTransaction.version.toString(),
        };
        return this.call(this.transactionRoutesApi.announceCosignatureTransaction(cosignature), (body) => new TransactionAnnounceResponse_1.TransactionAnnounceResponse(body.message));
    }
    /**
     * Gets a transaction's effective paid fee
     * @param transactionId - Transaction id or hash.
     * @returns Observable<number>
     */
    getTransactionEffectiveFee(transactionId) {
        return this.call(this.getTransactionByGroup(transactionId, TransactionGroup_1.TransactionGroup.Confirmed), CreateTransactionFromDTO_1.CreateTransactionFromDTO).pipe(operators_1.mergeMap((transaction) => {
            // now read block details
            return this.call(this.blockRoutesApi.getBlockByHeight(transaction.transactionInfo.height.toString()), (blockDTO) => {
                // @see https://nemtech.github.io/concepts/transaction.html#fees
                // effective_fee = feeMultiplier x transaction::size
                return blockDTO.block.feeMultiplier * transaction.size;
            });
        }));
    }
    /**
     * Returns an array of transactions.
     * @summary Get transactions
     * @param criteria Transaction search criteria
     * @returns {Observable<Page<Transaction>>}
     */
    search(criteria) {
        return this.call(this.searchTransactionByGroup(criteria), (body) => super.toPage(body.pagination, body.data, CreateTransactionFromDTO_1.CreateTransactionFromDTO));
    }
    /**
     * @internal
     * Gets a transaction info
     * @param transactionId - Transaction id or hash.
     * @param transactionGroup - Transaction group.
     * @returns Promise<{response: http.ClientResponse; body: TransactionInfoDTO;}>
     */
    getTransactionByGroup(transactionId, transactionGroup) {
        switch (transactionGroup) {
            case TransactionGroup_1.TransactionGroup.Confirmed:
                return this.transactionRoutesApi.getConfirmedTransaction(transactionId);
            case TransactionGroup_1.TransactionGroup.Unconfirmed:
                return this.transactionRoutesApi.getUnconfirmedTransaction(transactionId);
            case TransactionGroup_1.TransactionGroup.Partial:
                return this.transactionRoutesApi.getPartialTransaction(transactionId);
        }
    }
    /**
     * @internal
     * Gets a transaction search result
     * @param criteria - the criteria.
     * @returns Promise<{response: http.ClientResponse; body: TransactionInfoDTO;}>
     */
    searchTransactionByGroup(criteria) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        switch (criteria.group) {
            case TransactionGroup_1.TransactionGroup.Confirmed:
                return this.transactionRoutesApi.searchConfirmedTransactions((_a = criteria.address) === null || _a === void 0 ? void 0 : _a.plain(), (_b = criteria.recipientAddress) === null || _b === void 0 ? void 0 : _b.plain(), criteria.signerPublicKey, (_c = criteria.height) === null || _c === void 0 ? void 0 : _c.toString(), (_d = criteria.type) === null || _d === void 0 ? void 0 : _d.map((type) => type.valueOf()), criteria.embedded, criteria.pageSize, criteria.pageNumber, criteria.offset, DtoMapping_1.DtoMapping.mapEnum(criteria.order));
            case TransactionGroup_1.TransactionGroup.Unconfirmed:
                return this.transactionRoutesApi.searchUnconfirmedTransactions((_e = criteria.address) === null || _e === void 0 ? void 0 : _e.plain(), (_f = criteria.recipientAddress) === null || _f === void 0 ? void 0 : _f.plain(), criteria.signerPublicKey, (_g = criteria.height) === null || _g === void 0 ? void 0 : _g.toString(), (_h = criteria.type) === null || _h === void 0 ? void 0 : _h.map((type) => type.valueOf()), criteria.embedded, criteria.pageSize, criteria.pageNumber, criteria.offset, DtoMapping_1.DtoMapping.mapEnum(criteria.order));
            case TransactionGroup_1.TransactionGroup.Partial:
                return this.transactionRoutesApi.searchPartialTransactions((_j = criteria.address) === null || _j === void 0 ? void 0 : _j.plain(), (_k = criteria.recipientAddress) === null || _k === void 0 ? void 0 : _k.plain(), criteria.signerPublicKey, (_l = criteria.height) === null || _l === void 0 ? void 0 : _l.toString(), (_m = criteria.type) === null || _m === void 0 ? void 0 : _m.map((type) => type.valueOf()), criteria.embedded, criteria.pageSize, criteria.pageNumber, criteria.offset, DtoMapping_1.DtoMapping.mapEnum(criteria.order));
        }
    }
}
exports.TransactionHttp = TransactionHttp;
//# sourceMappingURL=TransactionHttp.js.map