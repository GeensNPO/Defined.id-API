import { Observable } from 'rxjs';
import { Configuration } from 'symbol-openapi-typescript-fetch-client';
import { NetworkType } from '../model/network/NetworkType';
import { QueryParams } from './QueryParams';
/**
 * Http extended by all http services
 */
export declare abstract class Http {
    protected readonly url: string;
    protected readonly fetchApi?: any;
    /**
     * Constructor
     * @param url Base catapult-rest url
     * @param fetchApi fetch function to be used when performing rest requests.
     */
    protected constructor(url: string, fetchApi?: any);
    static errorHandling(error: any): Observable<never>;
    createNetworkTypeObservable(networkType?: NetworkType | Observable<NetworkType>): Observable<NetworkType>;
    queryParams(queryParams?: QueryParams): any;
    config(): Configuration;
    /**
     * This method knows how to call, convert and handle exception when doing remote http operations.
     * @param remoteCall the remote call
     * @param mapper the mapper from dto to the model object.
     */
    protected call<D, M>(remoteCall: Promise<D>, mapper: (value: D) => M): Observable<M>;
}
