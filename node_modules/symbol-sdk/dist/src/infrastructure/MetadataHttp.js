"use strict";
/*
 * Copyright 2019 NEM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const symbol_openapi_typescript_fetch_client_1 = require("symbol-openapi-typescript-fetch-client");
const Convert_1 = require("../core/format/Convert");
const Address_1 = require("../model/account/Address");
const Metadata_1 = require("../model/metadata/Metadata");
const MetadataEntry_1 = require("../model/metadata/MetadataEntry");
const MetadataType_1 = require("../model/metadata/MetadataType");
const MosaicId_1 = require("../model/mosaic/MosaicId");
const NamespaceId_1 = require("../model/namespace/NamespaceId");
const UInt64_1 = require("../model/UInt64");
const Http_1 = require("./Http");
const DtoMapping_1 = require("../core/utils/DtoMapping");
/**
 * Metadata http repository.
 *
 * @since 1.0
 */
class MetadataHttp extends Http_1.Http {
    /**
     * Constructor
     * @param url Base catapult-rest url
     * @param fetchApi fetch function to be used when performing rest requests.
     */
    constructor(url, fetchApi) {
        super(url, fetchApi);
        this.metadataRoutesApi = new symbol_openapi_typescript_fetch_client_1.MetadataRoutesApi(this.config());
    }
    /**
     * Gets an array of metadata.
     * @param criteria - Metadata search criteria
     * @returns Observable<Page<Metadata>>
     */
    search(criteria) {
        var _a, _b, _c, _d;
        return this.call(this.metadataRoutesApi.searchMetadataEntries((_a = criteria.sourceAddress) === null || _a === void 0 ? void 0 : _a.plain(), (_b = criteria.targetAddress) === null || _b === void 0 ? void 0 : _b.plain(), criteria.scopedMetadataKey, (_c = criteria.targetId) === null || _c === void 0 ? void 0 : _c.toHex(), (_d = criteria.metadataType) === null || _d === void 0 ? void 0 : _d.valueOf(), criteria.pageSize, criteria.pageNumber, criteria.offset, DtoMapping_1.DtoMapping.mapEnum(criteria.order)), (body) => super.toPage(body.pagination, body.data, this.toMetadata));
    }
    /**
     * It maps MetadataDTO into a Metadata
     * @param metadata - the dto
     * @returns the model Metadata.
     */
    toMetadata(metadata) {
        const metadataEntry = metadata.metadataEntry;
        let targetId;
        switch (metadataEntry.metadataType.valueOf()) {
            case MetadataType_1.MetadataType.Mosaic:
                targetId = new MosaicId_1.MosaicId(metadataEntry.targetId);
                break;
            case MetadataType_1.MetadataType.Namespace:
                targetId = NamespaceId_1.NamespaceId.createFromEncoded(metadataEntry.targetId);
                break;
            default:
                targetId = undefined;
        }
        return new Metadata_1.Metadata(metadata.id, new MetadataEntry_1.MetadataEntry(metadataEntry.compositeHash, Address_1.Address.createFromEncoded(metadataEntry.sourceAddress), Address_1.Address.createFromEncoded(metadataEntry.targetAddress), UInt64_1.UInt64.fromHex(metadataEntry.scopedMetadataKey), metadataEntry.metadataType.valueOf(), Convert_1.Convert.decodeHex(metadataEntry.value), targetId));
    }
}
exports.MetadataHttp = MetadataHttp;
//# sourceMappingURL=MetadataHttp.js.map