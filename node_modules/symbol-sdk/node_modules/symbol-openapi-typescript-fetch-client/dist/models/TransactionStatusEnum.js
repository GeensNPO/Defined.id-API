"use strict";
/* tslint:disable */
/* eslint-disable */
/*
 * Copyright 2019 NEM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest 1.2.0
 *
 * The version of the OpenAPI document: 0.9.6
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionStatusEnumToJSON = exports.TransactionStatusEnumFromJSONTyped = exports.TransactionStatusEnumFromJSON = exports.TransactionStatusEnum = void 0;
/**
 * List of status errors that can be returned via the status channel after announcing a transaction:
 * * Success
 * * Neutral
 * * Failure
 * * Failure_Core_Past_Deadline - Validation failed because the deadline passed.
 * * Failure_Core_Future_Deadline - Validation failed because the deadline is too far in the future.
 * * Failure_Core_Insufficient_Balance - Validation failed because the account has an insufficient balance.
 * * Failure_Core_Too_Many_Transactions - Validation failed because there are too many transactions in a block.
 * * Failure_Core_Nemesis_Account_Signed_After_Nemesis_Block - Validation failed because an entity originated from the nemesis account after the nemesis block.
 * * Failure_Core_Wrong_Network - Validation failed because the entity has the wrong network specified.
 * * Failure_Core_Invalid_Address - Validation failed because an address is invalid.
 * * Failure_Core_Invalid_Version - Validation failed because entity version is invalid.
 * * Failure_Core_Invalid_Transaction_Fee - Validation failed because a transaction fee is invalid.
 * * Failure_Core_Block_Harvester_Ineligible - Validation failed because a block was harvested by an ineligible harvester.
 * * Failure_Core_Zero_Address - Validation failed because an address is zero.
 * * Failure_Core_Zero_Public_Key - Validation failed because a public key is zero.
 * * Failure_Core_Nonzero_Internal_Padding - Validation failed because internal padding is nonzero.
 * * Failure_Core_Address_Collision - Validation failed because an address collision is detected.
 * * Failure_Core_Invalid_Link_Action - Validation failed because link action is invalid.
 * * Failure_Core_Link_Already_Exists - Validation failed because main account is already linked to another account.
 * * Failure_Core_Inconsistent_Unlink_Data - Validation failed because unlink data is not consistent with existing account link.
 * * Failure_Core_Invalid_Link_Range - Validation failed because link range is invalid.
 * * Failure_Core_Too_Many_Links - Validation failed because main account has too many links of the specified type.
 * * Failure_Hash_Already_Exists
 * * Failure_Signature_Not_Verifiable - Validation failed because the verification of the signature failed.
 * * Failure_AccountLink_Link_Already_Exists - Validation failed because main account is already linked to another account.
 * * Failure_AccountLink_Inconsistent_Unlink_Data - Validation failed because unlink data is not consistent with existing account link.
 * * Failure_AccountLink_Unknown_Link - Validation failed because main account is not linked to another account.
 * * Failure_AccountLink_Remote_Account_Ineligible - Validation failed because link is attempting to convert ineligible account to remote.
 * * Failure_AccountLink_Remote_Account_Signer_Prohibited - Validation failed because remote is not allowed to sign a transaction.
 * * Failure_AccountLink_Remote_Account_Participant_Prohibited - Validation failed because remote is not allowed to participate in the transaction.
 * * Failure_Aggregate_Too_Many_Transactions - Validation failed because aggregate has too many transactions.
 * * Failure_Aggregate_No_Transactions - Validation failed because aggregate does not have any transactions.
 * * Failure_Aggregate_Too_Many_Cosignatures - Validation failed because aggregate has too many cosignatures.
 * * Failure_Aggregate_Redundant_Cosignatures - Validation failed because redundant cosignatures are present.
 * * Failure_Aggregate_Ineligible_Cosignatories - Validation failed because at least one cosignatory is ineligible.
 * * Failure_Aggregate_Missing_Cosignatures - Validation failed because at least one required cosignature is missing.
 * * Failure_Aggregate_Transactions_Hash_Mismatch - Validation failed because the aggregate transactions hash does not match the calculated value.
 * * Failure_LockHash_Invalid_Mosaic_Id - Validation failed because lock does not allow the specified mosaic.
 * * Failure_LockHash_Invalid_Mosaic_Amount - Validation failed because lock does not allow the specified amount.
 * * Failure_LockHash_Hash_Already_Exists - Validation failed because hash is already present in cache.
 * * Failure_LockHash_Unknown_Hash - Validation failed because hash is not present in cache.
 * * Failure_LockHash_Inactive_Hash - Validation failed because hash is inactive.
 * * Failure_LockHash_Invalid_Duration - Validation failed because duration is too long.
 * * Failure_LockSecret_Invalid_Hash_Algorithm - Validation failed because hash algorithm for lock type secret is invalid.
 * * Failure_LockSecret_Hash_Already_Exists - Validation failed because hash is already present in cache.
 * * Failure_LockSecret_Proof_Size_Out_Of_Bounds - Validation failed because proof is too small or too large.
 * * Failure_LockSecret_Secret_Mismatch - Validation failed because secret does not match proof.
 * * Failure_LockSecret_Unknown_Composite_Key - Validation failed because composite key is unknown.
 * * Failure_LockSecret_Inactive_Secret - Validation failed because secret is inactive.
 * * Failure_LockSecret_Hash_Algorithm_Mismatch - Validation failed because hash algorithm does not match.
 * * Failure_LockSecret_Invalid_Duration - Validation failed because duration is too long.
 * * Failure_Metadata_Value_Too_Small - Validation failed because the metadata value is too small.
 * * Failure_Metadata_Value_Too_Large - Validation failed because the metadata value is too large.
 * * Failure_Metadata_Value_Size_Delta_Too_Large - Validation failed because the metadata value size delta is larger in magnitude than the value size.
 * * Failure_Metadata_Value_Size_Delta_Mismatch - Validation failed because the metadata value size delta does not match expected value based on the current state.
 * * Failure_Metadata_Value_Change_Irreversible - Validation failed because a metadata value change (truncation) is irreversible.
 * * Failure_Mosaic_Invalid_Duration - Validation failed because the duration has an invalid value.
 * * Failure_Mosaic_Invalid_Name - Validation failed because the name is invalid.
 * * Failure_Mosaic_Name_Id_Mismatch - Validation failed because the name and id don't match.
 * * Failure_Mosaic_Expired - Validation failed because the parent is expired.
 * * Failure_Mosaic_Owner_Conflict - Validation failed because the parent owner conflicts with the child owner.
 * * Failure_Mosaic_Id_Mismatch - Validation failed because the id is not the expected id generated from signer and nonce.
 * * Failure_Mosaic_Parent_Id_Conflict - Validation failed because the existing parent id does not match the supplied parent id.
 * * Failure_Mosaic_Invalid_Property - Validation failed because a mosaic property is invalid.
 * * Failure_Mosaic_Invalid_Flags - Validation failed because the mosaic flags are invalid.
 * * Failure_Mosaic_Invalid_Divisibility - Validation failed because the mosaic divisibility is invalid.
 * * Failure_Mosaic_Invalid_Supply_Change_Action - Validation failed because the mosaic supply change action is invalid.
 * * Failure_Mosaic_Invalid_Supply_Change_Amount - Validation failed because the mosaic supply change amount is invalid.
 * * Failure_Mosaic_Invalid_Id - Validation failed because the mosaic id is invalid.
 * * Failure_Mosaic_Modification_Disallowed - Validation failed because mosaic modification is not allowed.
 * * Failure_Mosaic_Modification_No_Changes - Validation failed because mosaic modification would not result in any changes.
 * * Failure_Mosaic_Supply_Immutable - Validation failed because the mosaic supply is immutable.
 * * Failure_Mosaic_Supply_Negative - Validation failed because the resulting mosaic supply is negative.
 * * Failure_Mosaic_Supply_Exceeded - Validation failed because the resulting mosaic supply exceeds the maximum allowed value.
 * * Failure_Mosaic_Non_Transferable - Validation failed because the mosaic is not transferable.
 * * Failure_Mosaic_Max_Mosaics_Exceeded - Validation failed because the credit of the mosaic would exceed the maximum of different mosaics an account is allowed to own.
 * * Failure_Mosaic_Required_Property_Flag_Unset - Validation failed because the mosaic has at least one required property flag unset.
 * * Failure_Multisig_Account_In_Both_Sets - Validation failed because account is specified to be both added and removed.
 * * Failure_Multisig_Multiple_Deletes - Validation failed because multiple removals are present.
 * * Failure_Multisig_Redundant_Modification - Validation failed because a modification is redundant.
 * * Failure_Multisig_Unknown_Multisig_Account - Validation failed because account is not in multisig cache.
 * * Failure_Multisig_Not_A_Cosignatory - Validation failed because account to be removed is not present.
 * * Failure_Multisig_Already_A_Cosignatory - Validation failed because account to be added is already a cosignatory.
 * * Failure_Multisig_Min_Setting_Out_Of_Range - Validation failed because new minimum settings are out of range.
 * * Failure_Multisig_Min_Setting_Larger_Than_Num_Cosignatories - Validation failed because min settings are larger than number of cosignatories.
 * * Failure_Multisig_Invalid_Modification_Action - Validation failed because the modification action is invalid.
 * * Failure_Multisig_Max_Cosigned_Accounts - Validation failed because the cosignatory already cosigns the maximum number of accounts.
 * * Failure_Multisig_Max_Cosignatories - Validation failed because the multisig account already has the maximum number of cosignatories.
 * * Failure_Multisig_Loop - Validation failed because a multisig loop is created.
 * * Failure_Multisig_Max_Multisig_Depth - Validation failed because the max multisig depth is exceeded.
 * * Failure_Multisig_Operation_Prohibited_By_Account - Validation failed because an operation is not permitted by a multisig account.
 * * Failure_Namespace_Invalid_Duration - Validation failed because the duration has an invalid value.
 * * Failure_Namespace_Invalid_Name - Validation failed because the name is invalid.
 * * Failure_Namespace_Name_Id_Mismatch - Validation failed because the name and id don't match.
 * * Failure_Namespace_Expired - Validation failed because the parent is expired.
 * * Failure_Namespace_Owner_Conflict - Validation failed because the parent owner conflicts with the child owner.
 * * Failure_Namespace_Id_Mismatch - Validation failed because the id is not the expected id generated from signer and nonce.
 * * Failure_Namespace_Invalid_Registration_Type - Validation failed because the namespace registration type is invalid.
 * * Failure_Namespace_Root_Name_Reserved - Validation failed because the root namespace has a reserved name.
 * * Failure_Namespace_Too_Deep - Validation failed because the resulting namespace would exceed the maximum allowed namespace depth.
 * * Failure_Namespace_Unknown_Parent - Validation failed because the namespace parent is unknown.
 * * Failure_Namespace_Already_Exists - Validation failed because the namespace already exists.
 * * Failure_Namespace_Already_Active - Validation failed because the namespace is already active.
 * * Failure_Namespace_Eternal_After_Nemesis_Block - Validation failed because an eternal namespace was received after the nemesis block.
 * * Failure_Namespace_Max_Children_Exceeded - Validation failed because the maximum number of children for a root namespace was exceeded.
 * * Failure_Namespace_Alias_Invalid_Action - Validation failed because alias action is invalid.
 * * Failure_Namespace_Unknown - Validation failed because namespace does not exist.
 * * Failure_Namespace_Alias_Already_Exists - Validation failed because namespace is already linked to an alias.
 * * Failure_Namespace_Unknown_Alias - Validation failed because namespace is not linked to an alias.
 * * Failure_Namespace_Alias_Inconsistent_Unlink_Type - Validation failed because unlink type is not consistent with existing alias.
 * * Failure_Namespace_Alias_Inconsistent_Unlink_Data - Validation failed because unlink data is not consistent with existing alias.
 * * Failure_Namespace_Alias_Invalid_Address - Validation failed because aliased address is invalid.
 * * Failure_RestrictionAccount_Invalid_Restriction_Flags - Validation failed because the account restriction flags are invalid.
 * * Failure_RestrictionAccount_Invalid_Modification_Action - Validation failed because a modification action is invalid.
 * * Failure_RestrictionAccount_Invalid_Modification_Address - Validation failed because a modification address is invalid.
 * * Failure_RestrictionAccount_Modification_Operation_Type_Incompatible - Validation failed because the operation type is incompatible. *Note*: This indicates that the existing restrictions have a different operation type than that specified in the notification.
 * * Failure_RestrictionAccount_Redundant_Modification - Validation failed because a modification is redundant.
 * * Failure_RestrictionAccount_Invalid_Modification - Validation failed because a value is not in the container.
 * * Failure_RestrictionAccount_Modification_Count_Exceeded - Validation failed because the transaction has too many modifications.
 * * Failure_RestrictionAccount_No_Modifications - Validation failed because the transaction has no modifications.
 * * Failure_RestrictionAccount_Values_Count_Exceeded - Validation failed because the resulting account restriction has too many values.
 * * Failure_RestrictionAccount_Invalid_Value - Validation failed because the account restriction value is invalid.
 * * Failure_RestrictionAccount_Address_Interaction_Prohibited - Validation failed because the addresses involved in the transaction are not allowed to interact.
 * * Failure_RestrictionAccount_Mosaic_Transfer_Prohibited - Validation failed because the mosaic transfer is prohibited by the recipient.
 * * Failure_RestrictionAccount_Operation_Type_Prohibited - Validation failed because the operation type is not allowed to be initiated by the signer.
 * * Failure_RestrictionMosaic_Invalid_Restriction_Type - Validation failed because the mosaic restriction type is invalid.
 * * Failure_RestrictionMosaic_Previous_Value_Mismatch - Validation failed because specified previous value does not match current value.
 * * Failure_RestrictionMosaic_Previous_Value_Must_Be_Zero - Validation failed because specified previous value is nonzero.
 * * Failure_RestrictionMosaic_Max_Restrictions_Exceeded - Validation failed because the maximum number of restrictions would be exeeded.
 * * Failure_RestrictionMosaic_Cannot_Delete_Nonexistent_Restriction - Validation failed because nonexistent restriction cannot be deleted.
 * * Failure_RestrictionMosaic_Unknown_Global_Restriction - Validation failed because required global restriction does not exist.
 * * Failure_RestrictionMosaic_Invalid_Global_Restriction - Validation failed because mosaic has invalid global restriction.
 * * Failure_RestrictionMosaic_Account_Unauthorized - Validation failed because account lacks proper permissions to move mosaic.
 * * Failure_Transfer_Message_Too_Large - Validation failed because the message is too large.
 * * Failure_Transfer_Out_Of_Order_Mosaics - Validation failed because mosaics are out of order.
 * * Failure_Chain_Unlinked - Validation failed because a block was received that did not link with the existing chain.
 * * Failure_Chain_Block_Not_Hit - Validation failed because a block was received that is not a hit.
 * * Failure_Chain_Block_Inconsistent_State_Hash - Validation failed because a block was received that has an inconsistent state hash.
 * * Failure_Chain_Block_Inconsistent_Receipts_Hash - Validation failed because a block was received that has an inconsistent receipts hash.
 * * Failure_Chain_Unconfirmed_Cache_Too_Full - Validation failed because the unconfirmed cache is too full.
 * * Failure_Consumer_Empty_Input - Validation failed because the consumer input is empty.
 * * Failure_Consumer_Block_Transactions_Hash_Mismatch - Validation failed because the block transactions hash does not match the calculated value.
 * * Neutral_Consumer_Hash_In_Recency_Cache - Validation failed because an entity hash is present in the recency cache.
 * * Failure_Consumer_Remote_Chain_Too_Many_Blocks - Validation failed because the chain part has too many blocks.
 * * Failure_Consumer_Remote_Chain_Improper_Link - Validation failed because the chain is internally improperly linked.
 * * Failure_Consumer_Remote_Chain_Duplicate_Transactions - Validation failed because the chain part contains duplicate transactions.
 * * Failure_Consumer_Remote_Chain_Unlinked - Validation failed because the chain part does not link to the current chain.
 * * Failure_Consumer_Remote_Chain_Difficulties_Mismatch - Validation failed because the remote chain difficulties do not match the calculated difficulties.
 * * Failure_Consumer_Remote_Chain_Score_Not_Better - Validation failed because the remote chain score is not better.
 * * Failure_Consumer_Remote_Chain_Too_Far_Behind - Validation failed because the remote chain is too far behind.
 * * Failure_Consumer_Remote_Chain_Too_Far_In_Future - Validation failed because the remote chain timestamp is too far in the future.
 * * Failure_Consumer_Batch_Signature_Not_Verifiable - Validation failed because the verification of the signature failed during a batch operation.
 * * Failure_Extension_Partial_Transaction_Cache_Prune - Validation failed because the partial transaction was pruned from the temporal cache.
 * * Failure_Extension_Partial_Transaction_Dependency_Removed - Validation failed because the partial transaction was pruned from the temporal cache due to its dependency being removed.
 * * Failure_Extension_Read_Rate_Limit_Exceeded - Validation failed because socket read rate limit was exceeded.
 * @export
 * @enum {string}
 */
var TransactionStatusEnum;
(function (TransactionStatusEnum) {
    TransactionStatusEnum["Success"] = "Success";
    TransactionStatusEnum["Neutral"] = "Neutral";
    TransactionStatusEnum["Failure"] = "Failure";
    TransactionStatusEnum["FailureCorePastDeadline"] = "Failure_Core_Past_Deadline";
    TransactionStatusEnum["FailureCoreFutureDeadline"] = "Failure_Core_Future_Deadline";
    TransactionStatusEnum["FailureCoreInsufficientBalance"] = "Failure_Core_Insufficient_Balance";
    TransactionStatusEnum["FailureCoreTooManyTransactions"] = "Failure_Core_Too_Many_Transactions";
    TransactionStatusEnum["FailureCoreNemesisAccountSignedAfterNemesisBlock"] = "Failure_Core_Nemesis_Account_Signed_After_Nemesis_Block";
    TransactionStatusEnum["FailureCoreWrongNetwork"] = "Failure_Core_Wrong_Network";
    TransactionStatusEnum["FailureCoreInvalidAddress"] = "Failure_Core_Invalid_Address";
    TransactionStatusEnum["FailureCoreInvalidVersion"] = "Failure_Core_Invalid_Version";
    TransactionStatusEnum["FailureCoreInvalidTransactionFee"] = "Failure_Core_Invalid_Transaction_Fee";
    TransactionStatusEnum["FailureCoreBlockHarvesterIneligible"] = "Failure_Core_Block_Harvester_Ineligible";
    TransactionStatusEnum["FailureCoreZeroAddress"] = "Failure_Core_Zero_Address";
    TransactionStatusEnum["FailureCoreZeroPublicKey"] = "Failure_Core_Zero_Public_Key";
    TransactionStatusEnum["FailureCoreNonzeroInternalPadding"] = "Failure_Core_Nonzero_Internal_Padding";
    TransactionStatusEnum["FailureCoreAddressCollision"] = "Failure_Core_Address_Collision";
    TransactionStatusEnum["FailureCoreInvalidLinkAction"] = "Failure_Core_Invalid_Link_Action";
    TransactionStatusEnum["FailureCoreLinkAlreadyExists"] = "Failure_Core_Link_Already_Exists";
    TransactionStatusEnum["FailureCoreInconsistentUnlinkData"] = "Failure_Core_Inconsistent_Unlink_Data";
    TransactionStatusEnum["FailureCoreInvalidLinkRange"] = "Failure_Core_Invalid_Link_Range";
    TransactionStatusEnum["FailureCoreTooManyLinks"] = "Failure_Core_Too_Many_Links";
    TransactionStatusEnum["FailureHashAlreadyExists"] = "Failure_Hash_Already_Exists";
    TransactionStatusEnum["FailureSignatureNotVerifiable"] = "Failure_Signature_Not_Verifiable";
    TransactionStatusEnum["FailureAccountLinkLinkAlreadyExists"] = "Failure_AccountLink_Link_Already_Exists";
    TransactionStatusEnum["FailureAccountLinkInconsistentUnlinkData"] = "Failure_AccountLink_Inconsistent_Unlink_Data";
    TransactionStatusEnum["FailureAccountLinkUnknownLink"] = "Failure_AccountLink_Unknown_Link";
    TransactionStatusEnum["FailureAccountLinkRemoteAccountIneligible"] = "Failure_AccountLink_Remote_Account_Ineligible";
    TransactionStatusEnum["FailureAccountLinkRemoteAccountSignerProhibited"] = "Failure_AccountLink_Remote_Account_Signer_Prohibited";
    TransactionStatusEnum["FailureAccountLinkRemoteAccountParticipantProhibited"] = "Failure_AccountLink_Remote_Account_Participant_Prohibited";
    TransactionStatusEnum["FailureAggregateTooManyTransactions"] = "Failure_Aggregate_Too_Many_Transactions";
    TransactionStatusEnum["FailureAggregateNoTransactions"] = "Failure_Aggregate_No_Transactions";
    TransactionStatusEnum["FailureAggregateTooManyCosignatures"] = "Failure_Aggregate_Too_Many_Cosignatures";
    TransactionStatusEnum["FailureAggregateRedundantCosignatures"] = "Failure_Aggregate_Redundant_Cosignatures";
    TransactionStatusEnum["FailureAggregateIneligibleCosignatories"] = "Failure_Aggregate_Ineligible_Cosignatories";
    TransactionStatusEnum["FailureAggregateMissingCosignatures"] = "Failure_Aggregate_Missing_Cosignatures";
    TransactionStatusEnum["FailureAggregateTransactionsHashMismatch"] = "Failure_Aggregate_Transactions_Hash_Mismatch";
    TransactionStatusEnum["FailureLockHashInvalidMosaicId"] = "Failure_LockHash_Invalid_Mosaic_Id";
    TransactionStatusEnum["FailureLockHashInvalidMosaicAmount"] = "Failure_LockHash_Invalid_Mosaic_Amount";
    TransactionStatusEnum["FailureLockHashHashAlreadyExists"] = "Failure_LockHash_Hash_Already_Exists";
    TransactionStatusEnum["FailureLockHashUnknownHash"] = "Failure_LockHash_Unknown_Hash";
    TransactionStatusEnum["FailureLockHashInactiveHash"] = "Failure_LockHash_Inactive_Hash";
    TransactionStatusEnum["FailureLockHashInvalidDuration"] = "Failure_LockHash_Invalid_Duration";
    TransactionStatusEnum["FailureLockSecretInvalidHashAlgorithm"] = "Failure_LockSecret_Invalid_Hash_Algorithm";
    TransactionStatusEnum["FailureLockSecretHashAlreadyExists"] = "Failure_LockSecret_Hash_Already_Exists";
    TransactionStatusEnum["FailureLockSecretProofSizeOutOfBounds"] = "Failure_LockSecret_Proof_Size_Out_Of_Bounds";
    TransactionStatusEnum["FailureLockSecretSecretMismatch"] = "Failure_LockSecret_Secret_Mismatch";
    TransactionStatusEnum["FailureLockSecretUnknownCompositeKey"] = "Failure_LockSecret_Unknown_Composite_Key";
    TransactionStatusEnum["FailureLockSecretInactiveSecret"] = "Failure_LockSecret_Inactive_Secret";
    TransactionStatusEnum["FailureLockSecretHashAlgorithmMismatch"] = "Failure_LockSecret_Hash_Algorithm_Mismatch";
    TransactionStatusEnum["FailureLockSecretInvalidDuration"] = "Failure_LockSecret_Invalid_Duration";
    TransactionStatusEnum["FailureMetadataValueTooSmall"] = "Failure_Metadata_Value_Too_Small";
    TransactionStatusEnum["FailureMetadataValueTooLarge"] = "Failure_Metadata_Value_Too_Large";
    TransactionStatusEnum["FailureMetadataValueSizeDeltaTooLarge"] = "Failure_Metadata_Value_Size_Delta_Too_Large";
    TransactionStatusEnum["FailureMetadataValueSizeDeltaMismatch"] = "Failure_Metadata_Value_Size_Delta_Mismatch";
    TransactionStatusEnum["FailureMetadataValueChangeIrreversible"] = "Failure_Metadata_Value_Change_Irreversible";
    TransactionStatusEnum["FailureMosaicInvalidDuration"] = "Failure_Mosaic_Invalid_Duration";
    TransactionStatusEnum["FailureMosaicInvalidName"] = "Failure_Mosaic_Invalid_Name";
    TransactionStatusEnum["FailureMosaicNameIdMismatch"] = "Failure_Mosaic_Name_Id_Mismatch";
    TransactionStatusEnum["FailureMosaicExpired"] = "Failure_Mosaic_Expired";
    TransactionStatusEnum["FailureMosaicOwnerConflict"] = "Failure_Mosaic_Owner_Conflict";
    TransactionStatusEnum["FailureMosaicIdMismatch"] = "Failure_Mosaic_Id_Mismatch";
    TransactionStatusEnum["FailureMosaicParentIdConflict"] = "Failure_Mosaic_Parent_Id_Conflict";
    TransactionStatusEnum["FailureMosaicInvalidProperty"] = "Failure_Mosaic_Invalid_Property";
    TransactionStatusEnum["FailureMosaicInvalidFlags"] = "Failure_Mosaic_Invalid_Flags";
    TransactionStatusEnum["FailureMosaicInvalidDivisibility"] = "Failure_Mosaic_Invalid_Divisibility";
    TransactionStatusEnum["FailureMosaicInvalidSupplyChangeAction"] = "Failure_Mosaic_Invalid_Supply_Change_Action";
    TransactionStatusEnum["FailureMosaicInvalidSupplyChangeAmount"] = "Failure_Mosaic_Invalid_Supply_Change_Amount";
    TransactionStatusEnum["FailureMosaicInvalidId"] = "Failure_Mosaic_Invalid_Id";
    TransactionStatusEnum["FailureMosaicModificationDisallowed"] = "Failure_Mosaic_Modification_Disallowed";
    TransactionStatusEnum["FailureMosaicModificationNoChanges"] = "Failure_Mosaic_Modification_No_Changes";
    TransactionStatusEnum["FailureMosaicSupplyImmutable"] = "Failure_Mosaic_Supply_Immutable";
    TransactionStatusEnum["FailureMosaicSupplyNegative"] = "Failure_Mosaic_Supply_Negative";
    TransactionStatusEnum["FailureMosaicSupplyExceeded"] = "Failure_Mosaic_Supply_Exceeded";
    TransactionStatusEnum["FailureMosaicNonTransferable"] = "Failure_Mosaic_Non_Transferable";
    TransactionStatusEnum["FailureMosaicMaxMosaicsExceeded"] = "Failure_Mosaic_Max_Mosaics_Exceeded";
    TransactionStatusEnum["FailureMosaicRequiredPropertyFlagUnset"] = "Failure_Mosaic_Required_Property_Flag_Unset";
    TransactionStatusEnum["FailureMultisigAccountInBothSets"] = "Failure_Multisig_Account_In_Both_Sets";
    TransactionStatusEnum["FailureMultisigMultipleDeletes"] = "Failure_Multisig_Multiple_Deletes";
    TransactionStatusEnum["FailureMultisigRedundantModification"] = "Failure_Multisig_Redundant_Modification";
    TransactionStatusEnum["FailureMultisigUnknownMultisigAccount"] = "Failure_Multisig_Unknown_Multisig_Account";
    TransactionStatusEnum["FailureMultisigNotACosignatory"] = "Failure_Multisig_Not_A_Cosignatory";
    TransactionStatusEnum["FailureMultisigAlreadyACosignatory"] = "Failure_Multisig_Already_A_Cosignatory";
    TransactionStatusEnum["FailureMultisigMinSettingOutOfRange"] = "Failure_Multisig_Min_Setting_Out_Of_Range";
    TransactionStatusEnum["FailureMultisigMinSettingLargerThanNumCosignatories"] = "Failure_Multisig_Min_Setting_Larger_Than_Num_Cosignatories";
    TransactionStatusEnum["FailureMultisigInvalidModificationAction"] = "Failure_Multisig_Invalid_Modification_Action";
    TransactionStatusEnum["FailureMultisigMaxCosignedAccounts"] = "Failure_Multisig_Max_Cosigned_Accounts";
    TransactionStatusEnum["FailureMultisigMaxCosignatories"] = "Failure_Multisig_Max_Cosignatories";
    TransactionStatusEnum["FailureMultisigLoop"] = "Failure_Multisig_Loop";
    TransactionStatusEnum["FailureMultisigMaxMultisigDepth"] = "Failure_Multisig_Max_Multisig_Depth";
    TransactionStatusEnum["FailureMultisigOperationProhibitedByAccount"] = "Failure_Multisig_Operation_Prohibited_By_Account";
    TransactionStatusEnum["FailureNamespaceInvalidDuration"] = "Failure_Namespace_Invalid_Duration";
    TransactionStatusEnum["FailureNamespaceInvalidName"] = "Failure_Namespace_Invalid_Name";
    TransactionStatusEnum["FailureNamespaceNameIdMismatch"] = "Failure_Namespace_Name_Id_Mismatch";
    TransactionStatusEnum["FailureNamespaceExpired"] = "Failure_Namespace_Expired";
    TransactionStatusEnum["FailureNamespaceOwnerConflict"] = "Failure_Namespace_Owner_Conflict";
    TransactionStatusEnum["FailureNamespaceIdMismatch"] = "Failure_Namespace_Id_Mismatch";
    TransactionStatusEnum["FailureNamespaceInvalidRegistrationType"] = "Failure_Namespace_Invalid_Registration_Type";
    TransactionStatusEnum["FailureNamespaceRootNameReserved"] = "Failure_Namespace_Root_Name_Reserved";
    TransactionStatusEnum["FailureNamespaceTooDeep"] = "Failure_Namespace_Too_Deep";
    TransactionStatusEnum["FailureNamespaceUnknownParent"] = "Failure_Namespace_Unknown_Parent";
    TransactionStatusEnum["FailureNamespaceAlreadyExists"] = "Failure_Namespace_Already_Exists";
    TransactionStatusEnum["FailureNamespaceAlreadyActive"] = "Failure_Namespace_Already_Active";
    TransactionStatusEnum["FailureNamespaceEternalAfterNemesisBlock"] = "Failure_Namespace_Eternal_After_Nemesis_Block";
    TransactionStatusEnum["FailureNamespaceMaxChildrenExceeded"] = "Failure_Namespace_Max_Children_Exceeded";
    TransactionStatusEnum["FailureNamespaceAliasInvalidAction"] = "Failure_Namespace_Alias_Invalid_Action";
    TransactionStatusEnum["FailureNamespaceUnknown"] = "Failure_Namespace_Unknown";
    TransactionStatusEnum["FailureNamespaceAliasAlreadyExists"] = "Failure_Namespace_Alias_Already_Exists";
    TransactionStatusEnum["FailureNamespaceUnknownAlias"] = "Failure_Namespace_Unknown_Alias";
    TransactionStatusEnum["FailureNamespaceAliasInconsistentUnlinkType"] = "Failure_Namespace_Alias_Inconsistent_Unlink_Type";
    TransactionStatusEnum["FailureNamespaceAliasInconsistentUnlinkData"] = "Failure_Namespace_Alias_Inconsistent_Unlink_Data";
    TransactionStatusEnum["FailureNamespaceAliasInvalidAddress"] = "Failure_Namespace_Alias_Invalid_Address";
    TransactionStatusEnum["FailureRestrictionAccountInvalidRestrictionFlags"] = "Failure_RestrictionAccount_Invalid_Restriction_Flags";
    TransactionStatusEnum["FailureRestrictionAccountInvalidModificationAction"] = "Failure_RestrictionAccount_Invalid_Modification_Action";
    TransactionStatusEnum["FailureRestrictionAccountInvalidModificationAddress"] = "Failure_RestrictionAccount_Invalid_Modification_Address";
    TransactionStatusEnum["FailureRestrictionAccountModificationOperationTypeIncompatible"] = "Failure_RestrictionAccount_Modification_Operation_Type_Incompatible";
    TransactionStatusEnum["FailureRestrictionAccountRedundantModification"] = "Failure_RestrictionAccount_Redundant_Modification";
    TransactionStatusEnum["FailureRestrictionAccountInvalidModification"] = "Failure_RestrictionAccount_Invalid_Modification";
    TransactionStatusEnum["FailureRestrictionAccountModificationCountExceeded"] = "Failure_RestrictionAccount_Modification_Count_Exceeded";
    TransactionStatusEnum["FailureRestrictionAccountNoModifications"] = "Failure_RestrictionAccount_No_Modifications";
    TransactionStatusEnum["FailureRestrictionAccountValuesCountExceeded"] = "Failure_RestrictionAccount_Values_Count_Exceeded";
    TransactionStatusEnum["FailureRestrictionAccountInvalidValue"] = "Failure_RestrictionAccount_Invalid_Value";
    TransactionStatusEnum["FailureRestrictionAccountAddressInteractionProhibited"] = "Failure_RestrictionAccount_Address_Interaction_Prohibited";
    TransactionStatusEnum["FailureRestrictionAccountMosaicTransferProhibited"] = "Failure_RestrictionAccount_Mosaic_Transfer_Prohibited";
    TransactionStatusEnum["FailureRestrictionAccountOperationTypeProhibited"] = "Failure_RestrictionAccount_Operation_Type_Prohibited";
    TransactionStatusEnum["FailureRestrictionMosaicInvalidRestrictionType"] = "Failure_RestrictionMosaic_Invalid_Restriction_Type";
    TransactionStatusEnum["FailureRestrictionMosaicPreviousValueMismatch"] = "Failure_RestrictionMosaic_Previous_Value_Mismatch";
    TransactionStatusEnum["FailureRestrictionMosaicPreviousValueMustBeZero"] = "Failure_RestrictionMosaic_Previous_Value_Must_Be_Zero";
    TransactionStatusEnum["FailureRestrictionMosaicMaxRestrictionsExceeded"] = "Failure_RestrictionMosaic_Max_Restrictions_Exceeded";
    TransactionStatusEnum["FailureRestrictionMosaicCannotDeleteNonexistentRestriction"] = "Failure_RestrictionMosaic_Cannot_Delete_Nonexistent_Restriction";
    TransactionStatusEnum["FailureRestrictionMosaicUnknownGlobalRestriction"] = "Failure_RestrictionMosaic_Unknown_Global_Restriction";
    TransactionStatusEnum["FailureRestrictionMosaicInvalidGlobalRestriction"] = "Failure_RestrictionMosaic_Invalid_Global_Restriction";
    TransactionStatusEnum["FailureRestrictionMosaicAccountUnauthorized"] = "Failure_RestrictionMosaic_Account_Unauthorized";
    TransactionStatusEnum["FailureTransferMessageTooLarge"] = "Failure_Transfer_Message_Too_Large";
    TransactionStatusEnum["FailureTransferOutOfOrderMosaics"] = "Failure_Transfer_Out_Of_Order_Mosaics";
    TransactionStatusEnum["FailureChainUnlinked"] = "Failure_Chain_Unlinked";
    TransactionStatusEnum["FailureChainBlockNotHit"] = "Failure_Chain_Block_Not_Hit";
    TransactionStatusEnum["FailureChainBlockInconsistentStateHash"] = "Failure_Chain_Block_Inconsistent_State_Hash";
    TransactionStatusEnum["FailureChainBlockInconsistentReceiptsHash"] = "Failure_Chain_Block_Inconsistent_Receipts_Hash";
    TransactionStatusEnum["FailureChainUnconfirmedCacheTooFull"] = "Failure_Chain_Unconfirmed_Cache_Too_Full";
    TransactionStatusEnum["FailureConsumerEmptyInput"] = "Failure_Consumer_Empty_Input";
    TransactionStatusEnum["FailureConsumerBlockTransactionsHashMismatch"] = "Failure_Consumer_Block_Transactions_Hash_Mismatch";
    TransactionStatusEnum["NeutralConsumerHashInRecencyCache"] = "Neutral_Consumer_Hash_In_Recency_Cache";
    TransactionStatusEnum["FailureConsumerRemoteChainTooManyBlocks"] = "Failure_Consumer_Remote_Chain_Too_Many_Blocks";
    TransactionStatusEnum["FailureConsumerRemoteChainImproperLink"] = "Failure_Consumer_Remote_Chain_Improper_Link";
    TransactionStatusEnum["FailureConsumerRemoteChainDuplicateTransactions"] = "Failure_Consumer_Remote_Chain_Duplicate_Transactions";
    TransactionStatusEnum["FailureConsumerRemoteChainUnlinked"] = "Failure_Consumer_Remote_Chain_Unlinked";
    TransactionStatusEnum["FailureConsumerRemoteChainDifficultiesMismatch"] = "Failure_Consumer_Remote_Chain_Difficulties_Mismatch";
    TransactionStatusEnum["FailureConsumerRemoteChainScoreNotBetter"] = "Failure_Consumer_Remote_Chain_Score_Not_Better";
    TransactionStatusEnum["FailureConsumerRemoteChainTooFarBehind"] = "Failure_Consumer_Remote_Chain_Too_Far_Behind";
    TransactionStatusEnum["FailureConsumerRemoteChainTooFarInFuture"] = "Failure_Consumer_Remote_Chain_Too_Far_In_Future";
    TransactionStatusEnum["FailureConsumerBatchSignatureNotVerifiable"] = "Failure_Consumer_Batch_Signature_Not_Verifiable";
    TransactionStatusEnum["FailureExtensionPartialTransactionCachePrune"] = "Failure_Extension_Partial_Transaction_Cache_Prune";
    TransactionStatusEnum["FailureExtensionPartialTransactionDependencyRemoved"] = "Failure_Extension_Partial_Transaction_Dependency_Removed";
    TransactionStatusEnum["FailureExtensionReadRateLimitExceeded"] = "Failure_Extension_Read_Rate_Limit_Exceeded";
})(TransactionStatusEnum = exports.TransactionStatusEnum || (exports.TransactionStatusEnum = {}));
function TransactionStatusEnumFromJSON(json) {
    return TransactionStatusEnumFromJSONTyped(json, false);
}
exports.TransactionStatusEnumFromJSON = TransactionStatusEnumFromJSON;
function TransactionStatusEnumFromJSONTyped(json, ignoreDiscriminator) {
    return json;
}
exports.TransactionStatusEnumFromJSONTyped = TransactionStatusEnumFromJSONTyped;
function TransactionStatusEnumToJSON(value) {
    return value;
}
exports.TransactionStatusEnumToJSON = TransactionStatusEnumToJSON;
