"use strict";
/* tslint:disable */
/* eslint-disable */
/*
 * Copyright 2019 NEM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest 1.2.0
 *
 * The version of the OpenAPI document: 0.9.6
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChainPropertiesDTOToJSON = exports.ChainPropertiesDTOFromJSONTyped = exports.ChainPropertiesDTOFromJSON = void 0;
const runtime_1 = require("../runtime");
function ChainPropertiesDTOFromJSON(json) {
    return ChainPropertiesDTOFromJSONTyped(json, false);
}
exports.ChainPropertiesDTOFromJSON = ChainPropertiesDTOFromJSON;
function ChainPropertiesDTOFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'enableVerifiableState': !runtime_1.exists(json, 'enableVerifiableState') ? undefined : json['enableVerifiableState'],
        'enableVerifiableReceipts': !runtime_1.exists(json, 'enableVerifiableReceipts') ? undefined : json['enableVerifiableReceipts'],
        'currencyMosaicId': !runtime_1.exists(json, 'currencyMosaicId') ? undefined : json['currencyMosaicId'],
        'harvestingMosaicId': !runtime_1.exists(json, 'harvestingMosaicId') ? undefined : json['harvestingMosaicId'],
        'blockGenerationTargetTime': !runtime_1.exists(json, 'blockGenerationTargetTime') ? undefined : json['blockGenerationTargetTime'],
        'blockTimeSmoothingFactor': !runtime_1.exists(json, 'blockTimeSmoothingFactor') ? undefined : json['blockTimeSmoothingFactor'],
        'blockFinalizationInterval': !runtime_1.exists(json, 'blockFinalizationInterval') ? undefined : json['blockFinalizationInterval'],
        'importanceGrouping': !runtime_1.exists(json, 'importanceGrouping') ? undefined : json['importanceGrouping'],
        'importanceActivityPercentage': !runtime_1.exists(json, 'importanceActivityPercentage') ? undefined : json['importanceActivityPercentage'],
        'maxRollbackBlocks': !runtime_1.exists(json, 'maxRollbackBlocks') ? undefined : json['maxRollbackBlocks'],
        'maxDifficultyBlocks': !runtime_1.exists(json, 'maxDifficultyBlocks') ? undefined : json['maxDifficultyBlocks'],
        'defaultDynamicFeeMultiplier': !runtime_1.exists(json, 'defaultDynamicFeeMultiplier') ? undefined : json['defaultDynamicFeeMultiplier'],
        'maxTransactionLifetime': !runtime_1.exists(json, 'maxTransactionLifetime') ? undefined : json['maxTransactionLifetime'],
        'maxBlockFutureTime': !runtime_1.exists(json, 'maxBlockFutureTime') ? undefined : json['maxBlockFutureTime'],
        'initialCurrencyAtomicUnits': !runtime_1.exists(json, 'initialCurrencyAtomicUnits') ? undefined : json['initialCurrencyAtomicUnits'],
        'maxMosaicAtomicUnits': !runtime_1.exists(json, 'maxMosaicAtomicUnits') ? undefined : json['maxMosaicAtomicUnits'],
        'totalChainImportance': !runtime_1.exists(json, 'totalChainImportance') ? undefined : json['totalChainImportance'],
        'minHarvesterBalance': !runtime_1.exists(json, 'minHarvesterBalance') ? undefined : json['minHarvesterBalance'],
        'maxHarvesterBalance': !runtime_1.exists(json, 'maxHarvesterBalance') ? undefined : json['maxHarvesterBalance'],
        'minVoterBalance': !runtime_1.exists(json, 'minVoterBalance') ? undefined : json['minVoterBalance'],
        'maxVotingKeysPerAccount': !runtime_1.exists(json, 'maxVotingKeysPerAccount') ? undefined : json['maxVotingKeysPerAccount'],
        'minVotingKeyLifetime': !runtime_1.exists(json, 'minVotingKeyLifetime') ? undefined : json['minVotingKeyLifetime'],
        'maxVotingKeyLifetime': !runtime_1.exists(json, 'maxVotingKeyLifetime') ? undefined : json['maxVotingKeyLifetime'],
        'harvestBeneficiaryPercentage': !runtime_1.exists(json, 'harvestBeneficiaryPercentage') ? undefined : json['harvestBeneficiaryPercentage'],
        'harvestNetworkPercentage': !runtime_1.exists(json, 'harvestNetworkPercentage') ? undefined : json['harvestNetworkPercentage'],
        'harvestNetworkFeeSinkAddress': !runtime_1.exists(json, 'harvestNetworkFeeSinkAddress') ? undefined : json['harvestNetworkFeeSinkAddress'],
        'blockPruneInterval': !runtime_1.exists(json, 'blockPruneInterval') ? undefined : json['blockPruneInterval'],
        'maxTransactionsPerBlock': !runtime_1.exists(json, 'maxTransactionsPerBlock') ? undefined : json['maxTransactionsPerBlock'],
    };
}
exports.ChainPropertiesDTOFromJSONTyped = ChainPropertiesDTOFromJSONTyped;
function ChainPropertiesDTOToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'enableVerifiableState': value.enableVerifiableState,
        'enableVerifiableReceipts': value.enableVerifiableReceipts,
        'currencyMosaicId': value.currencyMosaicId,
        'harvestingMosaicId': value.harvestingMosaicId,
        'blockGenerationTargetTime': value.blockGenerationTargetTime,
        'blockTimeSmoothingFactor': value.blockTimeSmoothingFactor,
        'blockFinalizationInterval': value.blockFinalizationInterval,
        'importanceGrouping': value.importanceGrouping,
        'importanceActivityPercentage': value.importanceActivityPercentage,
        'maxRollbackBlocks': value.maxRollbackBlocks,
        'maxDifficultyBlocks': value.maxDifficultyBlocks,
        'defaultDynamicFeeMultiplier': value.defaultDynamicFeeMultiplier,
        'maxTransactionLifetime': value.maxTransactionLifetime,
        'maxBlockFutureTime': value.maxBlockFutureTime,
        'initialCurrencyAtomicUnits': value.initialCurrencyAtomicUnits,
        'maxMosaicAtomicUnits': value.maxMosaicAtomicUnits,
        'totalChainImportance': value.totalChainImportance,
        'minHarvesterBalance': value.minHarvesterBalance,
        'maxHarvesterBalance': value.maxHarvesterBalance,
        'minVoterBalance': value.minVoterBalance,
        'maxVotingKeysPerAccount': value.maxVotingKeysPerAccount,
        'minVotingKeyLifetime': value.minVotingKeyLifetime,
        'maxVotingKeyLifetime': value.maxVotingKeyLifetime,
        'harvestBeneficiaryPercentage': value.harvestBeneficiaryPercentage,
        'harvestNetworkPercentage': value.harvestNetworkPercentage,
        'harvestNetworkFeeSinkAddress': value.harvestNetworkFeeSinkAddress,
        'blockPruneInterval': value.blockPruneInterval,
        'maxTransactionsPerBlock': value.maxTransactionsPerBlock,
    };
}
exports.ChainPropertiesDTOToJSON = ChainPropertiesDTOToJSON;
