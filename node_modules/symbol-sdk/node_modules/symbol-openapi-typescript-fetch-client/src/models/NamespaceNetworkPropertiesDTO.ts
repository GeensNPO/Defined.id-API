/* tslint:disable */
/* eslint-disable */
/*
 * Copyright 2019 NEM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest 1.2.0
 *
 * The version of the OpenAPI document: 0.9.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface NamespaceNetworkPropertiesDTO
 */
export interface NamespaceNetworkPropertiesDTO {
    /**
     * Maximum namespace name size.
     * @type {string}
     * @memberof NamespaceNetworkPropertiesDTO
     */
    maxNameSize?: string;
    /**
     * Maximum number of children for a root namespace.
     * @type {string}
     * @memberof NamespaceNetworkPropertiesDTO
     */
    maxChildNamespaces?: string;
    /**
     * Maximum namespace depth.
     * @type {string}
     * @memberof NamespaceNetworkPropertiesDTO
     */
    maxNamespaceDepth?: string;
    /**
     * Minimum namespace duration.
     * @type {string}
     * @memberof NamespaceNetworkPropertiesDTO
     */
    minNamespaceDuration?: string;
    /**
     * Maximum namespace duration.
     * @type {string}
     * @memberof NamespaceNetworkPropertiesDTO
     */
    maxNamespaceDuration?: string;
    /**
     * Grace period during which time only the previous owner can renew an expired namespace.
     * @type {string}
     * @memberof NamespaceNetworkPropertiesDTO
     */
    namespaceGracePeriodDuration?: string;
    /**
     * Reserved root namespaces that cannot be claimed.
     * @type {string}
     * @memberof NamespaceNetworkPropertiesDTO
     */
    reservedRootNamespaceNames?: string;
    /**
     * Address encoded using a 32-character set.
     * @type {string}
     * @memberof NamespaceNetworkPropertiesDTO
     */
    namespaceRentalFeeSinkAddress?: string;
    /**
     * Root namespace rental fee per block.
     * @type {string}
     * @memberof NamespaceNetworkPropertiesDTO
     */
    rootNamespaceRentalFeePerBlock?: string;
    /**
     * Child namespace rental fee.
     * @type {string}
     * @memberof NamespaceNetworkPropertiesDTO
     */
    childNamespaceRentalFee?: string;
}

export function NamespaceNetworkPropertiesDTOFromJSON(json: any): NamespaceNetworkPropertiesDTO {
    return NamespaceNetworkPropertiesDTOFromJSONTyped(json, false);
}

export function NamespaceNetworkPropertiesDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): NamespaceNetworkPropertiesDTO {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'maxNameSize': !exists(json, 'maxNameSize') ? undefined : json['maxNameSize'],
        'maxChildNamespaces': !exists(json, 'maxChildNamespaces') ? undefined : json['maxChildNamespaces'],
        'maxNamespaceDepth': !exists(json, 'maxNamespaceDepth') ? undefined : json['maxNamespaceDepth'],
        'minNamespaceDuration': !exists(json, 'minNamespaceDuration') ? undefined : json['minNamespaceDuration'],
        'maxNamespaceDuration': !exists(json, 'maxNamespaceDuration') ? undefined : json['maxNamespaceDuration'],
        'namespaceGracePeriodDuration': !exists(json, 'namespaceGracePeriodDuration') ? undefined : json['namespaceGracePeriodDuration'],
        'reservedRootNamespaceNames': !exists(json, 'reservedRootNamespaceNames') ? undefined : json['reservedRootNamespaceNames'],
        'namespaceRentalFeeSinkAddress': !exists(json, 'namespaceRentalFeeSinkAddress') ? undefined : json['namespaceRentalFeeSinkAddress'],
        'rootNamespaceRentalFeePerBlock': !exists(json, 'rootNamespaceRentalFeePerBlock') ? undefined : json['rootNamespaceRentalFeePerBlock'],
        'childNamespaceRentalFee': !exists(json, 'childNamespaceRentalFee') ? undefined : json['childNamespaceRentalFee'],
    };
}

export function NamespaceNetworkPropertiesDTOToJSON(value?: NamespaceNetworkPropertiesDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'maxNameSize': value.maxNameSize,
        'maxChildNamespaces': value.maxChildNamespaces,
        'maxNamespaceDepth': value.maxNamespaceDepth,
        'minNamespaceDuration': value.minNamespaceDuration,
        'maxNamespaceDuration': value.maxNamespaceDuration,
        'namespaceGracePeriodDuration': value.namespaceGracePeriodDuration,
        'reservedRootNamespaceNames': value.reservedRootNamespaceNames,
        'namespaceRentalFeeSinkAddress': value.namespaceRentalFeeSinkAddress,
        'rootNamespaceRentalFeePerBlock': value.rootNamespaceRentalFeePerBlock,
        'childNamespaceRentalFee': value.childNamespaceRentalFee,
    };
}


