/* tslint:disable */
/* eslint-disable */
/*
 * Copyright 2019 NEM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest 1.2.0
 *
 * The version of the OpenAPI document: 0.9.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    MetadataTypeEnum,
    MetadataTypeEnumFromJSON,
    MetadataTypeEnumFromJSONTyped,
    MetadataTypeEnumToJSON,
} from './';

/**
 * 
 * @export
 * @interface MetadataEntryDTO
 */
export interface MetadataEntryDTO {
    /**
     * 
     * @type {string}
     * @memberof MetadataEntryDTO
     */
    compositeHash: string;
    /**
     * Address expressed in hexadecimal base.
     * @type {string}
     * @memberof MetadataEntryDTO
     */
    sourceAddress: string;
    /**
     * Address expressed in hexadecimal base.
     * @type {string}
     * @memberof MetadataEntryDTO
     */
    targetAddress: string;
    /**
     * Metadata key scoped to source, target and type expressed.
     * @type {string}
     * @memberof MetadataEntryDTO
     */
    scopedMetadataKey: string;
    /**
     * 
     * @type {string}
     * @memberof MetadataEntryDTO
     */
    targetId?: string;
    /**
     * 
     * @type {MetadataTypeEnum}
     * @memberof MetadataEntryDTO
     */
    metadataType: MetadataTypeEnum;
    /**
     * Metadata value.
     * @type {string}
     * @memberof MetadataEntryDTO
     */
    value: string;
}

export function MetadataEntryDTOFromJSON(json: any): MetadataEntryDTO {
    return MetadataEntryDTOFromJSONTyped(json, false);
}

export function MetadataEntryDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): MetadataEntryDTO {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'compositeHash': json['compositeHash'],
        'sourceAddress': json['sourceAddress'],
        'targetAddress': json['targetAddress'],
        'scopedMetadataKey': json['scopedMetadataKey'],
        'targetId': !exists(json, 'targetId') ? undefined : json['targetId'],
        'metadataType': json['metadataType'],
        'value': json['value'],
    };
}

export function MetadataEntryDTOToJSON(value?: MetadataEntryDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'compositeHash': value.compositeHash,
        'sourceAddress': value.sourceAddress,
        'targetAddress': value.targetAddress,
        'scopedMetadataKey': value.scopedMetadataKey,
        'targetId': value.targetId,
        'metadataType': value.metadataType,
        'value': value.value,
    };
}


