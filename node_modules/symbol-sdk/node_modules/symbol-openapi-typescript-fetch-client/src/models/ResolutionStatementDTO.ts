/* tslint:disable */
/* eslint-disable */
/*
 * Copyright 2019 NEM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest 1.2.0
 *
 * The version of the OpenAPI document: 0.9.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ResolutionEntryDTO,
    ResolutionEntryDTOFromJSON,
    ResolutionEntryDTOFromJSONTyped,
    ResolutionEntryDTOToJSON,
} from './';

/**
 * 
 * @export
 * @interface ResolutionStatementDTO
 */
export interface ResolutionStatementDTO {
    /**
     * Height of the blockchain.
     * @type {string}
     * @memberof ResolutionStatementDTO
     */
    height: string;
    /**
     * 
     * @type {string}
     * @memberof ResolutionStatementDTO
     */
    unresolved: string;
    /**
     * Array of resolution entries linked to the unresolved namespaceId.
     * It is an array instead of a single resolution entry since
     * within one block the resolution might change for different sources due to alias related transactions.
     * @type {Array<ResolutionEntryDTO>}
     * @memberof ResolutionStatementDTO
     */
    resolutionEntries: Array<ResolutionEntryDTO>;
}

export function ResolutionStatementDTOFromJSON(json: any): ResolutionStatementDTO {
    return ResolutionStatementDTOFromJSONTyped(json, false);
}

export function ResolutionStatementDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): ResolutionStatementDTO {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'height': json['height'],
        'unresolved': json['unresolved'],
        'resolutionEntries': ((json['resolutionEntries'] as Array<any>)),
    };
}

export function ResolutionStatementDTOToJSON(value?: ResolutionStatementDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'height': value.height,
        'unresolved': value.unresolved,
        'resolutionEntries': ((value.resolutionEntries as Array<any>)),
    };
}


