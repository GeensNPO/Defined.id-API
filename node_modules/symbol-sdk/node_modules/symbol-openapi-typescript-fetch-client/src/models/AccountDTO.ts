/* tslint:disable */
/* eslint-disable */
/*
 * Copyright 2019 NEM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest 1.2.0
 *
 * The version of the OpenAPI document: 0.9.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AccountTypeEnum,
    AccountTypeEnumFromJSON,
    AccountTypeEnumFromJSONTyped,
    AccountTypeEnumToJSON,
    ActivityBucketDTO,
    ActivityBucketDTOFromJSON,
    ActivityBucketDTOFromJSONTyped,
    ActivityBucketDTOToJSON,
    Mosaic,
    MosaicFromJSON,
    MosaicFromJSONTyped,
    MosaicToJSON,
    SupplementalPublicKeysDTO,
    SupplementalPublicKeysDTOFromJSON,
    SupplementalPublicKeysDTOFromJSONTyped,
    SupplementalPublicKeysDTOToJSON,
} from './';

/**
 * 
 * @export
 * @interface AccountDTO
 */
export interface AccountDTO {
    /**
     * Address expressed in hexadecimal base.
     * @type {string}
     * @memberof AccountDTO
     */
    address: string;
    /**
     * Height of the blockchain.
     * @type {string}
     * @memberof AccountDTO
     */
    addressHeight: string;
    /**
     * Public key.
     * @type {string}
     * @memberof AccountDTO
     */
    publicKey: string;
    /**
     * Height of the blockchain.
     * @type {string}
     * @memberof AccountDTO
     */
    publicKeyHeight: string;
    /**
     * 
     * @type {AccountTypeEnum}
     * @memberof AccountDTO
     */
    accountType: AccountTypeEnum;
    /**
     * 
     * @type {SupplementalPublicKeysDTO}
     * @memberof AccountDTO
     */
    supplementalPublicKeys: SupplementalPublicKeysDTO;
    /**
     * 
     * @type {Array<ActivityBucketDTO>}
     * @memberof AccountDTO
     */
    activityBuckets: Array<ActivityBucketDTO>;
    /**
     * Mosaic units owned.
     * @type {Array<Mosaic>}
     * @memberof AccountDTO
     */
    mosaics: Array<Mosaic>;
    /**
     * Probability of an account to harvest the next block.
     * @type {string}
     * @memberof AccountDTO
     */
    importance: string;
    /**
     * Height of the blockchain.
     * @type {string}
     * @memberof AccountDTO
     */
    importanceHeight: string;
}

export function AccountDTOFromJSON(json: any): AccountDTO {
    return AccountDTOFromJSONTyped(json, false);
}

export function AccountDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): AccountDTO {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'address': json['address'],
        'addressHeight': json['addressHeight'],
        'publicKey': json['publicKey'],
        'publicKeyHeight': json['publicKeyHeight'],
        'accountType': json['accountType'],
        'supplementalPublicKeys': json['supplementalPublicKeys'],
        'activityBuckets': ((json['activityBuckets'] as Array<any>)),
        'mosaics': ((json['mosaics'] as Array<any>)),
        'importance': json['importance'],
        'importanceHeight': json['importanceHeight'],
    };
}

export function AccountDTOToJSON(value?: AccountDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'address': value.address,
        'addressHeight': value.addressHeight,
        'publicKey': value.publicKey,
        'publicKeyHeight': value.publicKeyHeight,
        'accountType': value.accountType,
        'supplementalPublicKeys': value.supplementalPublicKeys,
        'activityBuckets': ((value.activityBuckets as Array<any>)),
        'mosaics': ((value.mosaics as Array<any>)),
        'importance': value.importance,
        'importanceHeight': value.importanceHeight,
    };
}


