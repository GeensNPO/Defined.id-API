/* tslint:disable */
/* eslint-disable */
/*
 * Copyright 2019 NEM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest 1.2.0
 *
 * The version of the OpenAPI document: 0.9.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AccountIds,
    AccountIdsFromJSON,
    AccountIdsToJSON,
    AccountRestrictionsInfoDTO,
    AccountRestrictionsInfoDTOFromJSON,
    AccountRestrictionsInfoDTOToJSON,
    ModelError,
    ModelErrorFromJSON,
    ModelErrorToJSON,
} from '../models';

export interface GetAccountRestrictionsRequest {
    accountId: string;
}

export interface GetAccountRestrictionsFromAccountsRequest {
    accountIds?: AccountIds;
}

/**
 * 
 */
export class RestrictionAccountRoutesApi extends runtime.BaseAPI {

    /**
     * Returns the account restrictions for a given account.
     * Get the account restrictions
     */
    async getAccountRestrictionsRaw(requestParameters: GetAccountRestrictionsRequest): Promise<runtime.ApiResponse<AccountRestrictionsInfoDTO>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getAccountRestrictions.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/restrictions/account/{accountId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountRestrictionsInfoDTOFromJSON(jsonValue));
    }

    /**
     * Returns the account restrictions for a given account.
     * Get the account restrictions
     */
    async getAccountRestrictions(accountId: string): Promise<AccountRestrictionsInfoDTO> {
        const response = await this.getAccountRestrictionsRaw({ accountId: accountId });
        return await response.value();
    }

    /**
     * Returns the account restrictions for a given array of addresses.
     * Get account restrictions for given array of addresses
     */
    async getAccountRestrictionsFromAccountsRaw(requestParameters: GetAccountRestrictionsFromAccountsRequest): Promise<runtime.ApiResponse<Array<AccountRestrictionsInfoDTO>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/restrictions/account`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AccountIdsToJSON(requestParameters.accountIds),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AccountRestrictionsInfoDTOFromJSON));
    }

    /**
     * Returns the account restrictions for a given array of addresses.
     * Get account restrictions for given array of addresses
     */
    async getAccountRestrictionsFromAccounts(accountIds?: AccountIds): Promise<Array<AccountRestrictionsInfoDTO>> {
        const response = await this.getAccountRestrictionsFromAccountsRaw({ accountIds: accountIds });
        return await response.value();
    }

}
