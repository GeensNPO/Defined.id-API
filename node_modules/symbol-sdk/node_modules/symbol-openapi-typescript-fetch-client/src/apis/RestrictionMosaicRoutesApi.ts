/* tslint:disable */
/* eslint-disable */
/*
 * Copyright 2019 NEM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest 1.2.0
 *
 * The version of the OpenAPI document: 0.9.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AccountIds,
    AccountIdsFromJSON,
    AccountIdsToJSON,
    ModelError,
    ModelErrorFromJSON,
    ModelErrorToJSON,
    MosaicAddressRestrictionDTO,
    MosaicAddressRestrictionDTOFromJSON,
    MosaicAddressRestrictionDTOToJSON,
    MosaicGlobalRestrictionDTO,
    MosaicGlobalRestrictionDTOFromJSON,
    MosaicGlobalRestrictionDTOToJSON,
    MosaicIds,
    MosaicIdsFromJSON,
    MosaicIdsToJSON,
} from '../models';

export interface GetMosaicAddressRestrictionRequest {
    mosaicId: string;
    address: string;
}

export interface GetMosaicAddressRestrictionsRequest {
    mosaicId: string;
    accountIds?: AccountIds;
}

export interface GetMosaicGlobalRestrictionRequest {
    mosaicId: string;
}

export interface GetMosaicGlobalRestrictionsRequest {
    mosaicIds: MosaicIds;
}

/**
 * 
 */
export class RestrictionMosaicRoutesApi extends runtime.BaseAPI {

    /**
     * Get mosaic address restriction.
     * Get mosaic address restrictions for a given mosaic and account address.
     */
    async getMosaicAddressRestrictionRaw(requestParameters: GetMosaicAddressRestrictionRequest): Promise<runtime.ApiResponse<MosaicAddressRestrictionDTO>> {
        if (requestParameters.mosaicId === null || requestParameters.mosaicId === undefined) {
            throw new runtime.RequiredError('mosaicId','Required parameter requestParameters.mosaicId was null or undefined when calling getMosaicAddressRestriction.');
        }

        if (requestParameters.address === null || requestParameters.address === undefined) {
            throw new runtime.RequiredError('address','Required parameter requestParameters.address was null or undefined when calling getMosaicAddressRestriction.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/restrictions/mosaic/{mosaicId}/address/{address}`.replace(`{${"mosaicId"}}`, encodeURIComponent(String(requestParameters.mosaicId))).replace(`{${"address"}}`, encodeURIComponent(String(requestParameters.address))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MosaicAddressRestrictionDTOFromJSON(jsonValue));
    }

    /**
     * Get mosaic address restriction.
     * Get mosaic address restrictions for a given mosaic and account address.
     */
    async getMosaicAddressRestriction(mosaicId: string, address: string): Promise<MosaicAddressRestrictionDTO> {
        const response = await this.getMosaicAddressRestrictionRaw({ mosaicId: mosaicId, address: address });
        return await response.value();
    }

    /**
     * Get mosaic address restrictions.
     * Get mosaic address restrictions for a given mosaic and account identifiers array.
     */
    async getMosaicAddressRestrictionsRaw(requestParameters: GetMosaicAddressRestrictionsRequest): Promise<runtime.ApiResponse<Array<MosaicAddressRestrictionDTO>>> {
        if (requestParameters.mosaicId === null || requestParameters.mosaicId === undefined) {
            throw new runtime.RequiredError('mosaicId','Required parameter requestParameters.mosaicId was null or undefined when calling getMosaicAddressRestrictions.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/restrictions/mosaic/{mosaicId}`.replace(`{${"mosaicId"}}`, encodeURIComponent(String(requestParameters.mosaicId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AccountIdsToJSON(requestParameters.accountIds),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MosaicAddressRestrictionDTOFromJSON));
    }

    /**
     * Get mosaic address restrictions.
     * Get mosaic address restrictions for a given mosaic and account identifiers array.
     */
    async getMosaicAddressRestrictions(mosaicId: string, accountIds?: AccountIds): Promise<Array<MosaicAddressRestrictionDTO>> {
        const response = await this.getMosaicAddressRestrictionsRaw({ mosaicId: mosaicId, accountIds: accountIds });
        return await response.value();
    }

    /**
     * Get mosaic global restriction.
     * Get mosaic global restriction for a given mosaic identifier.
     */
    async getMosaicGlobalRestrictionRaw(requestParameters: GetMosaicGlobalRestrictionRequest): Promise<runtime.ApiResponse<MosaicGlobalRestrictionDTO>> {
        if (requestParameters.mosaicId === null || requestParameters.mosaicId === undefined) {
            throw new runtime.RequiredError('mosaicId','Required parameter requestParameters.mosaicId was null or undefined when calling getMosaicGlobalRestriction.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/restrictions/mosaic/{mosaicId}`.replace(`{${"mosaicId"}}`, encodeURIComponent(String(requestParameters.mosaicId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MosaicGlobalRestrictionDTOFromJSON(jsonValue));
    }

    /**
     * Get mosaic global restriction.
     * Get mosaic global restriction for a given mosaic identifier.
     */
    async getMosaicGlobalRestriction(mosaicId: string): Promise<MosaicGlobalRestrictionDTO> {
        const response = await this.getMosaicGlobalRestrictionRaw({ mosaicId: mosaicId });
        return await response.value();
    }

    /**
     * Get mosaic global restrictions.
     * Get mosaic global restrictions for an array of mosaics.
     */
    async getMosaicGlobalRestrictionsRaw(requestParameters: GetMosaicGlobalRestrictionsRequest): Promise<runtime.ApiResponse<Array<MosaicGlobalRestrictionDTO>>> {
        if (requestParameters.mosaicIds === null || requestParameters.mosaicIds === undefined) {
            throw new runtime.RequiredError('mosaicIds','Required parameter requestParameters.mosaicIds was null or undefined when calling getMosaicGlobalRestrictions.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/restrictions/mosaic`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MosaicIdsToJSON(requestParameters.mosaicIds),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MosaicGlobalRestrictionDTOFromJSON));
    }

    /**
     * Get mosaic global restrictions.
     * Get mosaic global restrictions for an array of mosaics.
     */
    async getMosaicGlobalRestrictions(mosaicIds: MosaicIds): Promise<Array<MosaicGlobalRestrictionDTO>> {
        const response = await this.getMosaicGlobalRestrictionsRaw({ mosaicIds: mosaicIds });
        return await response.value();
    }

}
