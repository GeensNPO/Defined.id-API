/* tslint:disable */
/* eslint-disable */
/*
 * Copyright 2019 NEM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest 1.2.0
 *
 * The version of the OpenAPI document: 0.9.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ModelError,
    ModelErrorFromJSON,
    ModelErrorToJSON,
    TransactionHashes,
    TransactionHashesFromJSON,
    TransactionHashesToJSON,
    TransactionStatusDTO,
    TransactionStatusDTOFromJSON,
    TransactionStatusDTOToJSON,
} from '../models';

export interface GetTransactionStatusRequest {
    hash: string;
}

export interface GetTransactionStatusesRequest {
    transactionHashes: TransactionHashes;
}

/**
 * 
 */
export class TransactionStatusRoutesApi extends runtime.BaseAPI {

    /**
     * Returns the transaction status for a given hash.
     * Get transaction status
     */
    async getTransactionStatusRaw(requestParameters: GetTransactionStatusRequest): Promise<runtime.ApiResponse<TransactionStatusDTO>> {
        if (requestParameters.hash === null || requestParameters.hash === undefined) {
            throw new runtime.RequiredError('hash','Required parameter requestParameters.hash was null or undefined when calling getTransactionStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/transactionStatus/{hash}`.replace(`{${"hash"}}`, encodeURIComponent(String(requestParameters.hash))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionStatusDTOFromJSON(jsonValue));
    }

    /**
     * Returns the transaction status for a given hash.
     * Get transaction status
     */
    async getTransactionStatus(hash: string): Promise<TransactionStatusDTO> {
        const response = await this.getTransactionStatusRaw({ hash: hash });
        return await response.value();
    }

    /**
     * Returns an array of transaction statuses for a given array of transaction hashes.
     * Get transaction statuses
     */
    async getTransactionStatusesRaw(requestParameters: GetTransactionStatusesRequest): Promise<runtime.ApiResponse<Array<TransactionStatusDTO>>> {
        if (requestParameters.transactionHashes === null || requestParameters.transactionHashes === undefined) {
            throw new runtime.RequiredError('transactionHashes','Required parameter requestParameters.transactionHashes was null or undefined when calling getTransactionStatuses.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/transactionStatus`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionHashesToJSON(requestParameters.transactionHashes),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TransactionStatusDTOFromJSON));
    }

    /**
     * Returns an array of transaction statuses for a given array of transaction hashes.
     * Get transaction statuses
     */
    async getTransactionStatuses(transactionHashes: TransactionHashes): Promise<Array<TransactionStatusDTO>> {
        const response = await this.getTransactionStatusesRaw({ transactionHashes: transactionHashes });
        return await response.value();
    }

}
