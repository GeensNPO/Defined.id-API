// tslint:disable: jsdoc-format
/**
*** Copyright (c) 2016-present,
*** Jaguar0625, gimre, BloodyRookie, Tech Bureau, Corp. All rights reserved.
***
*** This file is part of Catapult.
***
*** Catapult is free software: you can redistribute it and/or modify
*** it under the terms of the GNU Lesser General Public License as published by
*** the Free Software Foundation, either version 3 of the License, or
*** (at your option) any later version.
***
*** Catapult is distributed in the hope that it will be useful,
*** but WITHOUT ANY WARRANTY; without even the implied warranty of
*** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
*** GNU Lesser General Public License for more details.
***
*** You should have received a copy of the GNU Lesser General Public License
*** along with Catapult. If not, see <http://www.gnu.org/licenses/>.
**/

import { GeneratorUtils } from './GeneratorUtils';
import { ImportanceDto } from './ImportanceDto';
import { ImportanceHeightDto } from './ImportanceHeightDto';

/** Temporal importance information. */
export class ImportanceSnapshotBuilder {
    /** Account importance. */
    importance: ImportanceDto;
    /** Importance height. */
    height: ImportanceHeightDto;

    /**
     * Constructor.
     *
     * @param importance Account importance.
     * @param height Importance height.
     */
    public constructor(importance: ImportanceDto,  height: ImportanceHeightDto) {
        this.importance = importance;
        this.height = height;
    }

    /**
     * Creates an instance of ImportanceSnapshotBuilder from binary payload.
     *
     * @param payload Byte payload to use to serialize the object.
     * @return Instance of ImportanceSnapshotBuilder.
     */
    public static loadFromBinary(payload: Uint8Array): ImportanceSnapshotBuilder {
        const byteArray = Array.from(payload);
        const importance = ImportanceDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, importance.getSize());
        const height = ImportanceHeightDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, height.getSize());
        return new ImportanceSnapshotBuilder(importance, height);
    }

    /**
     * Gets account importance.
     *
     * @return Account importance.
     */
    public getImportance(): ImportanceDto {
        return this.importance;
    }

    /**
     * Gets importance height.
     *
     * @return Importance height.
     */
    public getHeight(): ImportanceHeightDto {
        return this.height;
    }

    /**
     * Gets the size of the object.
     *
     * @return Size in bytes.
     */
    public getSize(): number {
        let size = 0;
        size += this.importance.getSize();
        size += this.height.getSize();
        return size;
    }

    /**
     * Serializes an object to bytes.
     *
     * @return Serialized bytes.
     */
    public serialize(): Uint8Array {
        let newArray = Uint8Array.from([]);
        const importanceBytes = this.importance.serialize();
        newArray = GeneratorUtils.concatTypedArrays(newArray, importanceBytes);
        const heightBytes = this.height.serialize();
        newArray = GeneratorUtils.concatTypedArrays(newArray, heightBytes);
        return newArray;
    }
}
