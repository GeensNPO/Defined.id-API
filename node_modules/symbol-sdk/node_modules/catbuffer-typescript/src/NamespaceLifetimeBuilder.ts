// tslint:disable: jsdoc-format
/**
*** Copyright (c) 2016-present,
*** Jaguar0625, gimre, BloodyRookie, Tech Bureau, Corp. All rights reserved.
***
*** This file is part of Catapult.
***
*** Catapult is free software: you can redistribute it and/or modify
*** it under the terms of the GNU Lesser General Public License as published by
*** the Free Software Foundation, either version 3 of the License, or
*** (at your option) any later version.
***
*** Catapult is distributed in the hope that it will be useful,
*** but WITHOUT ANY WARRANTY; without even the implied warranty of
*** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
*** GNU Lesser General Public License for more details.
***
*** You should have received a copy of the GNU Lesser General Public License
*** along with Catapult. If not, see <http://www.gnu.org/licenses/>.
**/

import { GeneratorUtils } from './GeneratorUtils';
import { HeightDto } from './HeightDto';

/** Binary layout for namespace lifetime. */
export class NamespaceLifetimeBuilder {
    /** Start height. */
    lifetimeStart: HeightDto;
    /** End height. */
    lifetimeEnd: HeightDto;

    /**
     * Constructor.
     *
     * @param lifetimeStart Start height.
     * @param lifetimeEnd End height.
     */
    public constructor(lifetimeStart: HeightDto,  lifetimeEnd: HeightDto) {
        this.lifetimeStart = lifetimeStart;
        this.lifetimeEnd = lifetimeEnd;
    }

    /**
     * Creates an instance of NamespaceLifetimeBuilder from binary payload.
     *
     * @param payload Byte payload to use to serialize the object.
     * @return Instance of NamespaceLifetimeBuilder.
     */
    public static loadFromBinary(payload: Uint8Array): NamespaceLifetimeBuilder {
        const byteArray = Array.from(payload);
        const lifetimeStart = HeightDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, lifetimeStart.getSize());
        const lifetimeEnd = HeightDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, lifetimeEnd.getSize());
        return new NamespaceLifetimeBuilder(lifetimeStart, lifetimeEnd);
    }

    /**
     * Gets start height.
     *
     * @return Start height.
     */
    public getLifetimeStart(): HeightDto {
        return this.lifetimeStart;
    }

    /**
     * Gets end height.
     *
     * @return End height.
     */
    public getLifetimeEnd(): HeightDto {
        return this.lifetimeEnd;
    }

    /**
     * Gets the size of the object.
     *
     * @return Size in bytes.
     */
    public getSize(): number {
        let size = 0;
        size += this.lifetimeStart.getSize();
        size += this.lifetimeEnd.getSize();
        return size;
    }

    /**
     * Serializes an object to bytes.
     *
     * @return Serialized bytes.
     */
    public serialize(): Uint8Array {
        let newArray = Uint8Array.from([]);
        const lifetimeStartBytes = this.lifetimeStart.serialize();
        newArray = GeneratorUtils.concatTypedArrays(newArray, lifetimeStartBytes);
        const lifetimeEndBytes = this.lifetimeEnd.serialize();
        newArray = GeneratorUtils.concatTypedArrays(newArray, lifetimeEndBytes);
        return newArray;
    }
}
