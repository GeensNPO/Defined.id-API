// tslint:disable: jsdoc-format
/**
*** Copyright (c) 2016-present,
*** Jaguar0625, gimre, BloodyRookie, Tech Bureau, Corp. All rights reserved.
***
*** This file is part of Catapult.
***
*** Catapult is free software: you can redistribute it and/or modify
*** it under the terms of the GNU Lesser General Public License as published by
*** the Free Software Foundation, either version 3 of the License, or
*** (at your option) any later version.
***
*** Catapult is distributed in the hope that it will be useful,
*** but WITHOUT ANY WARRANTY; without even the implied warranty of
*** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
*** GNU Lesser General Public License for more details.
***
*** You should have received a copy of the GNU Lesser General Public License
*** along with Catapult. If not, see <http://www.gnu.org/licenses/>.
**/

import { AccountRestrictionsInfoBuilder } from './AccountRestrictionsInfoBuilder';
import { AddressDto } from './AddressDto';
import { GeneratorUtils } from './GeneratorUtils';

/** Binary layout for account restrictions. */
export class AccountRestrictionsBuilder {
    /** Address on which restrictions are placed. */
    address: AddressDto;
    /** Account restrictions. */
    restrictions: AccountRestrictionsInfoBuilder[];

    /**
     * Constructor.
     *
     * @param address Address on which restrictions are placed.
     * @param restrictions Account restrictions.
     */
    public constructor(address: AddressDto,  restrictions: AccountRestrictionsInfoBuilder[]) {
        this.address = address;
        this.restrictions = restrictions;
    }

    /**
     * Creates an instance of AccountRestrictionsBuilder from binary payload.
     *
     * @param payload Byte payload to use to serialize the object.
     * @return Instance of AccountRestrictionsBuilder.
     */
    public static loadFromBinary(payload: Uint8Array): AccountRestrictionsBuilder {
        const byteArray = Array.from(payload);
        const address = AddressDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, address.getSize());
        const restrictionsCount = GeneratorUtils.bufferToUint64(GeneratorUtils.getBytes(Uint8Array.from(byteArray), 8));
        byteArray.splice(0, 8);
        const restrictions: AccountRestrictionsInfoBuilder[] = [];
        // tslint:disable-next-line: max-line-length
        for (let i = 0; i < (Array.isArray(restrictionsCount) ? GeneratorUtils.compact(restrictionsCount) : restrictionsCount); i++) {
            const item = AccountRestrictionsInfoBuilder.loadFromBinary(Uint8Array.from(byteArray));
            restrictions.push(item);
            byteArray.splice(0, item.getSize());
        }
        return new AccountRestrictionsBuilder(address, restrictions);
    }

    /**
     * Gets address on which restrictions are placed.
     *
     * @return Address on which restrictions are placed.
     */
    public getAddress(): AddressDto {
        return this.address;
    }

    /**
     * Gets account restrictions.
     *
     * @return Account restrictions.
     */
    public getRestrictions(): AccountRestrictionsInfoBuilder[] {
        return this.restrictions;
    }

    /**
     * Gets the size of the object.
     *
     * @return Size in bytes.
     */
    public getSize(): number {
        let size = 0;
        size += this.address.getSize();
        size += 8; // restrictionsCount
        this.restrictions.forEach((o) => size += o.getSize());
        return size;
    }

    /**
     * Serializes an object to bytes.
     *
     * @return Serialized bytes.
     */
    public serialize(): Uint8Array {
        let newArray = Uint8Array.from([]);
        const addressBytes = this.address.serialize();
        newArray = GeneratorUtils.concatTypedArrays(newArray, addressBytes);
        const restrictionsCountBytes = GeneratorUtils.uint64ToBuffer(GeneratorUtils.fromUint(this.restrictions.length));
        newArray = GeneratorUtils.concatTypedArrays(newArray, restrictionsCountBytes);
        this.restrictions.forEach((item) => {
            const restrictionsBytes = item.serialize();
            newArray = GeneratorUtils.concatTypedArrays(newArray, restrictionsBytes);
        });
        return newArray;
    }
}
