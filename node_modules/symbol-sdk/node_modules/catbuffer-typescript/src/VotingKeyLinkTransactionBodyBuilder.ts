// tslint:disable: jsdoc-format
/**
*** Copyright (c) 2016-present,
*** Jaguar0625, gimre, BloodyRookie, Tech Bureau, Corp. All rights reserved.
***
*** This file is part of Catapult.
***
*** Catapult is free software: you can redistribute it and/or modify
*** it under the terms of the GNU Lesser General Public License as published by
*** the Free Software Foundation, either version 3 of the License, or
*** (at your option) any later version.
***
*** Catapult is distributed in the hope that it will be useful,
*** but WITHOUT ANY WARRANTY; without even the implied warranty of
*** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
*** GNU Lesser General Public License for more details.
***
*** You should have received a copy of the GNU Lesser General Public License
*** along with Catapult. If not, see <http://www.gnu.org/licenses/>.
**/

import { FinalizationPointDto } from './FinalizationPointDto';
import { GeneratorUtils } from './GeneratorUtils';
import { LinkActionDto } from './LinkActionDto';
import { VotingKeyDto } from './VotingKeyDto';

/** Binary layout for a voting key link transaction. */
export class VotingKeyLinkTransactionBodyBuilder {
    /** Linked public key. */
    linkedPublicKey: VotingKeyDto;
    /** Start finalization point. */
    startPoint: FinalizationPointDto;
    /** End finalization point. */
    endPoint: FinalizationPointDto;
    /** Link action. */
    linkAction: LinkActionDto;

    /**
     * Constructor.
     *
     * @param linkedPublicKey Linked public key.
     * @param startPoint Start finalization point.
     * @param endPoint End finalization point.
     * @param linkAction Link action.
     */
    // tslint:disable-next-line: max-line-length
    public constructor(linkedPublicKey: VotingKeyDto,  startPoint: FinalizationPointDto,  endPoint: FinalizationPointDto,  linkAction: LinkActionDto) {
        this.linkedPublicKey = linkedPublicKey;
        this.startPoint = startPoint;
        this.endPoint = endPoint;
        this.linkAction = linkAction;
    }

    /**
     * Creates an instance of VotingKeyLinkTransactionBodyBuilder from binary payload.
     *
     * @param payload Byte payload to use to serialize the object.
     * @return Instance of VotingKeyLinkTransactionBodyBuilder.
     */
    public static loadFromBinary(payload: Uint8Array): VotingKeyLinkTransactionBodyBuilder {
        const byteArray = Array.from(payload);
        const linkedPublicKey = VotingKeyDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, linkedPublicKey.getSize());
        const startPoint = FinalizationPointDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, startPoint.getSize());
        const endPoint = FinalizationPointDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, endPoint.getSize());
        const linkAction = GeneratorUtils.bufferToUint(GeneratorUtils.getBytes(Uint8Array.from(byteArray), 1));
        byteArray.splice(0, 1);
        return new VotingKeyLinkTransactionBodyBuilder(linkedPublicKey, startPoint, endPoint, linkAction);
    }

    /**
     * Gets linked public key.
     *
     * @return Linked public key.
     */
    public getLinkedPublicKey(): VotingKeyDto {
        return this.linkedPublicKey;
    }

    /**
     * Gets start finalization point.
     *
     * @return Start finalization point.
     */
    public getStartPoint(): FinalizationPointDto {
        return this.startPoint;
    }

    /**
     * Gets end finalization point.
     *
     * @return End finalization point.
     */
    public getEndPoint(): FinalizationPointDto {
        return this.endPoint;
    }

    /**
     * Gets link action.
     *
     * @return Link action.
     */
    public getLinkAction(): LinkActionDto {
        return this.linkAction;
    }

    /**
     * Gets the size of the object.
     *
     * @return Size in bytes.
     */
    public getSize(): number {
        let size = 0;
        size += this.linkedPublicKey.getSize();
        size += this.startPoint.getSize();
        size += this.endPoint.getSize();
        size += 1; // linkAction
        return size;
    }

    /**
     * Serializes an object to bytes.
     *
     * @return Serialized bytes.
     */
    public serialize(): Uint8Array {
        let newArray = Uint8Array.from([]);
        const linkedPublicKeyBytes = this.linkedPublicKey.serialize();
        newArray = GeneratorUtils.concatTypedArrays(newArray, linkedPublicKeyBytes);
        const startPointBytes = this.startPoint.serialize();
        newArray = GeneratorUtils.concatTypedArrays(newArray, startPointBytes);
        const endPointBytes = this.endPoint.serialize();
        newArray = GeneratorUtils.concatTypedArrays(newArray, endPointBytes);
        const linkActionBytes = GeneratorUtils.uintToBuffer(this.linkAction, 1);
        newArray = GeneratorUtils.concatTypedArrays(newArray, linkActionBytes);
        return newArray;
    }
}
