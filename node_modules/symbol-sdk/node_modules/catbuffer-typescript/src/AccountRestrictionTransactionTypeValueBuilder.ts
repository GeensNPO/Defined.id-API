// tslint:disable: jsdoc-format
/**
*** Copyright (c) 2016-present,
*** Jaguar0625, gimre, BloodyRookie, Tech Bureau, Corp. All rights reserved.
***
*** This file is part of Catapult.
***
*** Catapult is free software: you can redistribute it and/or modify
*** it under the terms of the GNU Lesser General Public License as published by
*** the Free Software Foundation, either version 3 of the License, or
*** (at your option) any later version.
***
*** Catapult is distributed in the hope that it will be useful,
*** but WITHOUT ANY WARRANTY; without even the implied warranty of
*** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
*** GNU Lesser General Public License for more details.
***
*** You should have received a copy of the GNU Lesser General Public License
*** along with Catapult. If not, see <http://www.gnu.org/licenses/>.
**/

import { GeneratorUtils } from './GeneratorUtils';

/** Binary layout for transaction type based account restriction. */
export class AccountRestrictionTransactionTypeValueBuilder {
    /** Restriction values. */
    restrictionValues: number[];

    /**
     * Constructor.
     *
     * @param restrictionValues Restriction values.
     */
    public constructor(restrictionValues: number[]) {
        this.restrictionValues = restrictionValues;
    }

    /**
     * Creates an instance of AccountRestrictionTransactionTypeValueBuilder from binary payload.
     *
     * @param payload Byte payload to use to serialize the object.
     * @return Instance of AccountRestrictionTransactionTypeValueBuilder.
     */
    public static loadFromBinary(payload: Uint8Array): AccountRestrictionTransactionTypeValueBuilder {
        const byteArray = Array.from(payload);
        const restrictionValuesCount = GeneratorUtils.bufferToUint64(GeneratorUtils.getBytes(Uint8Array.from(byteArray), 8));
        byteArray.splice(0, 8);
        const restrictionValues: number[] = [];
        // tslint:disable-next-line: max-line-length
        for (let i = 0; i < (Array.isArray(restrictionValuesCount) ? GeneratorUtils.compact(restrictionValuesCount) : restrictionValuesCount); i++) {
            const item = GeneratorUtils.bufferToUint(GeneratorUtils.getBytes(Uint8Array.from(byteArray), 2));
            restrictionValues.push(item);
            byteArray.splice(0, 2);
        }
        return new AccountRestrictionTransactionTypeValueBuilder(restrictionValues);
    }

    /**
     * Gets restriction values.
     *
     * @return Restriction values.
     */
    public getRestrictionValues(): number[] {
        return this.restrictionValues;
    }

    /**
     * Gets the size of the object.
     *
     * @return Size in bytes.
     */
    public getSize(): number {
        let size = 0;
        size += 8; // restrictionValuesCount
        this.restrictionValues.forEach(() => size += 2);
        return size;
    }

    /**
     * Serializes an object to bytes.
     *
     * @return Serialized bytes.
     */
    public serialize(): Uint8Array {
        let newArray = Uint8Array.from([]);
        // tslint:disable-next-line: max-line-length
        const restrictionValuesCountBytes = GeneratorUtils.uint64ToBuffer(GeneratorUtils.fromUint(this.restrictionValues.length));
        newArray = GeneratorUtils.concatTypedArrays(newArray, restrictionValuesCountBytes);
        this.restrictionValues.forEach((item) => {
            const restrictionValuesBytes = GeneratorUtils.uintToBuffer(item, 2);
            newArray = GeneratorUtils.concatTypedArrays(newArray, restrictionValuesBytes);
        });
        return newArray;
    }
}
