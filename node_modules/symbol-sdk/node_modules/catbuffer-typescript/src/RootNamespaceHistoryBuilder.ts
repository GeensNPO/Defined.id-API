// tslint:disable: jsdoc-format
/**
*** Copyright (c) 2016-present,
*** Jaguar0625, gimre, BloodyRookie, Tech Bureau, Corp. All rights reserved.
***
*** This file is part of Catapult.
***
*** Catapult is free software: you can redistribute it and/or modify
*** it under the terms of the GNU Lesser General Public License as published by
*** the Free Software Foundation, either version 3 of the License, or
*** (at your option) any later version.
***
*** Catapult is distributed in the hope that it will be useful,
*** but WITHOUT ANY WARRANTY; without even the implied warranty of
*** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
*** GNU Lesser General Public License for more details.
***
*** You should have received a copy of the GNU Lesser General Public License
*** along with Catapult. If not, see <http://www.gnu.org/licenses/>.
**/

import { AddressDto } from './AddressDto';
import { GeneratorUtils } from './GeneratorUtils';
import { NamespaceAliasTypeDto } from './NamespaceAliasTypeDto';
import { NamespaceIdDto } from './NamespaceIdDto';
import { NamespaceLifetimeBuilder } from './NamespaceLifetimeBuilder';
import { NamespacePathBuilder } from './NamespacePathBuilder';

/** Binary layout for non-historical root namespace history. */
export class RootNamespaceHistoryBuilder {
    /** Id of the root namespace history. */
    id: NamespaceIdDto;
    /** Namespace owner address. */
    ownerAddress: AddressDto;
    /** Lifetime in blocks. */
    lifetime: NamespaceLifetimeBuilder;
    /** Root namespace alias. */
    rootAlias: NamespaceAliasTypeDto;
    /** Save child sub-namespace paths. */
    paths: NamespacePathBuilder[];

    /**
     * Constructor.
     *
     * @param id Id of the root namespace history.
     * @param ownerAddress Namespace owner address.
     * @param lifetime Lifetime in blocks.
     * @param rootAlias Root namespace alias.
     * @param paths Save child sub-namespace paths.
     */
    // tslint:disable-next-line: max-line-length
    public constructor(id: NamespaceIdDto,  ownerAddress: AddressDto,  lifetime: NamespaceLifetimeBuilder,  rootAlias: NamespaceAliasTypeDto,  paths: NamespacePathBuilder[]) {
        this.id = id;
        this.ownerAddress = ownerAddress;
        this.lifetime = lifetime;
        this.rootAlias = rootAlias;
        this.paths = paths;
    }

    /**
     * Creates an instance of RootNamespaceHistoryBuilder from binary payload.
     *
     * @param payload Byte payload to use to serialize the object.
     * @return Instance of RootNamespaceHistoryBuilder.
     */
    public static loadFromBinary(payload: Uint8Array): RootNamespaceHistoryBuilder {
        const byteArray = Array.from(payload);
        const id = NamespaceIdDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, id.getSize());
        const ownerAddress = AddressDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, ownerAddress.getSize());
        const lifetime = NamespaceLifetimeBuilder.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, lifetime.getSize());
        const rootAlias = GeneratorUtils.bufferToUint(GeneratorUtils.getBytes(Uint8Array.from(byteArray), 1));
        byteArray.splice(0, 1);
        const childrenCount = GeneratorUtils.bufferToUint64(GeneratorUtils.getBytes(Uint8Array.from(byteArray), 8));
        byteArray.splice(0, 8);
        const paths: NamespacePathBuilder[] = [];
        for (let i = 0; i < (Array.isArray(childrenCount) ? GeneratorUtils.compact(childrenCount) : childrenCount); i++) {
            const item = NamespacePathBuilder.loadFromBinary(Uint8Array.from(byteArray));
            paths.push(item);
            byteArray.splice(0, item.getSize());
        }
        return new RootNamespaceHistoryBuilder(id, ownerAddress, lifetime, rootAlias, paths);
    }

    /**
     * Gets id of the root namespace history.
     *
     * @return Id of the root namespace history.
     */
    public getId(): NamespaceIdDto {
        return this.id;
    }

    /**
     * Gets namespace owner address.
     *
     * @return Namespace owner address.
     */
    public getOwnerAddress(): AddressDto {
        return this.ownerAddress;
    }

    /**
     * Gets lifetime in blocks.
     *
     * @return Lifetime in blocks.
     */
    public getLifetime(): NamespaceLifetimeBuilder {
        return this.lifetime;
    }

    /**
     * Gets root namespace alias.
     *
     * @return Root namespace alias.
     */
    public getRootAlias(): NamespaceAliasTypeDto {
        return this.rootAlias;
    }

    /**
     * Gets save child sub-namespace paths.
     *
     * @return Save child sub-namespace paths.
     */
    public getPaths(): NamespacePathBuilder[] {
        return this.paths;
    }

    /**
     * Gets the size of the object.
     *
     * @return Size in bytes.
     */
    public getSize(): number {
        let size = 0;
        size += this.id.getSize();
        size += this.ownerAddress.getSize();
        size += this.lifetime.getSize();
        size += 1; // rootAlias
        size += 8; // childrenCount
        this.paths.forEach((o) => size += o.getSize());
        return size;
    }

    /**
     * Serializes an object to bytes.
     *
     * @return Serialized bytes.
     */
    public serialize(): Uint8Array {
        let newArray = Uint8Array.from([]);
        const idBytes = this.id.serialize();
        newArray = GeneratorUtils.concatTypedArrays(newArray, idBytes);
        const ownerAddressBytes = this.ownerAddress.serialize();
        newArray = GeneratorUtils.concatTypedArrays(newArray, ownerAddressBytes);
        const lifetimeBytes = this.lifetime.serialize();
        newArray = GeneratorUtils.concatTypedArrays(newArray, lifetimeBytes);
        const rootAliasBytes = GeneratorUtils.uintToBuffer(this.rootAlias, 1);
        newArray = GeneratorUtils.concatTypedArrays(newArray, rootAliasBytes);
        const childrenCountBytes = GeneratorUtils.uint64ToBuffer(GeneratorUtils.fromUint(this.paths.length));
        newArray = GeneratorUtils.concatTypedArrays(newArray, childrenCountBytes);
        this.paths.forEach((item) => {
            const pathsBytes = item.serialize();
            newArray = GeneratorUtils.concatTypedArrays(newArray, pathsBytes);
        });
        return newArray;
    }
}
