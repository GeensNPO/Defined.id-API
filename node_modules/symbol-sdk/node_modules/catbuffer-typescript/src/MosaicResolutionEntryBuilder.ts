// tslint:disable: jsdoc-format
/**
*** Copyright (c) 2016-present,
*** Jaguar0625, gimre, BloodyRookie, Tech Bureau, Corp. All rights reserved.
***
*** This file is part of Catapult.
***
*** Catapult is free software: you can redistribute it and/or modify
*** it under the terms of the GNU Lesser General Public License as published by
*** the Free Software Foundation, either version 3 of the License, or
*** (at your option) any later version.
***
*** Catapult is distributed in the hope that it will be useful,
*** but WITHOUT ANY WARRANTY; without even the implied warranty of
*** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
*** GNU Lesser General Public License for more details.
***
*** You should have received a copy of the GNU Lesser General Public License
*** along with Catapult. If not, see <http://www.gnu.org/licenses/>.
**/

import { GeneratorUtils } from './GeneratorUtils';
import { MosaicIdDto } from './MosaicIdDto';
import { ReceiptSourceBuilder } from './ReceiptSourceBuilder';

/** Binary layout for mosaic resolution entry. */
export class MosaicResolutionEntryBuilder {
    /** Source of resolution within block. */
    source: ReceiptSourceBuilder;
    /** Resolved value. */
    resolved: MosaicIdDto;

    /**
     * Constructor.
     *
     * @param source Source of resolution within block.
     * @param resolved Resolved value.
     */
    public constructor(source: ReceiptSourceBuilder,  resolved: MosaicIdDto) {
        this.source = source;
        this.resolved = resolved;
    }

    /**
     * Creates an instance of MosaicResolutionEntryBuilder from binary payload.
     *
     * @param payload Byte payload to use to serialize the object.
     * @return Instance of MosaicResolutionEntryBuilder.
     */
    public static loadFromBinary(payload: Uint8Array): MosaicResolutionEntryBuilder {
        const byteArray = Array.from(payload);
        const source = ReceiptSourceBuilder.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, source.getSize());
        const resolved = MosaicIdDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, resolved.getSize());
        return new MosaicResolutionEntryBuilder(source, resolved);
    }

    /**
     * Gets source of resolution within block.
     *
     * @return Source of resolution within block.
     */
    public getSource(): ReceiptSourceBuilder {
        return this.source;
    }

    /**
     * Gets resolved value.
     *
     * @return Resolved value.
     */
    public getResolved(): MosaicIdDto {
        return this.resolved;
    }

    /**
     * Gets the size of the object.
     *
     * @return Size in bytes.
     */
    public getSize(): number {
        let size = 0;
        size += this.source.getSize();
        size += this.resolved.getSize();
        return size;
    }

    /**
     * Serializes an object to bytes.
     *
     * @return Serialized bytes.
     */
    public serialize(): Uint8Array {
        let newArray = Uint8Array.from([]);
        const sourceBytes = this.source.serialize();
        newArray = GeneratorUtils.concatTypedArrays(newArray, sourceBytes);
        const resolvedBytes = this.resolved.serialize();
        newArray = GeneratorUtils.concatTypedArrays(newArray, resolvedBytes);
        return newArray;
    }
}
