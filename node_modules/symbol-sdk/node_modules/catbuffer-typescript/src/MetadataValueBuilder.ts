// tslint:disable: jsdoc-format
/**
*** Copyright (c) 2016-present,
*** Jaguar0625, gimre, BloodyRookie, Tech Bureau, Corp. All rights reserved.
***
*** This file is part of Catapult.
***
*** Catapult is free software: you can redistribute it and/or modify
*** it under the terms of the GNU Lesser General Public License as published by
*** the Free Software Foundation, either version 3 of the License, or
*** (at your option) any later version.
***
*** Catapult is distributed in the hope that it will be useful,
*** but WITHOUT ANY WARRANTY; without even the implied warranty of
*** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
*** GNU Lesser General Public License for more details.
***
*** You should have received a copy of the GNU Lesser General Public License
*** along with Catapult. If not, see <http://www.gnu.org/licenses/>.
**/

import { GeneratorUtils } from './GeneratorUtils';

/** Binary layout of a metadata entry value. */
export class MetadataValueBuilder {
    /** Size of the value. */
    size = 0;
    /** Data of the value. */
    data: Uint8Array;

    /**
     * Constructor.
     *
     * @param data Data of the value.
     */
    public constructor(data: Uint8Array) {
        this.data = data;
    }

    /**
     * Creates an instance of MetadataValueBuilder from binary payload.
     *
     * @param payload Byte payload to use to serialize the object.
     * @return Instance of MetadataValueBuilder.
     */
    public static loadFromBinary(payload: Uint8Array): MetadataValueBuilder {
        const byteArray = Array.from(payload);
        const size = GeneratorUtils.bufferToUint(GeneratorUtils.getBytes(Uint8Array.from(byteArray), 2));
        byteArray.splice(0, 2);
        const data = GeneratorUtils.getBytes(Uint8Array.from(byteArray), size);
        byteArray.splice(0, size);
        return new MetadataValueBuilder(data);
    }

    /**
     * Gets data of the value.
     *
     * @return Data of the value.
     */
    public getData(): Uint8Array {
        return this.data;
    }

    /**
     * Gets the size of the object.
     *
     * @return Size in bytes.
     */
    public getSize(): number {
        let size = 0;
        size += 2; // size
        size += this.data.length;
        return size;
    }

    /**
     * Serializes an object to bytes.
     *
     * @return Serialized bytes.
     */
    public serialize(): Uint8Array {
        let newArray = Uint8Array.from([]);
        const sizeBytes = GeneratorUtils.uintToBuffer(this.getSize(), 2);
        newArray = GeneratorUtils.concatTypedArrays(newArray, sizeBytes);
        newArray = GeneratorUtils.concatTypedArrays(newArray, this.data);
        return newArray;
    }
}
