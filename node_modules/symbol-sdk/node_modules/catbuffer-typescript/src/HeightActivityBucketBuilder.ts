// tslint:disable: jsdoc-format
/**
*** Copyright (c) 2016-present,
*** Jaguar0625, gimre, BloodyRookie, Tech Bureau, Corp. All rights reserved.
***
*** This file is part of Catapult.
***
*** Catapult is free software: you can redistribute it and/or modify
*** it under the terms of the GNU Lesser General Public License as published by
*** the Free Software Foundation, either version 3 of the License, or
*** (at your option) any later version.
***
*** Catapult is distributed in the hope that it will be useful,
*** but WITHOUT ANY WARRANTY; without even the implied warranty of
*** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
*** GNU Lesser General Public License for more details.
***
*** You should have received a copy of the GNU Lesser General Public License
*** along with Catapult. If not, see <http://www.gnu.org/licenses/>.
**/

import { AmountDto } from './AmountDto';
import { GeneratorUtils } from './GeneratorUtils';
import { ImportanceHeightDto } from './ImportanceHeightDto';

/** Account activity bucket. */
export class HeightActivityBucketBuilder {
    /** Activity start height. */
    startHeight: ImportanceHeightDto;
    /** Total fees paid by account. */
    totalFeesPaid: AmountDto;
    /** Number of times account has been used as a beneficiary. */
    beneficiaryCount: number;
    /** Raw importance score. */
    rawScore: number[];

    /**
     * Constructor.
     *
     * @param startHeight Activity start height.
     * @param totalFeesPaid Total fees paid by account.
     * @param beneficiaryCount Number of times account has been used as a beneficiary.
     * @param rawScore Raw importance score.
     */
    // tslint:disable-next-line: max-line-length
    public constructor(startHeight: ImportanceHeightDto,  totalFeesPaid: AmountDto,  beneficiaryCount: number,  rawScore: number[]) {
        this.startHeight = startHeight;
        this.totalFeesPaid = totalFeesPaid;
        this.beneficiaryCount = beneficiaryCount;
        this.rawScore = rawScore;
    }

    /**
     * Creates an instance of HeightActivityBucketBuilder from binary payload.
     *
     * @param payload Byte payload to use to serialize the object.
     * @return Instance of HeightActivityBucketBuilder.
     */
    public static loadFromBinary(payload: Uint8Array): HeightActivityBucketBuilder {
        const byteArray = Array.from(payload);
        const startHeight = ImportanceHeightDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, startHeight.getSize());
        const totalFeesPaid = AmountDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, totalFeesPaid.getSize());
        const beneficiaryCount = GeneratorUtils.bufferToUint(GeneratorUtils.getBytes(Uint8Array.from(byteArray), 4));
        byteArray.splice(0, 4);
        const rawScore = GeneratorUtils.bufferToUint64(GeneratorUtils.getBytes(Uint8Array.from(byteArray), 8));
        byteArray.splice(0, 8);
        return new HeightActivityBucketBuilder(startHeight, totalFeesPaid, beneficiaryCount, rawScore);
    }

    /**
     * Gets activity start height.
     *
     * @return Activity start height.
     */
    public getStartHeight(): ImportanceHeightDto {
        return this.startHeight;
    }

    /**
     * Gets total fees paid by account.
     *
     * @return Total fees paid by account.
     */
    public getTotalFeesPaid(): AmountDto {
        return this.totalFeesPaid;
    }

    /**
     * Gets number of times account has been used as a beneficiary.
     *
     * @return Number of times account has been used as a beneficiary.
     */
    public getBeneficiaryCount(): number {
        return this.beneficiaryCount;
    }

    /**
     * Gets raw importance score.
     *
     * @return Raw importance score.
     */
    public getRawScore(): number[] {
        return this.rawScore;
    }

    /**
     * Gets the size of the object.
     *
     * @return Size in bytes.
     */
    public getSize(): number {
        let size = 0;
        size += this.startHeight.getSize();
        size += this.totalFeesPaid.getSize();
        size += 4; // beneficiaryCount
        size += 8; // rawScore
        return size;
    }

    /**
     * Serializes an object to bytes.
     *
     * @return Serialized bytes.
     */
    public serialize(): Uint8Array {
        let newArray = Uint8Array.from([]);
        const startHeightBytes = this.startHeight.serialize();
        newArray = GeneratorUtils.concatTypedArrays(newArray, startHeightBytes);
        const totalFeesPaidBytes = this.totalFeesPaid.serialize();
        newArray = GeneratorUtils.concatTypedArrays(newArray, totalFeesPaidBytes);
        const beneficiaryCountBytes = GeneratorUtils.uintToBuffer(this.getBeneficiaryCount(), 4);
        newArray = GeneratorUtils.concatTypedArrays(newArray, beneficiaryCountBytes);
        const rawScoreBytes = GeneratorUtils.uint64ToBuffer(this.getRawScore());
        newArray = GeneratorUtils.concatTypedArrays(newArray, rawScoreBytes);
        return newArray;
    }
}
