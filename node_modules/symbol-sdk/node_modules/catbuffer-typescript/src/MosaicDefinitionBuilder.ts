// tslint:disable: jsdoc-format
/**
*** Copyright (c) 2016-present,
*** Jaguar0625, gimre, BloodyRookie, Tech Bureau, Corp. All rights reserved.
***
*** This file is part of Catapult.
***
*** Catapult is free software: you can redistribute it and/or modify
*** it under the terms of the GNU Lesser General Public License as published by
*** the Free Software Foundation, either version 3 of the License, or
*** (at your option) any later version.
***
*** Catapult is distributed in the hope that it will be useful,
*** but WITHOUT ANY WARRANTY; without even the implied warranty of
*** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
*** GNU Lesser General Public License for more details.
***
*** You should have received a copy of the GNU Lesser General Public License
*** along with Catapult. If not, see <http://www.gnu.org/licenses/>.
**/

import { AddressDto } from './AddressDto';
import { GeneratorUtils } from './GeneratorUtils';
import { HeightDto } from './HeightDto';
import { MosaicPropertiesBuilder } from './MosaicPropertiesBuilder';

/** Binary layout for mosaic definition. */
export class MosaicDefinitionBuilder {
    /** Block height. */
    startHeight: HeightDto;
    /** Mosaic owner. */
    ownerAddress: AddressDto;
    /** Revision. */
    revision: number;
    /** Properties. */
    properties: MosaicPropertiesBuilder;

    /**
     * Constructor.
     *
     * @param startHeight Block height.
     * @param ownerAddress Mosaic owner.
     * @param revision Revision.
     * @param properties Properties.
     */
    // tslint:disable-next-line: max-line-length
    public constructor(startHeight: HeightDto,  ownerAddress: AddressDto,  revision: number,  properties: MosaicPropertiesBuilder) {
        this.startHeight = startHeight;
        this.ownerAddress = ownerAddress;
        this.revision = revision;
        this.properties = properties;
    }

    /**
     * Creates an instance of MosaicDefinitionBuilder from binary payload.
     *
     * @param payload Byte payload to use to serialize the object.
     * @return Instance of MosaicDefinitionBuilder.
     */
    public static loadFromBinary(payload: Uint8Array): MosaicDefinitionBuilder {
        const byteArray = Array.from(payload);
        const startHeight = HeightDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, startHeight.getSize());
        const ownerAddress = AddressDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, ownerAddress.getSize());
        const revision = GeneratorUtils.bufferToUint(GeneratorUtils.getBytes(Uint8Array.from(byteArray), 4));
        byteArray.splice(0, 4);
        const properties = MosaicPropertiesBuilder.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, properties.getSize());
        return new MosaicDefinitionBuilder(startHeight, ownerAddress, revision, properties);
    }

    /**
     * Gets block height.
     *
     * @return Block height.
     */
    public getStartHeight(): HeightDto {
        return this.startHeight;
    }

    /**
     * Gets mosaic owner.
     *
     * @return Mosaic owner.
     */
    public getOwnerAddress(): AddressDto {
        return this.ownerAddress;
    }

    /**
     * Gets revision.
     *
     * @return Revision.
     */
    public getRevision(): number {
        return this.revision;
    }

    /**
     * Gets properties.
     *
     * @return Properties.
     */
    public getProperties(): MosaicPropertiesBuilder {
        return this.properties;
    }

    /**
     * Gets the size of the object.
     *
     * @return Size in bytes.
     */
    public getSize(): number {
        let size = 0;
        size += this.startHeight.getSize();
        size += this.ownerAddress.getSize();
        size += 4; // revision
        size += this.properties.getSize();
        return size;
    }

    /**
     * Serializes an object to bytes.
     *
     * @return Serialized bytes.
     */
    public serialize(): Uint8Array {
        let newArray = Uint8Array.from([]);
        const startHeightBytes = this.startHeight.serialize();
        newArray = GeneratorUtils.concatTypedArrays(newArray, startHeightBytes);
        const ownerAddressBytes = this.ownerAddress.serialize();
        newArray = GeneratorUtils.concatTypedArrays(newArray, ownerAddressBytes);
        const revisionBytes = GeneratorUtils.uintToBuffer(this.getRevision(), 4);
        newArray = GeneratorUtils.concatTypedArrays(newArray, revisionBytes);
        const propertiesBytes = this.properties.serialize();
        newArray = GeneratorUtils.concatTypedArrays(newArray, propertiesBytes);
        return newArray;
    }
}
