// tslint:disable: jsdoc-format
/**
*** Copyright (c) 2016-present,
*** Jaguar0625, gimre, BloodyRookie, Tech Bureau, Corp. All rights reserved.
***
*** This file is part of Catapult.
***
*** Catapult is free software: you can redistribute it and/or modify
*** it under the terms of the GNU Lesser General Public License as published by
*** the Free Software Foundation, either version 3 of the License, or
*** (at your option) any later version.
***
*** Catapult is distributed in the hope that it will be useful,
*** but WITHOUT ANY WARRANTY; without even the implied warranty of
*** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
*** GNU Lesser General Public License for more details.
***
*** You should have received a copy of the GNU Lesser General Public License
*** along with Catapult. If not, see <http://www.gnu.org/licenses/>.
**/

import { AddressKeyValueBuilder } from './AddressKeyValueBuilder';
import { GeneratorUtils } from './GeneratorUtils';

/** Binary layout for mosaic address restriction key-value set. */
export class AddressKeyValueSetBuilder {
    /** Key value array. */
    keys: AddressKeyValueBuilder[];

    /**
     * Constructor.
     *
     * @param keys Key value array.
     */
    public constructor(keys: AddressKeyValueBuilder[]) {
        this.keys = keys;
    }

    /**
     * Creates an instance of AddressKeyValueSetBuilder from binary payload.
     *
     * @param payload Byte payload to use to serialize the object.
     * @return Instance of AddressKeyValueSetBuilder.
     */
    public static loadFromBinary(payload: Uint8Array): AddressKeyValueSetBuilder {
        const byteArray = Array.from(payload);
        const keyValueCount = GeneratorUtils.bufferToUint(GeneratorUtils.getBytes(Uint8Array.from(byteArray), 1));
        byteArray.splice(0, 1);
        const keys: AddressKeyValueBuilder[] = [];
        for (let i = 0; i < (Array.isArray(keyValueCount) ? GeneratorUtils.compact(keyValueCount) : keyValueCount); i++) {
            const item = AddressKeyValueBuilder.loadFromBinary(Uint8Array.from(byteArray));
            keys.push(item);
            byteArray.splice(0, item.getSize());
        }
        return new AddressKeyValueSetBuilder(keys);
    }

    /**
     * Gets key value array.
     *
     * @return Key value array.
     */
    public getKeys(): AddressKeyValueBuilder[] {
        return this.keys;
    }

    /**
     * Gets the size of the object.
     *
     * @return Size in bytes.
     */
    public getSize(): number {
        let size = 0;
        size += 1; // keyValueCount
        this.keys.forEach((o) => size += o.getSize());
        return size;
    }

    /**
     * Serializes an object to bytes.
     *
     * @return Serialized bytes.
     */
    public serialize(): Uint8Array {
        let newArray = Uint8Array.from([]);
        const keyValueCountBytes = GeneratorUtils.uintToBuffer(this.keys.length, 1);
        newArray = GeneratorUtils.concatTypedArrays(newArray, keyValueCountBytes);
        this.keys.forEach((item) => {
            const keysBytes = item.serialize();
            newArray = GeneratorUtils.concatTypedArrays(newArray, keysBytes);
        });
        return newArray;
    }
}
