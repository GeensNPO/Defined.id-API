// tslint:disable: jsdoc-format
/**
*** Copyright (c) 2016-present,
*** Jaguar0625, gimre, BloodyRookie, Tech Bureau, Corp. All rights reserved.
***
*** This file is part of Catapult.
***
*** Catapult is free software: you can redistribute it and/or modify
*** it under the terms of the GNU Lesser General Public License as published by
*** the Free Software Foundation, either version 3 of the License, or
*** (at your option) any later version.
***
*** Catapult is distributed in the hope that it will be useful,
*** but WITHOUT ANY WARRANTY; without even the implied warranty of
*** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
*** GNU Lesser General Public License for more details.
***
*** You should have received a copy of the GNU Lesser General Public License
*** along with Catapult. If not, see <http://www.gnu.org/licenses/>.
**/

import { AccountAddressRestrictionTransactionBuilder } from './AccountAddressRestrictionTransactionBuilder';
import { AccountKeyLinkTransactionBuilder } from './AccountKeyLinkTransactionBuilder';
import { AccountMetadataTransactionBuilder } from './AccountMetadataTransactionBuilder';
import { AccountMosaicRestrictionTransactionBuilder } from './AccountMosaicRestrictionTransactionBuilder';
import { AccountOperationRestrictionTransactionBuilder } from './AccountOperationRestrictionTransactionBuilder';
import { AddressAliasTransactionBuilder } from './AddressAliasTransactionBuilder';
import { AggregateBondedTransactionBuilder } from './AggregateBondedTransactionBuilder';
import { AggregateCompleteTransactionBuilder } from './AggregateCompleteTransactionBuilder';
import { EntityTypeDto } from './EntityTypeDto';
import { GeneratorUtils } from './GeneratorUtils';
import { HashLockTransactionBuilder } from './HashLockTransactionBuilder';
import { MosaicAddressRestrictionTransactionBuilder } from './MosaicAddressRestrictionTransactionBuilder';
import { MosaicAliasTransactionBuilder } from './MosaicAliasTransactionBuilder';
import { MosaicDefinitionTransactionBuilder } from './MosaicDefinitionTransactionBuilder';
import { MosaicGlobalRestrictionTransactionBuilder } from './MosaicGlobalRestrictionTransactionBuilder';
import { MosaicMetadataTransactionBuilder } from './MosaicMetadataTransactionBuilder';
import { MosaicSupplyChangeTransactionBuilder } from './MosaicSupplyChangeTransactionBuilder';
import { MultisigAccountModificationTransactionBuilder } from './MultisigAccountModificationTransactionBuilder';
import { NamespaceMetadataTransactionBuilder } from './NamespaceMetadataTransactionBuilder';
import { NamespaceRegistrationTransactionBuilder } from './NamespaceRegistrationTransactionBuilder';
import { NodeKeyLinkTransactionBuilder } from './NodeKeyLinkTransactionBuilder';
import { SecretLockTransactionBuilder } from './SecretLockTransactionBuilder';
import { SecretProofTransactionBuilder } from './SecretProofTransactionBuilder';
import { TransactionBuilder } from './TransactionBuilder';
import { TransferTransactionBuilder } from './TransferTransactionBuilder';
import { VotingKeyLinkTransactionBuilder } from './VotingKeyLinkTransactionBuilder';
import { VrfKeyLinkTransactionBuilder } from './VrfKeyLinkTransactionBuilder';

/** Helper class for embedded transaction serialization */
export class TransactionHelper {

    /** Deserialize an transaction from binary */
    public static loadFromBinary(bytes: Uint8Array): TransactionBuilder {
        const header = TransactionBuilder.loadFromBinary(bytes);
        switch (header.getType()) {
            case EntityTypeDto.MOSAIC_DEFINITION_TRANSACTION_BUILDER:
                return MosaicDefinitionTransactionBuilder.loadFromBinary(bytes);
            case EntityTypeDto.ACCOUNT_KEY_LINK_TRANSACTION_BUILDER:
                return AccountKeyLinkTransactionBuilder.loadFromBinary(bytes);
            case EntityTypeDto.NODE_KEY_LINK_TRANSACTION_BUILDER:
                return NodeKeyLinkTransactionBuilder.loadFromBinary(bytes);
            case EntityTypeDto.AGGREGATE_COMPLETE_TRANSACTION_BUILDER:
                return AggregateCompleteTransactionBuilder.loadFromBinary(bytes);
            case EntityTypeDto.AGGREGATE_BONDED_TRANSACTION_BUILDER:
                return AggregateBondedTransactionBuilder.loadFromBinary(bytes);
            case EntityTypeDto.VOTING_KEY_LINK_TRANSACTION_BUILDER:
                return VotingKeyLinkTransactionBuilder.loadFromBinary(bytes);
            case EntityTypeDto.VRF_KEY_LINK_TRANSACTION_BUILDER:
                return VrfKeyLinkTransactionBuilder.loadFromBinary(bytes);
            case EntityTypeDto.HASH_LOCK_TRANSACTION_BUILDER:
                return HashLockTransactionBuilder.loadFromBinary(bytes);
            case EntityTypeDto.SECRET_LOCK_TRANSACTION_BUILDER:
                return SecretLockTransactionBuilder.loadFromBinary(bytes);
            case EntityTypeDto.SECRET_PROOF_TRANSACTION_BUILDER:
                return SecretProofTransactionBuilder.loadFromBinary(bytes);
            case EntityTypeDto.ACCOUNT_METADATA_TRANSACTION_BUILDER:
                return AccountMetadataTransactionBuilder.loadFromBinary(bytes);
            case EntityTypeDto.MOSAIC_METADATA_TRANSACTION_BUILDER:
                return MosaicMetadataTransactionBuilder.loadFromBinary(bytes);
            case EntityTypeDto.NAMESPACE_METADATA_TRANSACTION_BUILDER:
                return NamespaceMetadataTransactionBuilder.loadFromBinary(bytes);
            case EntityTypeDto.MOSAIC_SUPPLY_CHANGE_TRANSACTION_BUILDER:
                return MosaicSupplyChangeTransactionBuilder.loadFromBinary(bytes);
            case EntityTypeDto.MULTISIG_ACCOUNT_MODIFICATION_TRANSACTION_BUILDER:
                return MultisigAccountModificationTransactionBuilder.loadFromBinary(bytes);
            case EntityTypeDto.ADDRESS_ALIAS_TRANSACTION_BUILDER:
                return AddressAliasTransactionBuilder.loadFromBinary(bytes);
            case EntityTypeDto.MOSAIC_ALIAS_TRANSACTION_BUILDER:
                return MosaicAliasTransactionBuilder.loadFromBinary(bytes);
            case EntityTypeDto.NAMESPACE_REGISTRATION_TRANSACTION_BUILDER:
                return NamespaceRegistrationTransactionBuilder.loadFromBinary(bytes);
            case EntityTypeDto.ACCOUNT_ADDRESS_RESTRICTION_TRANSACTION_BUILDER:
                return AccountAddressRestrictionTransactionBuilder.loadFromBinary(bytes);
            case EntityTypeDto.ACCOUNT_MOSAIC_RESTRICTION_TRANSACTION_BUILDER:
                return AccountMosaicRestrictionTransactionBuilder.loadFromBinary(bytes);
            case EntityTypeDto.ACCOUNT_OPERATION_RESTRICTION_TRANSACTION_BUILDER:
                return AccountOperationRestrictionTransactionBuilder.loadFromBinary(bytes);
            case EntityTypeDto.MOSAIC_ADDRESS_RESTRICTION_TRANSACTION_BUILDER:
                return MosaicAddressRestrictionTransactionBuilder.loadFromBinary(bytes);
            case EntityTypeDto.MOSAIC_GLOBAL_RESTRICTION_TRANSACTION_BUILDER:
                return MosaicGlobalRestrictionTransactionBuilder.loadFromBinary(bytes);
            case EntityTypeDto.TRANSFER_TRANSACTION_BUILDER:
                return TransferTransactionBuilder.loadFromBinary(bytes);
            default:
                throw new Error(`Transaction type: ${header.getType()} not recognized.`);
        }
    }

}
