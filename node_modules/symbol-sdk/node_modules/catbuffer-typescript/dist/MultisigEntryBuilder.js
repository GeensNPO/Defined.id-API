"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultisigEntryBuilder = void 0;
const AddressDto_1 = require("./AddressDto");
const GeneratorUtils_1 = require("./GeneratorUtils");
class MultisigEntryBuilder {
    constructor(minApproval, minRemoval, accountAddress, cosignatoryAddresses, multisigAddresses) {
        this.minApproval = minApproval;
        this.minRemoval = minRemoval;
        this.accountAddress = accountAddress;
        this.cosignatoryAddresses = cosignatoryAddresses;
        this.multisigAddresses = multisigAddresses;
    }
    static loadFromBinary(payload) {
        const byteArray = Array.from(payload);
        const minApproval = GeneratorUtils_1.GeneratorUtils.bufferToUint(GeneratorUtils_1.GeneratorUtils.getBytes(Uint8Array.from(byteArray), 4));
        byteArray.splice(0, 4);
        const minRemoval = GeneratorUtils_1.GeneratorUtils.bufferToUint(GeneratorUtils_1.GeneratorUtils.getBytes(Uint8Array.from(byteArray), 4));
        byteArray.splice(0, 4);
        const accountAddress = AddressDto_1.AddressDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, accountAddress.getSize());
        const cosignatoryAddressesCount = GeneratorUtils_1.GeneratorUtils.bufferToUint64(GeneratorUtils_1.GeneratorUtils.getBytes(Uint8Array.from(byteArray), 8));
        byteArray.splice(0, 8);
        const cosignatoryAddresses = [];
        for (let i = 0; i < (Array.isArray(cosignatoryAddressesCount) ? GeneratorUtils_1.GeneratorUtils.compact(cosignatoryAddressesCount) : cosignatoryAddressesCount); i++) {
            const item = AddressDto_1.AddressDto.loadFromBinary(Uint8Array.from(byteArray));
            cosignatoryAddresses.push(item);
            byteArray.splice(0, item.getSize());
        }
        const multisigAddressesCount = GeneratorUtils_1.GeneratorUtils.bufferToUint64(GeneratorUtils_1.GeneratorUtils.getBytes(Uint8Array.from(byteArray), 8));
        byteArray.splice(0, 8);
        const multisigAddresses = [];
        for (let i = 0; i < (Array.isArray(multisigAddressesCount) ? GeneratorUtils_1.GeneratorUtils.compact(multisigAddressesCount) : multisigAddressesCount); i++) {
            const item = AddressDto_1.AddressDto.loadFromBinary(Uint8Array.from(byteArray));
            multisigAddresses.push(item);
            byteArray.splice(0, item.getSize());
        }
        return new MultisigEntryBuilder(minApproval, minRemoval, accountAddress, cosignatoryAddresses, multisigAddresses);
    }
    getMinApproval() {
        return this.minApproval;
    }
    getMinRemoval() {
        return this.minRemoval;
    }
    getAccountAddress() {
        return this.accountAddress;
    }
    getCosignatoryAddresses() {
        return this.cosignatoryAddresses;
    }
    getMultisigAddresses() {
        return this.multisigAddresses;
    }
    getSize() {
        let size = 0;
        size += 4;
        size += 4;
        size += this.accountAddress.getSize();
        size += 8;
        this.cosignatoryAddresses.forEach((o) => size += o.getSize());
        size += 8;
        this.multisigAddresses.forEach((o) => size += o.getSize());
        return size;
    }
    serialize() {
        let newArray = Uint8Array.from([]);
        const minApprovalBytes = GeneratorUtils_1.GeneratorUtils.uintToBuffer(this.getMinApproval(), 4);
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, minApprovalBytes);
        const minRemovalBytes = GeneratorUtils_1.GeneratorUtils.uintToBuffer(this.getMinRemoval(), 4);
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, minRemovalBytes);
        const accountAddressBytes = this.accountAddress.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, accountAddressBytes);
        const cosignatoryAddressesCountBytes = GeneratorUtils_1.GeneratorUtils.uint64ToBuffer(GeneratorUtils_1.GeneratorUtils.fromUint(this.cosignatoryAddresses.length));
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, cosignatoryAddressesCountBytes);
        this.cosignatoryAddresses.forEach((item) => {
            const cosignatoryAddressesBytes = item.serialize();
            newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, cosignatoryAddressesBytes);
        });
        const multisigAddressesCountBytes = GeneratorUtils_1.GeneratorUtils.uint64ToBuffer(GeneratorUtils_1.GeneratorUtils.fromUint(this.multisigAddresses.length));
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, multisigAddressesCountBytes);
        this.multisigAddresses.forEach((item) => {
            const multisigAddressesBytes = item.serialize();
            newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, multisigAddressesBytes);
        });
        return newArray;
    }
}
exports.MultisigEntryBuilder = MultisigEntryBuilder;
//# sourceMappingURL=MultisigEntryBuilder.js.map