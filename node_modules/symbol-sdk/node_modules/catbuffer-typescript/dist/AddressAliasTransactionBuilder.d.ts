import { AddressAliasTransactionBodyBuilder } from './AddressAliasTransactionBodyBuilder';
import { AddressDto } from './AddressDto';
import { AliasActionDto } from './AliasActionDto';
import { AmountDto } from './AmountDto';
import { EntityTypeDto } from './EntityTypeDto';
import { KeyDto } from './KeyDto';
import { NamespaceIdDto } from './NamespaceIdDto';
import { NetworkTypeDto } from './NetworkTypeDto';
import { SignatureDto } from './SignatureDto';
import { TimestampDto } from './TimestampDto';
import { TransactionBuilder } from './TransactionBuilder';
export declare class AddressAliasTransactionBuilder extends TransactionBuilder {
    addressAliasTransactionBody: AddressAliasTransactionBodyBuilder;
    constructor(signature: SignatureDto, signerPublicKey: KeyDto, version: number, network: NetworkTypeDto, type: EntityTypeDto, fee: AmountDto, deadline: TimestampDto, namespaceId: NamespaceIdDto, address: AddressDto, aliasAction: AliasActionDto);
    static loadFromBinary(payload: Uint8Array): AddressAliasTransactionBuilder;
    getNamespaceId(): NamespaceIdDto;
    getAddress(): AddressDto;
    getAliasAction(): AliasActionDto;
    getSize(): number;
    serialize(): Uint8Array;
}
