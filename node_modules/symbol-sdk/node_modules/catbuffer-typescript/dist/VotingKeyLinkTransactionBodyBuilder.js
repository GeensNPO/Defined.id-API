"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VotingKeyLinkTransactionBodyBuilder = void 0;
const FinalizationPointDto_1 = require("./FinalizationPointDto");
const GeneratorUtils_1 = require("./GeneratorUtils");
const VotingKeyDto_1 = require("./VotingKeyDto");
class VotingKeyLinkTransactionBodyBuilder {
    constructor(linkedPublicKey, startPoint, endPoint, linkAction) {
        this.linkedPublicKey = linkedPublicKey;
        this.startPoint = startPoint;
        this.endPoint = endPoint;
        this.linkAction = linkAction;
    }
    static loadFromBinary(payload) {
        const byteArray = Array.from(payload);
        const linkedPublicKey = VotingKeyDto_1.VotingKeyDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, linkedPublicKey.getSize());
        const startPoint = FinalizationPointDto_1.FinalizationPointDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, startPoint.getSize());
        const endPoint = FinalizationPointDto_1.FinalizationPointDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, endPoint.getSize());
        const linkAction = GeneratorUtils_1.GeneratorUtils.bufferToUint(GeneratorUtils_1.GeneratorUtils.getBytes(Uint8Array.from(byteArray), 1));
        byteArray.splice(0, 1);
        return new VotingKeyLinkTransactionBodyBuilder(linkedPublicKey, startPoint, endPoint, linkAction);
    }
    getLinkedPublicKey() {
        return this.linkedPublicKey;
    }
    getStartPoint() {
        return this.startPoint;
    }
    getEndPoint() {
        return this.endPoint;
    }
    getLinkAction() {
        return this.linkAction;
    }
    getSize() {
        let size = 0;
        size += this.linkedPublicKey.getSize();
        size += this.startPoint.getSize();
        size += this.endPoint.getSize();
        size += 1;
        return size;
    }
    serialize() {
        let newArray = Uint8Array.from([]);
        const linkedPublicKeyBytes = this.linkedPublicKey.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, linkedPublicKeyBytes);
        const startPointBytes = this.startPoint.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, startPointBytes);
        const endPointBytes = this.endPoint.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, endPointBytes);
        const linkActionBytes = GeneratorUtils_1.GeneratorUtils.uintToBuffer(this.linkAction, 1);
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, linkActionBytes);
        return newArray;
    }
}
exports.VotingKeyLinkTransactionBodyBuilder = VotingKeyLinkTransactionBodyBuilder;
//# sourceMappingURL=VotingKeyLinkTransactionBodyBuilder.js.map