"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AggregateTransactionBodyBuilder = void 0;
const CosignatureBuilder_1 = require("./CosignatureBuilder");
const EmbeddedTransactionHelper_1 = require("./EmbeddedTransactionHelper");
const GeneratorUtils_1 = require("./GeneratorUtils");
const Hash256Dto_1 = require("./Hash256Dto");
class AggregateTransactionBodyBuilder {
    constructor(transactionsHash, transactions, cosignatures) {
        this.transactionsHash = transactionsHash;
        this.aggregateTransactionHeader_Reserved1 = 0;
        this.transactions = transactions;
        this.cosignatures = cosignatures;
    }
    static loadFromBinary(payload) {
        const byteArray = Array.from(payload);
        const transactionsHash = Hash256Dto_1.Hash256Dto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, transactionsHash.getSize());
        const payloadSize = GeneratorUtils_1.GeneratorUtils.bufferToUint(GeneratorUtils_1.GeneratorUtils.getBytes(Uint8Array.from(byteArray), 4));
        byteArray.splice(0, 4);
        const aggregateTransactionHeader_Reserved1 = GeneratorUtils_1.GeneratorUtils.bufferToUint(GeneratorUtils_1.GeneratorUtils.getBytes(Uint8Array.from(byteArray), 4));
        byteArray.splice(0, 4);
        let transactionsByteSize = payloadSize;
        const transactions = [];
        while (transactionsByteSize > 0) {
            const item = EmbeddedTransactionHelper_1.EmbeddedTransactionHelper.loadFromBinary(Uint8Array.from(byteArray));
            transactions.push(item);
            const itemSize = item.getSize() + GeneratorUtils_1.GeneratorUtils.getTransactionPaddingSize(item.getSize(), 8);
            transactionsByteSize -= itemSize;
            byteArray.splice(0, itemSize);
        }
        let cosignaturesByteSize = byteArray.length;
        const cosignatures = [];
        while (cosignaturesByteSize > 0) {
            const item = CosignatureBuilder_1.CosignatureBuilder.loadFromBinary(Uint8Array.from(byteArray));
            cosignatures.push(item);
            const itemSize = item.getSize();
            cosignaturesByteSize -= itemSize;
            byteArray.splice(0, itemSize);
        }
        return new AggregateTransactionBodyBuilder(transactionsHash, transactions, cosignatures);
    }
    getTransactionsHash() {
        return this.transactionsHash;
    }
    getAggregateTransactionHeader_Reserved1() {
        return this.aggregateTransactionHeader_Reserved1;
    }
    getTransactions() {
        return this.transactions;
    }
    getCosignatures() {
        return this.cosignatures;
    }
    getSize() {
        let size = 0;
        size += this.transactionsHash.getSize();
        size += 4;
        size += 4;
        this.transactions.forEach((o) => size += EmbeddedTransactionHelper_1.EmbeddedTransactionHelper.serialize(o).length);
        this.cosignatures.forEach((o) => size += o.getSize());
        return size;
    }
    serialize() {
        let newArray = Uint8Array.from([]);
        const transactionsHashBytes = this.transactionsHash.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, transactionsHashBytes);
        const payloadSizeBytes = GeneratorUtils_1.GeneratorUtils.uintToBuffer(EmbeddedTransactionHelper_1.EmbeddedTransactionHelper.getEmbeddedTransactionSize(this.transactions), 4);
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, payloadSizeBytes);
        const aggregateTransactionHeader_Reserved1Bytes = GeneratorUtils_1.GeneratorUtils.uintToBuffer(this.getAggregateTransactionHeader_Reserved1(), 4);
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, aggregateTransactionHeader_Reserved1Bytes);
        this.transactions.forEach((item) => {
            const transactionsBytes = EmbeddedTransactionHelper_1.EmbeddedTransactionHelper.serialize(item);
            newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, transactionsBytes);
        });
        this.cosignatures.forEach((item) => {
            const cosignaturesBytes = item.serialize();
            newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, cosignaturesBytes);
        });
        return newArray;
    }
}
exports.AggregateTransactionBodyBuilder = AggregateTransactionBodyBuilder;
//# sourceMappingURL=AggregateTransactionBodyBuilder.js.map