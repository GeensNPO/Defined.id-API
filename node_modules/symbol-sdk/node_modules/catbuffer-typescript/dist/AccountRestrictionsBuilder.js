"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccountRestrictionsBuilder = void 0;
const AccountRestrictionsInfoBuilder_1 = require("./AccountRestrictionsInfoBuilder");
const AddressDto_1 = require("./AddressDto");
const GeneratorUtils_1 = require("./GeneratorUtils");
class AccountRestrictionsBuilder {
    constructor(address, restrictions) {
        this.address = address;
        this.restrictions = restrictions;
    }
    static loadFromBinary(payload) {
        const byteArray = Array.from(payload);
        const address = AddressDto_1.AddressDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, address.getSize());
        const restrictionsCount = GeneratorUtils_1.GeneratorUtils.bufferToUint64(GeneratorUtils_1.GeneratorUtils.getBytes(Uint8Array.from(byteArray), 8));
        byteArray.splice(0, 8);
        const restrictions = [];
        for (let i = 0; i < (Array.isArray(restrictionsCount) ? GeneratorUtils_1.GeneratorUtils.compact(restrictionsCount) : restrictionsCount); i++) {
            const item = AccountRestrictionsInfoBuilder_1.AccountRestrictionsInfoBuilder.loadFromBinary(Uint8Array.from(byteArray));
            restrictions.push(item);
            byteArray.splice(0, item.getSize());
        }
        return new AccountRestrictionsBuilder(address, restrictions);
    }
    getAddress() {
        return this.address;
    }
    getRestrictions() {
        return this.restrictions;
    }
    getSize() {
        let size = 0;
        size += this.address.getSize();
        size += 8;
        this.restrictions.forEach((o) => size += o.getSize());
        return size;
    }
    serialize() {
        let newArray = Uint8Array.from([]);
        const addressBytes = this.address.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, addressBytes);
        const restrictionsCountBytes = GeneratorUtils_1.GeneratorUtils.uint64ToBuffer(GeneratorUtils_1.GeneratorUtils.fromUint(this.restrictions.length));
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, restrictionsCountBytes);
        this.restrictions.forEach((item) => {
            const restrictionsBytes = item.serialize();
            newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, restrictionsBytes);
        });
        return newArray;
    }
}
exports.AccountRestrictionsBuilder = AccountRestrictionsBuilder;
//# sourceMappingURL=AccountRestrictionsBuilder.js.map