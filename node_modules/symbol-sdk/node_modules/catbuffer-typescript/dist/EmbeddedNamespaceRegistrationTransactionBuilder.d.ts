import { BlockDurationDto } from './BlockDurationDto';
import { EmbeddedTransactionBuilder } from './EmbeddedTransactionBuilder';
import { EntityTypeDto } from './EntityTypeDto';
import { KeyDto } from './KeyDto';
import { NamespaceIdDto } from './NamespaceIdDto';
import { NamespaceRegistrationTransactionBodyBuilder } from './NamespaceRegistrationTransactionBodyBuilder';
import { NamespaceRegistrationTypeDto } from './NamespaceRegistrationTypeDto';
import { NetworkTypeDto } from './NetworkTypeDto';
export declare class EmbeddedNamespaceRegistrationTransactionBuilder extends EmbeddedTransactionBuilder {
    namespaceRegistrationTransactionBody: NamespaceRegistrationTransactionBodyBuilder;
    constructor(signerPublicKey: KeyDto, version: number, network: NetworkTypeDto, type: EntityTypeDto, id: NamespaceIdDto, name: Uint8Array, duration?: BlockDurationDto, parentId?: NamespaceIdDto);
    static loadFromBinary(payload: Uint8Array): EmbeddedNamespaceRegistrationTransactionBuilder;
    getDuration(): BlockDurationDto | undefined;
    getParentId(): NamespaceIdDto | undefined;
    getId(): NamespaceIdDto;
    getRegistrationType(): NamespaceRegistrationTypeDto;
    getName(): Uint8Array;
    getSize(): number;
    serialize(): Uint8Array;
}
