import { AmountDto } from './AmountDto';
import { BlockDurationDto } from './BlockDurationDto';
import { EntityTypeDto } from './EntityTypeDto';
import { KeyDto } from './KeyDto';
import { NamespaceIdDto } from './NamespaceIdDto';
import { NamespaceRegistrationTransactionBodyBuilder } from './NamespaceRegistrationTransactionBodyBuilder';
import { NamespaceRegistrationTypeDto } from './NamespaceRegistrationTypeDto';
import { NetworkTypeDto } from './NetworkTypeDto';
import { SignatureDto } from './SignatureDto';
import { TimestampDto } from './TimestampDto';
import { TransactionBuilder } from './TransactionBuilder';
export declare class NamespaceRegistrationTransactionBuilder extends TransactionBuilder {
    namespaceRegistrationTransactionBody: NamespaceRegistrationTransactionBodyBuilder;
    constructor(signature: SignatureDto, signerPublicKey: KeyDto, version: number, network: NetworkTypeDto, type: EntityTypeDto, fee: AmountDto, deadline: TimestampDto, id: NamespaceIdDto, name: Uint8Array, duration?: BlockDurationDto, parentId?: NamespaceIdDto);
    static loadFromBinary(payload: Uint8Array): NamespaceRegistrationTransactionBuilder;
    getDuration(): BlockDurationDto | undefined;
    getParentId(): NamespaceIdDto | undefined;
    getId(): NamespaceIdDto;
    getRegistrationType(): NamespaceRegistrationTypeDto;
    getName(): Uint8Array;
    getSize(): number;
    serialize(): Uint8Array;
}
