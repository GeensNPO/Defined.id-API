"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionHelper = void 0;
const AccountAddressRestrictionTransactionBuilder_1 = require("./AccountAddressRestrictionTransactionBuilder");
const AccountKeyLinkTransactionBuilder_1 = require("./AccountKeyLinkTransactionBuilder");
const AccountMetadataTransactionBuilder_1 = require("./AccountMetadataTransactionBuilder");
const AccountMosaicRestrictionTransactionBuilder_1 = require("./AccountMosaicRestrictionTransactionBuilder");
const AccountOperationRestrictionTransactionBuilder_1 = require("./AccountOperationRestrictionTransactionBuilder");
const AddressAliasTransactionBuilder_1 = require("./AddressAliasTransactionBuilder");
const AggregateBondedTransactionBuilder_1 = require("./AggregateBondedTransactionBuilder");
const AggregateCompleteTransactionBuilder_1 = require("./AggregateCompleteTransactionBuilder");
const EntityTypeDto_1 = require("./EntityTypeDto");
const HashLockTransactionBuilder_1 = require("./HashLockTransactionBuilder");
const MosaicAddressRestrictionTransactionBuilder_1 = require("./MosaicAddressRestrictionTransactionBuilder");
const MosaicAliasTransactionBuilder_1 = require("./MosaicAliasTransactionBuilder");
const MosaicDefinitionTransactionBuilder_1 = require("./MosaicDefinitionTransactionBuilder");
const MosaicGlobalRestrictionTransactionBuilder_1 = require("./MosaicGlobalRestrictionTransactionBuilder");
const MosaicMetadataTransactionBuilder_1 = require("./MosaicMetadataTransactionBuilder");
const MosaicSupplyChangeTransactionBuilder_1 = require("./MosaicSupplyChangeTransactionBuilder");
const MultisigAccountModificationTransactionBuilder_1 = require("./MultisigAccountModificationTransactionBuilder");
const NamespaceMetadataTransactionBuilder_1 = require("./NamespaceMetadataTransactionBuilder");
const NamespaceRegistrationTransactionBuilder_1 = require("./NamespaceRegistrationTransactionBuilder");
const NodeKeyLinkTransactionBuilder_1 = require("./NodeKeyLinkTransactionBuilder");
const SecretLockTransactionBuilder_1 = require("./SecretLockTransactionBuilder");
const SecretProofTransactionBuilder_1 = require("./SecretProofTransactionBuilder");
const TransactionBuilder_1 = require("./TransactionBuilder");
const TransferTransactionBuilder_1 = require("./TransferTransactionBuilder");
const VotingKeyLinkTransactionBuilder_1 = require("./VotingKeyLinkTransactionBuilder");
const VrfKeyLinkTransactionBuilder_1 = require("./VrfKeyLinkTransactionBuilder");
class TransactionHelper {
    static loadFromBinary(bytes) {
        const header = TransactionBuilder_1.TransactionBuilder.loadFromBinary(bytes);
        switch (header.getType()) {
            case EntityTypeDto_1.EntityTypeDto.MOSAIC_DEFINITION_TRANSACTION_BUILDER:
                return MosaicDefinitionTransactionBuilder_1.MosaicDefinitionTransactionBuilder.loadFromBinary(bytes);
            case EntityTypeDto_1.EntityTypeDto.ACCOUNT_KEY_LINK_TRANSACTION_BUILDER:
                return AccountKeyLinkTransactionBuilder_1.AccountKeyLinkTransactionBuilder.loadFromBinary(bytes);
            case EntityTypeDto_1.EntityTypeDto.NODE_KEY_LINK_TRANSACTION_BUILDER:
                return NodeKeyLinkTransactionBuilder_1.NodeKeyLinkTransactionBuilder.loadFromBinary(bytes);
            case EntityTypeDto_1.EntityTypeDto.AGGREGATE_COMPLETE_TRANSACTION_BUILDER:
                return AggregateCompleteTransactionBuilder_1.AggregateCompleteTransactionBuilder.loadFromBinary(bytes);
            case EntityTypeDto_1.EntityTypeDto.AGGREGATE_BONDED_TRANSACTION_BUILDER:
                return AggregateBondedTransactionBuilder_1.AggregateBondedTransactionBuilder.loadFromBinary(bytes);
            case EntityTypeDto_1.EntityTypeDto.VOTING_KEY_LINK_TRANSACTION_BUILDER:
                return VotingKeyLinkTransactionBuilder_1.VotingKeyLinkTransactionBuilder.loadFromBinary(bytes);
            case EntityTypeDto_1.EntityTypeDto.VRF_KEY_LINK_TRANSACTION_BUILDER:
                return VrfKeyLinkTransactionBuilder_1.VrfKeyLinkTransactionBuilder.loadFromBinary(bytes);
            case EntityTypeDto_1.EntityTypeDto.HASH_LOCK_TRANSACTION_BUILDER:
                return HashLockTransactionBuilder_1.HashLockTransactionBuilder.loadFromBinary(bytes);
            case EntityTypeDto_1.EntityTypeDto.SECRET_LOCK_TRANSACTION_BUILDER:
                return SecretLockTransactionBuilder_1.SecretLockTransactionBuilder.loadFromBinary(bytes);
            case EntityTypeDto_1.EntityTypeDto.SECRET_PROOF_TRANSACTION_BUILDER:
                return SecretProofTransactionBuilder_1.SecretProofTransactionBuilder.loadFromBinary(bytes);
            case EntityTypeDto_1.EntityTypeDto.ACCOUNT_METADATA_TRANSACTION_BUILDER:
                return AccountMetadataTransactionBuilder_1.AccountMetadataTransactionBuilder.loadFromBinary(bytes);
            case EntityTypeDto_1.EntityTypeDto.MOSAIC_METADATA_TRANSACTION_BUILDER:
                return MosaicMetadataTransactionBuilder_1.MosaicMetadataTransactionBuilder.loadFromBinary(bytes);
            case EntityTypeDto_1.EntityTypeDto.NAMESPACE_METADATA_TRANSACTION_BUILDER:
                return NamespaceMetadataTransactionBuilder_1.NamespaceMetadataTransactionBuilder.loadFromBinary(bytes);
            case EntityTypeDto_1.EntityTypeDto.MOSAIC_SUPPLY_CHANGE_TRANSACTION_BUILDER:
                return MosaicSupplyChangeTransactionBuilder_1.MosaicSupplyChangeTransactionBuilder.loadFromBinary(bytes);
            case EntityTypeDto_1.EntityTypeDto.MULTISIG_ACCOUNT_MODIFICATION_TRANSACTION_BUILDER:
                return MultisigAccountModificationTransactionBuilder_1.MultisigAccountModificationTransactionBuilder.loadFromBinary(bytes);
            case EntityTypeDto_1.EntityTypeDto.ADDRESS_ALIAS_TRANSACTION_BUILDER:
                return AddressAliasTransactionBuilder_1.AddressAliasTransactionBuilder.loadFromBinary(bytes);
            case EntityTypeDto_1.EntityTypeDto.MOSAIC_ALIAS_TRANSACTION_BUILDER:
                return MosaicAliasTransactionBuilder_1.MosaicAliasTransactionBuilder.loadFromBinary(bytes);
            case EntityTypeDto_1.EntityTypeDto.NAMESPACE_REGISTRATION_TRANSACTION_BUILDER:
                return NamespaceRegistrationTransactionBuilder_1.NamespaceRegistrationTransactionBuilder.loadFromBinary(bytes);
            case EntityTypeDto_1.EntityTypeDto.ACCOUNT_ADDRESS_RESTRICTION_TRANSACTION_BUILDER:
                return AccountAddressRestrictionTransactionBuilder_1.AccountAddressRestrictionTransactionBuilder.loadFromBinary(bytes);
            case EntityTypeDto_1.EntityTypeDto.ACCOUNT_MOSAIC_RESTRICTION_TRANSACTION_BUILDER:
                return AccountMosaicRestrictionTransactionBuilder_1.AccountMosaicRestrictionTransactionBuilder.loadFromBinary(bytes);
            case EntityTypeDto_1.EntityTypeDto.ACCOUNT_OPERATION_RESTRICTION_TRANSACTION_BUILDER:
                return AccountOperationRestrictionTransactionBuilder_1.AccountOperationRestrictionTransactionBuilder.loadFromBinary(bytes);
            case EntityTypeDto_1.EntityTypeDto.MOSAIC_ADDRESS_RESTRICTION_TRANSACTION_BUILDER:
                return MosaicAddressRestrictionTransactionBuilder_1.MosaicAddressRestrictionTransactionBuilder.loadFromBinary(bytes);
            case EntityTypeDto_1.EntityTypeDto.MOSAIC_GLOBAL_RESTRICTION_TRANSACTION_BUILDER:
                return MosaicGlobalRestrictionTransactionBuilder_1.MosaicGlobalRestrictionTransactionBuilder.loadFromBinary(bytes);
            case EntityTypeDto_1.EntityTypeDto.TRANSFER_TRANSACTION_BUILDER:
                return TransferTransactionBuilder_1.TransferTransactionBuilder.loadFromBinary(bytes);
            default:
                throw new Error(`Transaction type: ${header.getType()} not recognized.`);
        }
    }
}
exports.TransactionHelper = TransactionHelper;
//# sourceMappingURL=TransactionHelper.js.map