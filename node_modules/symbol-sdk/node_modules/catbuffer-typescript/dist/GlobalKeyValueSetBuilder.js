"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GlobalKeyValueSetBuilder = void 0;
const GeneratorUtils_1 = require("./GeneratorUtils");
const GlobalKeyValueBuilder_1 = require("./GlobalKeyValueBuilder");
class GlobalKeyValueSetBuilder {
    constructor(keys) {
        this.keys = keys;
    }
    static loadFromBinary(payload) {
        const byteArray = Array.from(payload);
        const keyValueCount = GeneratorUtils_1.GeneratorUtils.bufferToUint(GeneratorUtils_1.GeneratorUtils.getBytes(Uint8Array.from(byteArray), 1));
        byteArray.splice(0, 1);
        const keys = [];
        for (let i = 0; i < (Array.isArray(keyValueCount) ? GeneratorUtils_1.GeneratorUtils.compact(keyValueCount) : keyValueCount); i++) {
            const item = GlobalKeyValueBuilder_1.GlobalKeyValueBuilder.loadFromBinary(Uint8Array.from(byteArray));
            keys.push(item);
            byteArray.splice(0, item.getSize());
        }
        return new GlobalKeyValueSetBuilder(keys);
    }
    getKeys() {
        return this.keys;
    }
    getSize() {
        let size = 0;
        size += 1;
        this.keys.forEach((o) => size += o.getSize());
        return size;
    }
    serialize() {
        let newArray = Uint8Array.from([]);
        const keyValueCountBytes = GeneratorUtils_1.GeneratorUtils.uintToBuffer(this.keys.length, 1);
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, keyValueCountBytes);
        this.keys.forEach((item) => {
            const keysBytes = item.serialize();
            newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, keysBytes);
        });
        return newArray;
    }
}
exports.GlobalKeyValueSetBuilder = GlobalKeyValueSetBuilder;
//# sourceMappingURL=GlobalKeyValueSetBuilder.js.map