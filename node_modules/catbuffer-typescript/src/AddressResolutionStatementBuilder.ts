// tslint:disable: jsdoc-format
/**
*** Copyright (c) 2016-present,
*** Jaguar0625, gimre, BloodyRookie, Tech Bureau, Corp. All rights reserved.
***
*** This file is part of Catapult.
***
*** Catapult is free software: you can redistribute it and/or modify
*** it under the terms of the GNU Lesser General Public License as published by
*** the Free Software Foundation, either version 3 of the License, or
*** (at your option) any later version.
***
*** Catapult is distributed in the hope that it will be useful,
*** but WITHOUT ANY WARRANTY; without even the implied warranty of
*** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
*** GNU Lesser General Public License for more details.
***
*** You should have received a copy of the GNU Lesser General Public License
*** along with Catapult. If not, see <http://www.gnu.org/licenses/>.
**/

import { AddressResolutionEntryBuilder } from './AddressResolutionEntryBuilder';
import { GeneratorUtils } from './GeneratorUtils';
import { ReceiptBuilder } from './ReceiptBuilder';
import { ReceiptTypeDto } from './ReceiptTypeDto';
import { UnresolvedAddressDto } from './UnresolvedAddressDto';

/** Binary layout for an address resolution statement. */
export class AddressResolutionStatementBuilder extends ReceiptBuilder {
    /** Unresolved address. */
    unresolved: UnresolvedAddressDto;
    /** Resolution entries. */
    resolutionEntries: AddressResolutionEntryBuilder[];

    /**
     * Constructor.
     *
     * @param version Receipt version.
     * @param type Receipt type.
     * @param unresolved Unresolved address.
     * @param resolutionEntries Resolution entries.
     */
    // tslint:disable-next-line: max-line-length
    public constructor(version: number,  type: ReceiptTypeDto,  unresolved: UnresolvedAddressDto,  resolutionEntries: AddressResolutionEntryBuilder[]) {
        super(version, type);
        this.unresolved = unresolved;
        this.resolutionEntries = resolutionEntries;
    }

    /**
     * Creates an instance of AddressResolutionStatementBuilder from binary payload.
     *
     * @param payload Byte payload to use to serialize the object.
     * @return Instance of AddressResolutionStatementBuilder.
     */
    public static loadFromBinary(payload: Uint8Array): AddressResolutionStatementBuilder {
        const byteArray = Array.from(payload);
        const superObject = ReceiptBuilder.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, superObject.getSize());
        const unresolved = UnresolvedAddressDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, unresolved.getSize());
        let resolutionEntriesByteSize = byteArray.length;
        const resolutionEntries: AddressResolutionEntryBuilder[] = [];
        while (resolutionEntriesByteSize > 0) {
            const item = AddressResolutionEntryBuilder.loadFromBinary(Uint8Array.from(byteArray));
            resolutionEntries.push(item);
            const itemSize = item.getSize();
            resolutionEntriesByteSize -= itemSize;
            byteArray.splice(0, itemSize);
        }
        return new AddressResolutionStatementBuilder(superObject.version, superObject.type, unresolved, resolutionEntries);
    }

    /**
     * Gets unresolved address.
     *
     * @return Unresolved address.
     */
    public getUnresolved(): UnresolvedAddressDto {
        return this.unresolved;
    }

    /**
     * Gets resolution entries.
     *
     * @return Resolution entries.
     */
    public getResolutionEntries(): AddressResolutionEntryBuilder[] {
        return this.resolutionEntries;
    }

    /**
     * Gets the size of the object.
     *
     * @return Size in bytes.
     */
    public getSize(): number {
        let size: number = super.getSize();
        size += this.unresolved.getSize();
        this.resolutionEntries.forEach((o) => size += o.getSize());
        return size;
    }

    /**
     * Serializes an object to bytes.
     *
     * @return Serialized bytes.
     */
    public serialize(): Uint8Array {
        let newArray = Uint8Array.from([]);
        const superBytes = super.serialize();
        newArray = GeneratorUtils.concatTypedArrays(newArray, superBytes);
        const unresolvedBytes = this.unresolved.serialize();
        newArray = GeneratorUtils.concatTypedArrays(newArray, unresolvedBytes);
        this.resolutionEntries.forEach((item) => {
            const resolutionEntriesBytes = item.serialize();
            newArray = GeneratorUtils.concatTypedArrays(newArray, resolutionEntriesBytes);
        });
        return newArray;
    }
}
