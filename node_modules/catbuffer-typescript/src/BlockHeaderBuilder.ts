// tslint:disable: jsdoc-format
/**
*** Copyright (c) 2016-present,
*** Jaguar0625, gimre, BloodyRookie, Tech Bureau, Corp. All rights reserved.
***
*** This file is part of Catapult.
***
*** Catapult is free software: you can redistribute it and/or modify
*** it under the terms of the GNU Lesser General Public License as published by
*** the Free Software Foundation, either version 3 of the License, or
*** (at your option) any later version.
***
*** Catapult is distributed in the hope that it will be useful,
*** but WITHOUT ANY WARRANTY; without even the implied warranty of
*** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
*** GNU Lesser General Public License for more details.
***
*** You should have received a copy of the GNU Lesser General Public License
*** along with Catapult. If not, see <http://www.gnu.org/licenses/>.
**/

import { AddressDto } from './AddressDto';
import { BlockFeeMultiplierDto } from './BlockFeeMultiplierDto';
import { DifficultyDto } from './DifficultyDto';
import { EntityTypeDto } from './EntityTypeDto';
import { GeneratorUtils } from './GeneratorUtils';
import { Hash256Dto } from './Hash256Dto';
import { HeightDto } from './HeightDto';
import { KeyDto } from './KeyDto';
import { NetworkTypeDto } from './NetworkTypeDto';
import { SignatureDto } from './SignatureDto';
import { TimestampDto } from './TimestampDto';
import { VrfProofBuilder } from './VrfProofBuilder';

/** Binary layout for a block header. */
export class BlockHeaderBuilder {
    /** Entity size. */
    size = 0;
    /** Reserved padding to align Signature on 8-byte boundary. */
    verifiableEntityHeader_Reserved1: number;
    /** Entity signature. */
    signature: SignatureDto;
    /** Entity signer's public key. */
    signerPublicKey: KeyDto;
    /** Reserved padding to align end of EntityBody on 8-byte boundary. */
    entityBody_Reserved1: number;
    /** Entity version. */
    version: number;
    /** Entity network. */
    network: NetworkTypeDto;
    /** Entity type. */
    type: EntityTypeDto;
    /** Block height. */
    height: HeightDto;
    /** Number of milliseconds elapsed since creation of nemesis block. */
    timestamp: TimestampDto;
    /** Block difficulty. */
    difficulty: DifficultyDto;
    /** Generation hash proof. */
    generationHashProof: VrfProofBuilder;
    /** Previous block hash. */
    previousBlockHash: Hash256Dto;
    /** Hash of the transactions in this block. */
    transactionsHash: Hash256Dto;
    /** Hash of the receipts generated by this block. */
    receiptsHash: Hash256Dto;
    /** Hash of the global chain state at this block. */
    stateHash: Hash256Dto;
    /** Beneficiary address designated by harvester. */
    beneficiaryAddress: AddressDto;
    /** Fee multiplier applied to block transactions. */
    feeMultiplier: BlockFeeMultiplierDto;
    /** Reserved padding to align end of BlockHeader on 8-byte boundary. */
    blockHeader_Reserved1: number;

    /**
     * Constructor.
     *
     * @param signature Entity signature.
     * @param signerPublicKey Entity signer's public key.
     * @param version Entity version.
     * @param network Entity network.
     * @param type Entity type.
     * @param height Block height.
     * @param timestamp Number of milliseconds elapsed since creation of nemesis block.
     * @param difficulty Block difficulty.
     * @param generationHashProof Generation hash proof.
     * @param previousBlockHash Previous block hash.
     * @param transactionsHash Hash of the transactions in this block.
     * @param receiptsHash Hash of the receipts generated by this block.
     * @param stateHash Hash of the global chain state at this block.
     * @param beneficiaryAddress Beneficiary address designated by harvester.
     * @param feeMultiplier Fee multiplier applied to block transactions.
     */
    // tslint:disable-next-line: max-line-length
    public constructor(signature: SignatureDto,  signerPublicKey: KeyDto,  version: number,  network: NetworkTypeDto,  type: EntityTypeDto,  height: HeightDto,  timestamp: TimestampDto,  difficulty: DifficultyDto,  generationHashProof: VrfProofBuilder,  previousBlockHash: Hash256Dto,  transactionsHash: Hash256Dto,  receiptsHash: Hash256Dto,  stateHash: Hash256Dto,  beneficiaryAddress: AddressDto,  feeMultiplier: BlockFeeMultiplierDto) {
        this.verifiableEntityHeader_Reserved1 = 0;
        this.signature = signature;
        this.signerPublicKey = signerPublicKey;
        this.entityBody_Reserved1 = 0;
        this.version = version;
        this.network = network;
        this.type = type;
        this.height = height;
        this.timestamp = timestamp;
        this.difficulty = difficulty;
        this.generationHashProof = generationHashProof;
        this.previousBlockHash = previousBlockHash;
        this.transactionsHash = transactionsHash;
        this.receiptsHash = receiptsHash;
        this.stateHash = stateHash;
        this.beneficiaryAddress = beneficiaryAddress;
        this.feeMultiplier = feeMultiplier;
        this.blockHeader_Reserved1 = 0;
    }

    /**
     * Creates an instance of BlockHeaderBuilder from binary payload.
     *
     * @param payload Byte payload to use to serialize the object.
     * @return Instance of BlockHeaderBuilder.
     */
    public static loadFromBinary(payload: Uint8Array): BlockHeaderBuilder {
        const byteArray = Array.from(payload);
        const size = GeneratorUtils.bufferToUint(GeneratorUtils.getBytes(Uint8Array.from(byteArray), 4));
        byteArray.splice(0, 4);
        // tslint:disable-next-line: max-line-length
        const verifiableEntityHeader_Reserved1 = GeneratorUtils.bufferToUint(GeneratorUtils.getBytes(Uint8Array.from(byteArray), 4));
        byteArray.splice(0, 4);
        const signature = SignatureDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, signature.getSize());
        const signerPublicKey = KeyDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, signerPublicKey.getSize());
        const entityBody_Reserved1 = GeneratorUtils.bufferToUint(GeneratorUtils.getBytes(Uint8Array.from(byteArray), 4));
        byteArray.splice(0, 4);
        const version = GeneratorUtils.bufferToUint(GeneratorUtils.getBytes(Uint8Array.from(byteArray), 1));
        byteArray.splice(0, 1);
        const network = GeneratorUtils.bufferToUint(GeneratorUtils.getBytes(Uint8Array.from(byteArray), 1));
        byteArray.splice(0, 1);
        const type = GeneratorUtils.bufferToUint(GeneratorUtils.getBytes(Uint8Array.from(byteArray), 2));
        byteArray.splice(0, 2);
        const height = HeightDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, height.getSize());
        const timestamp = TimestampDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, timestamp.getSize());
        const difficulty = DifficultyDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, difficulty.getSize());
        const generationHashProof = VrfProofBuilder.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, generationHashProof.getSize());
        const previousBlockHash = Hash256Dto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, previousBlockHash.getSize());
        const transactionsHash = Hash256Dto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, transactionsHash.getSize());
        const receiptsHash = Hash256Dto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, receiptsHash.getSize());
        const stateHash = Hash256Dto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, stateHash.getSize());
        const beneficiaryAddress = AddressDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, beneficiaryAddress.getSize());
        const feeMultiplier = BlockFeeMultiplierDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, feeMultiplier.getSize());
        const blockHeader_Reserved1 = GeneratorUtils.bufferToUint(GeneratorUtils.getBytes(Uint8Array.from(byteArray), 4));
        byteArray.splice(0, 4);
        // tslint:disable-next-line: max-line-length
        return new BlockHeaderBuilder(signature, signerPublicKey, version, network, type, height, timestamp, difficulty, generationHashProof, previousBlockHash, transactionsHash, receiptsHash, stateHash, beneficiaryAddress, feeMultiplier);
    }

    /**
     * Gets reserved padding to align Signature on 8-byte boundary.
     *
     * @return Reserved padding to align Signature on 8-byte boundary.
     */
    public getVerifiableEntityHeader_Reserved1(): number {
        return this.verifiableEntityHeader_Reserved1;
    }

    /**
     * Gets entity signature.
     *
     * @return Entity signature.
     */
    public getSignature(): SignatureDto {
        return this.signature;
    }

    /**
     * Gets entity signer's public key.
     *
     * @return Entity signer's public key.
     */
    public getSignerPublicKey(): KeyDto {
        return this.signerPublicKey;
    }

    /**
     * Gets reserved padding to align end of EntityBody on 8-byte boundary.
     *
     * @return Reserved padding to align end of EntityBody on 8-byte boundary.
     */
    public getEntityBody_Reserved1(): number {
        return this.entityBody_Reserved1;
    }

    /**
     * Gets entity version.
     *
     * @return Entity version.
     */
    public getVersion(): number {
        return this.version;
    }

    /**
     * Gets entity network.
     *
     * @return Entity network.
     */
    public getNetwork(): NetworkTypeDto {
        return this.network;
    }

    /**
     * Gets entity type.
     *
     * @return Entity type.
     */
    public getType(): EntityTypeDto {
        return this.type;
    }

    /**
     * Gets block height.
     *
     * @return Block height.
     */
    public getHeight(): HeightDto {
        return this.height;
    }

    /**
     * Gets number of milliseconds elapsed since creation of nemesis block.
     *
     * @return Number of milliseconds elapsed since creation of nemesis block.
     */
    public getTimestamp(): TimestampDto {
        return this.timestamp;
    }

    /**
     * Gets block difficulty.
     *
     * @return Block difficulty.
     */
    public getDifficulty(): DifficultyDto {
        return this.difficulty;
    }

    /**
     * Gets generation hash proof.
     *
     * @return Generation hash proof.
     */
    public getGenerationHashProof(): VrfProofBuilder {
        return this.generationHashProof;
    }

    /**
     * Gets previous block hash.
     *
     * @return Previous block hash.
     */
    public getPreviousBlockHash(): Hash256Dto {
        return this.previousBlockHash;
    }

    /**
     * Gets hash of the transactions in this block.
     *
     * @return Hash of the transactions in this block.
     */
    public getTransactionsHash(): Hash256Dto {
        return this.transactionsHash;
    }

    /**
     * Gets hash of the receipts generated by this block.
     *
     * @return Hash of the receipts generated by this block.
     */
    public getReceiptsHash(): Hash256Dto {
        return this.receiptsHash;
    }

    /**
     * Gets hash of the global chain state at this block.
     *
     * @return Hash of the global chain state at this block.
     */
    public getStateHash(): Hash256Dto {
        return this.stateHash;
    }

    /**
     * Gets beneficiary address designated by harvester.
     *
     * @return Beneficiary address designated by harvester.
     */
    public getBeneficiaryAddress(): AddressDto {
        return this.beneficiaryAddress;
    }

    /**
     * Gets fee multiplier applied to block transactions.
     *
     * @return Fee multiplier applied to block transactions.
     */
    public getFeeMultiplier(): BlockFeeMultiplierDto {
        return this.feeMultiplier;
    }

    /**
     * Gets reserved padding to align end of BlockHeader on 8-byte boundary.
     *
     * @return Reserved padding to align end of BlockHeader on 8-byte boundary.
     */
    public getBlockHeader_Reserved1(): number {
        return this.blockHeader_Reserved1;
    }

    /**
     * Gets the size of the object.
     *
     * @return Size in bytes.
     */
    public getSize(): number {
        let size = 0;
        size += 4; // size
        size += 4; // verifiableEntityHeader_Reserved1
        size += this.signature.getSize();
        size += this.signerPublicKey.getSize();
        size += 4; // entityBody_Reserved1
        size += 1; // version
        size += 1; // network
        size += 2; // type
        size += this.height.getSize();
        size += this.timestamp.getSize();
        size += this.difficulty.getSize();
        size += this.generationHashProof.getSize();
        size += this.previousBlockHash.getSize();
        size += this.transactionsHash.getSize();
        size += this.receiptsHash.getSize();
        size += this.stateHash.getSize();
        size += this.beneficiaryAddress.getSize();
        size += this.feeMultiplier.getSize();
        size += 4; // blockHeader_Reserved1
        return size;
    }

    /**
     * Serializes an object to bytes.
     *
     * @return Serialized bytes.
     */
    public serialize(): Uint8Array {
        let newArray = Uint8Array.from([]);
        const sizeBytes = GeneratorUtils.uintToBuffer(this.getSize(), 4);
        newArray = GeneratorUtils.concatTypedArrays(newArray, sizeBytes);
        // tslint:disable-next-line: max-line-length
        const verifiableEntityHeader_Reserved1Bytes = GeneratorUtils.uintToBuffer(this.getVerifiableEntityHeader_Reserved1(), 4);
        newArray = GeneratorUtils.concatTypedArrays(newArray, verifiableEntityHeader_Reserved1Bytes);
        const signatureBytes = this.signature.serialize();
        newArray = GeneratorUtils.concatTypedArrays(newArray, signatureBytes);
        const signerPublicKeyBytes = this.signerPublicKey.serialize();
        newArray = GeneratorUtils.concatTypedArrays(newArray, signerPublicKeyBytes);
        const entityBody_Reserved1Bytes = GeneratorUtils.uintToBuffer(this.getEntityBody_Reserved1(), 4);
        newArray = GeneratorUtils.concatTypedArrays(newArray, entityBody_Reserved1Bytes);
        const versionBytes = GeneratorUtils.uintToBuffer(this.getVersion(), 1);
        newArray = GeneratorUtils.concatTypedArrays(newArray, versionBytes);
        const networkBytes = GeneratorUtils.uintToBuffer(this.network, 1);
        newArray = GeneratorUtils.concatTypedArrays(newArray, networkBytes);
        const typeBytes = GeneratorUtils.uintToBuffer(this.type, 2);
        newArray = GeneratorUtils.concatTypedArrays(newArray, typeBytes);
        const heightBytes = this.height.serialize();
        newArray = GeneratorUtils.concatTypedArrays(newArray, heightBytes);
        const timestampBytes = this.timestamp.serialize();
        newArray = GeneratorUtils.concatTypedArrays(newArray, timestampBytes);
        const difficultyBytes = this.difficulty.serialize();
        newArray = GeneratorUtils.concatTypedArrays(newArray, difficultyBytes);
        const generationHashProofBytes = this.generationHashProof.serialize();
        newArray = GeneratorUtils.concatTypedArrays(newArray, generationHashProofBytes);
        const previousBlockHashBytes = this.previousBlockHash.serialize();
        newArray = GeneratorUtils.concatTypedArrays(newArray, previousBlockHashBytes);
        const transactionsHashBytes = this.transactionsHash.serialize();
        newArray = GeneratorUtils.concatTypedArrays(newArray, transactionsHashBytes);
        const receiptsHashBytes = this.receiptsHash.serialize();
        newArray = GeneratorUtils.concatTypedArrays(newArray, receiptsHashBytes);
        const stateHashBytes = this.stateHash.serialize();
        newArray = GeneratorUtils.concatTypedArrays(newArray, stateHashBytes);
        const beneficiaryAddressBytes = this.beneficiaryAddress.serialize();
        newArray = GeneratorUtils.concatTypedArrays(newArray, beneficiaryAddressBytes);
        const feeMultiplierBytes = this.feeMultiplier.serialize();
        newArray = GeneratorUtils.concatTypedArrays(newArray, feeMultiplierBytes);
        const blockHeader_Reserved1Bytes = GeneratorUtils.uintToBuffer(this.getBlockHeader_Reserved1(), 4);
        newArray = GeneratorUtils.concatTypedArrays(newArray, blockHeader_Reserved1Bytes);
        return newArray;
    }
}
