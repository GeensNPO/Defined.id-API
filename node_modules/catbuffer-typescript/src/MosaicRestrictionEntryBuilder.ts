// tslint:disable: jsdoc-format
/**
*** Copyright (c) 2016-present,
*** Jaguar0625, gimre, BloodyRookie, Tech Bureau, Corp. All rights reserved.
***
*** This file is part of Catapult.
***
*** Catapult is free software: you can redistribute it and/or modify
*** it under the terms of the GNU Lesser General Public License as published by
*** the Free Software Foundation, either version 3 of the License, or
*** (at your option) any later version.
***
*** Catapult is distributed in the hope that it will be useful,
*** but WITHOUT ANY WARRANTY; without even the implied warranty of
*** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
*** GNU Lesser General Public License for more details.
***
*** You should have received a copy of the GNU Lesser General Public License
*** along with Catapult. If not, see <http://www.gnu.org/licenses/>.
**/

import { GeneratorUtils } from './GeneratorUtils';
import { MosaicAddressRestrictionEntryBuilder } from './MosaicAddressRestrictionEntryBuilder';
import { MosaicGlobalRestrictionEntryBuilder } from './MosaicGlobalRestrictionEntryBuilder';
import { MosaicRestrictionEntryTypeDto } from './MosaicRestrictionEntryTypeDto';

/** Binary layout for a mosaic restriction. */
export class MosaicRestrictionEntryBuilder {
    /** Type of restriction being placed upon the entity. */
    entryType: MosaicRestrictionEntryTypeDto;
    /** Address restriction rule. */
    addressEntry?: MosaicAddressRestrictionEntryBuilder;
    /** Global mosaic rule. */
    globalEntry?: MosaicGlobalRestrictionEntryBuilder;

    /**
     * Constructor.
     *
     * @param addressEntry Address restriction rule.
     * @param globalEntry Global mosaic rule.
     */
    // tslint:disable-next-line: max-line-length
    public constructor(addressEntry?: MosaicAddressRestrictionEntryBuilder,  globalEntry?: MosaicGlobalRestrictionEntryBuilder) {
        this.addressEntry = addressEntry;
        this.globalEntry = globalEntry;
        if (addressEntry) {
            this.entryType = MosaicRestrictionEntryTypeDto.ADDRESS;
        }
        else {
            this.entryType = MosaicRestrictionEntryTypeDto.GLOBAL;
        }
    }

    /**
     * Creates an instance of MosaicRestrictionEntryBuilder from binary payload.
     *
     * @param payload Byte payload to use to serialize the object.
     * @return Instance of MosaicRestrictionEntryBuilder.
     */
    public static loadFromBinary(payload: Uint8Array): MosaicRestrictionEntryBuilder {
        const byteArray = Array.from(payload);
        const entryType = GeneratorUtils.bufferToUint(GeneratorUtils.getBytes(Uint8Array.from(byteArray), 1));
        byteArray.splice(0, 1);
        const entryTypeConditionBytes = Uint8Array.from(byteArray.slice(0, 1));
        byteArray.splice(0, 1);
        let addressEntry;
        if (entryType === MosaicRestrictionEntryTypeDto.ADDRESS) {
            addressEntry = MosaicAddressRestrictionEntryBuilder.loadFromBinary(entryTypeConditionBytes);
        }
        let globalEntry;
        if (entryType === MosaicRestrictionEntryTypeDto.GLOBAL) {
            globalEntry = MosaicGlobalRestrictionEntryBuilder.loadFromBinary(entryTypeConditionBytes);
        }
        return new MosaicRestrictionEntryBuilder(addressEntry, globalEntry);
    }

    /**
     * Gets type of restriction being placed upon the entity.
     *
     * @return Type of restriction being placed upon the entity.
     */
    public getEntryType(): MosaicRestrictionEntryTypeDto {
        return this.entryType;
    }

    /**
     * Gets address restriction rule.
     *
     * @return Address restriction rule.
     */
    public getAddressEntry(): MosaicAddressRestrictionEntryBuilder | undefined {
        if (this.entryType !== MosaicRestrictionEntryTypeDto.ADDRESS) {
            throw new Error('entryType is not set to ADDRESS.');
        }
        return this.addressEntry;
    }

    /**
     * Gets global mosaic rule.
     *
     * @return Global mosaic rule.
     */
    public getGlobalEntry(): MosaicGlobalRestrictionEntryBuilder | undefined {
        if (this.entryType !== MosaicRestrictionEntryTypeDto.GLOBAL) {
            throw new Error('entryType is not set to GLOBAL.');
        }
        return this.globalEntry;
    }

    /**
     * Gets the size of the object.
     *
     * @return Size in bytes.
     */
    public getSize(): number {
        let size = 0;
        size += 1; // entryType
        if (this.entryType === MosaicRestrictionEntryTypeDto.ADDRESS) {
            size += this.addressEntry!.getSize();
        }
        if (this.entryType === MosaicRestrictionEntryTypeDto.GLOBAL) {
            size += this.globalEntry!.getSize();
        }
        return size;
    }

    /**
     * Serializes an object to bytes.
     *
     * @return Serialized bytes.
     */
    public serialize(): Uint8Array {
        let newArray = Uint8Array.from([]);
        const entryTypeBytes = GeneratorUtils.uintToBuffer(this.entryType, 1);
        newArray = GeneratorUtils.concatTypedArrays(newArray, entryTypeBytes);
        if (this.entryType === MosaicRestrictionEntryTypeDto.ADDRESS) {
            const addressEntryBytes = this.addressEntry!.serialize();
            newArray = GeneratorUtils.concatTypedArrays(newArray, addressEntryBytes);
        }
        if (this.entryType === MosaicRestrictionEntryTypeDto.GLOBAL) {
            const globalEntryBytes = this.globalEntry!.serialize();
            newArray = GeneratorUtils.concatTypedArrays(newArray, globalEntryBytes);
        }
        return newArray;
    }
}
