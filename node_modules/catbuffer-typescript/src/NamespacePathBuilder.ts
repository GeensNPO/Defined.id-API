// tslint:disable: jsdoc-format
/**
*** Copyright (c) 2016-present,
*** Jaguar0625, gimre, BloodyRookie, Tech Bureau, Corp. All rights reserved.
***
*** This file is part of Catapult.
***
*** Catapult is free software: you can redistribute it and/or modify
*** it under the terms of the GNU Lesser General Public License as published by
*** the Free Software Foundation, either version 3 of the License, or
*** (at your option) any later version.
***
*** Catapult is distributed in the hope that it will be useful,
*** but WITHOUT ANY WARRANTY; without even the implied warranty of
*** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
*** GNU Lesser General Public License for more details.
***
*** You should have received a copy of the GNU Lesser General Public License
*** along with Catapult. If not, see <http://www.gnu.org/licenses/>.
**/

import { GeneratorUtils } from './GeneratorUtils';
import { NamespaceAliasBuilder } from './NamespaceAliasBuilder';

/** Binary layout for a namespace path. */
export class NamespacePathBuilder {
    /** Namespace path (excluding root id). */
    path: Uint8Array;
    /** Namespace alias. */
    alias: NamespaceAliasBuilder;

    /**
     * Constructor.
     *
     * @param path Namespace path (excluding root id).
     * @param alias Namespace alias.
     */
    public constructor(path: Uint8Array,  alias: NamespaceAliasBuilder) {
        this.path = path;
        this.alias = alias;
    }

    /**
     * Creates an instance of NamespacePathBuilder from binary payload.
     *
     * @param payload Byte payload to use to serialize the object.
     * @return Instance of NamespacePathBuilder.
     */
    public static loadFromBinary(payload: Uint8Array): NamespacePathBuilder {
        const byteArray = Array.from(payload);
        const pathSize = GeneratorUtils.bufferToUint(GeneratorUtils.getBytes(Uint8Array.from(byteArray), 1));
        byteArray.splice(0, 1);
        const path = GeneratorUtils.getBytes(Uint8Array.from(byteArray), pathSize);
        byteArray.splice(0, pathSize);
        const alias = NamespaceAliasBuilder.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, alias.getSize());
        return new NamespacePathBuilder(path, alias);
    }

    /**
     * Gets namespace path (excluding root id).
     *
     * @return Namespace path (excluding root id).
     */
    public getPath(): Uint8Array {
        return this.path;
    }

    /**
     * Gets namespace alias.
     *
     * @return Namespace alias.
     */
    public getAlias(): NamespaceAliasBuilder {
        return this.alias;
    }

    /**
     * Gets the size of the object.
     *
     * @return Size in bytes.
     */
    public getSize(): number {
        let size = 0;
        size += 1; // pathSize
        size += this.path.length;
        size += this.alias.getSize();
        return size;
    }

    /**
     * Serializes an object to bytes.
     *
     * @return Serialized bytes.
     */
    public serialize(): Uint8Array {
        let newArray = Uint8Array.from([]);
        const pathSizeBytes = GeneratorUtils.uintToBuffer(this.path.length, 1);
        newArray = GeneratorUtils.concatTypedArrays(newArray, pathSizeBytes);
        newArray = GeneratorUtils.concatTypedArrays(newArray, this.path);
        const aliasBytes = this.alias.serialize();
        newArray = GeneratorUtils.concatTypedArrays(newArray, aliasBytes);
        return newArray;
    }
}
