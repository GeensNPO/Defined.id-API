// tslint:disable: jsdoc-format
/**
*** Copyright (c) 2016-present,
*** Jaguar0625, gimre, BloodyRookie, Tech Bureau, Corp. All rights reserved.
***
*** This file is part of Catapult.
***
*** Catapult is free software: you can redistribute it and/or modify
*** it under the terms of the GNU Lesser General Public License as published by
*** the Free Software Foundation, either version 3 of the License, or
*** (at your option) any later version.
***
*** Catapult is distributed in the hope that it will be useful,
*** but WITHOUT ANY WARRANTY; without even the implied warranty of
*** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
*** GNU Lesser General Public License for more details.
***
*** You should have received a copy of the GNU Lesser General Public License
*** along with Catapult. If not, see <http://www.gnu.org/licenses/>.
**/

import { AddressDto } from './AddressDto';
import { GeneratorUtils } from './GeneratorUtils';

/** Binary layout for a multisig entry. */
export class MultisigEntryBuilder {
    /** Minimum approval for modifications. */
    minApproval: number;
    /** Minimum approval for removal. */
    minRemoval: number;
    /** Account address. */
    accountAddress: AddressDto;
    /** Cosignatories for account. */
    cosignatoryAddresses: AddressDto[];
    /** Accounts for which the entry is cosignatory. */
    multisigAddresses: AddressDto[];

    /**
     * Constructor.
     *
     * @param minApproval Minimum approval for modifications.
     * @param minRemoval Minimum approval for removal.
     * @param accountAddress Account address.
     * @param cosignatoryAddresses Cosignatories for account.
     * @param multisigAddresses Accounts for which the entry is cosignatory.
     */
    // tslint:disable-next-line: max-line-length
    public constructor(minApproval: number,  minRemoval: number,  accountAddress: AddressDto,  cosignatoryAddresses: AddressDto[],  multisigAddresses: AddressDto[]) {
        this.minApproval = minApproval;
        this.minRemoval = minRemoval;
        this.accountAddress = accountAddress;
        this.cosignatoryAddresses = cosignatoryAddresses;
        this.multisigAddresses = multisigAddresses;
    }

    /**
     * Creates an instance of MultisigEntryBuilder from binary payload.
     *
     * @param payload Byte payload to use to serialize the object.
     * @return Instance of MultisigEntryBuilder.
     */
    public static loadFromBinary(payload: Uint8Array): MultisigEntryBuilder {
        const byteArray = Array.from(payload);
        const minApproval = GeneratorUtils.bufferToUint(GeneratorUtils.getBytes(Uint8Array.from(byteArray), 4));
        byteArray.splice(0, 4);
        const minRemoval = GeneratorUtils.bufferToUint(GeneratorUtils.getBytes(Uint8Array.from(byteArray), 4));
        byteArray.splice(0, 4);
        const accountAddress = AddressDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, accountAddress.getSize());
        const cosignatoryAddressesCount = GeneratorUtils.bufferToUint64(GeneratorUtils.getBytes(Uint8Array.from(byteArray), 8));
        byteArray.splice(0, 8);
        const cosignatoryAddresses: AddressDto[] = [];
        // tslint:disable-next-line: max-line-length
        for (let i = 0; i < (Array.isArray(cosignatoryAddressesCount) ? GeneratorUtils.compact(cosignatoryAddressesCount) : cosignatoryAddressesCount); i++) {
            const item = AddressDto.loadFromBinary(Uint8Array.from(byteArray));
            cosignatoryAddresses.push(item);
            byteArray.splice(0, item.getSize());
        }
        const multisigAddressesCount = GeneratorUtils.bufferToUint64(GeneratorUtils.getBytes(Uint8Array.from(byteArray), 8));
        byteArray.splice(0, 8);
        const multisigAddresses: AddressDto[] = [];
        // tslint:disable-next-line: max-line-length
        for (let i = 0; i < (Array.isArray(multisigAddressesCount) ? GeneratorUtils.compact(multisigAddressesCount) : multisigAddressesCount); i++) {
            const item = AddressDto.loadFromBinary(Uint8Array.from(byteArray));
            multisigAddresses.push(item);
            byteArray.splice(0, item.getSize());
        }
        return new MultisigEntryBuilder(minApproval, minRemoval, accountAddress, cosignatoryAddresses, multisigAddresses);
    }

    /**
     * Gets minimum approval for modifications.
     *
     * @return Minimum approval for modifications.
     */
    public getMinApproval(): number {
        return this.minApproval;
    }

    /**
     * Gets minimum approval for removal.
     *
     * @return Minimum approval for removal.
     */
    public getMinRemoval(): number {
        return this.minRemoval;
    }

    /**
     * Gets account address.
     *
     * @return Account address.
     */
    public getAccountAddress(): AddressDto {
        return this.accountAddress;
    }

    /**
     * Gets cosignatories for account.
     *
     * @return Cosignatories for account.
     */
    public getCosignatoryAddresses(): AddressDto[] {
        return this.cosignatoryAddresses;
    }

    /**
     * Gets accounts for which the entry is cosignatory.
     *
     * @return Accounts for which the entry is cosignatory.
     */
    public getMultisigAddresses(): AddressDto[] {
        return this.multisigAddresses;
    }

    /**
     * Gets the size of the object.
     *
     * @return Size in bytes.
     */
    public getSize(): number {
        let size = 0;
        size += 4; // minApproval
        size += 4; // minRemoval
        size += this.accountAddress.getSize();
        size += 8; // cosignatoryAddressesCount
        this.cosignatoryAddresses.forEach((o) => size += o.getSize());
        size += 8; // multisigAddressesCount
        this.multisigAddresses.forEach((o) => size += o.getSize());
        return size;
    }

    /**
     * Serializes an object to bytes.
     *
     * @return Serialized bytes.
     */
    public serialize(): Uint8Array {
        let newArray = Uint8Array.from([]);
        const minApprovalBytes = GeneratorUtils.uintToBuffer(this.getMinApproval(), 4);
        newArray = GeneratorUtils.concatTypedArrays(newArray, minApprovalBytes);
        const minRemovalBytes = GeneratorUtils.uintToBuffer(this.getMinRemoval(), 4);
        newArray = GeneratorUtils.concatTypedArrays(newArray, minRemovalBytes);
        const accountAddressBytes = this.accountAddress.serialize();
        newArray = GeneratorUtils.concatTypedArrays(newArray, accountAddressBytes);
        // tslint:disable-next-line: max-line-length
        const cosignatoryAddressesCountBytes = GeneratorUtils.uint64ToBuffer(GeneratorUtils.fromUint(this.cosignatoryAddresses.length));
        newArray = GeneratorUtils.concatTypedArrays(newArray, cosignatoryAddressesCountBytes);
        this.cosignatoryAddresses.forEach((item) => {
            const cosignatoryAddressesBytes = item.serialize();
            newArray = GeneratorUtils.concatTypedArrays(newArray, cosignatoryAddressesBytes);
        });
        // tslint:disable-next-line: max-line-length
        const multisigAddressesCountBytes = GeneratorUtils.uint64ToBuffer(GeneratorUtils.fromUint(this.multisigAddresses.length));
        newArray = GeneratorUtils.concatTypedArrays(newArray, multisigAddressesCountBytes);
        this.multisigAddresses.forEach((item) => {
            const multisigAddressesBytes = item.serialize();
            newArray = GeneratorUtils.concatTypedArrays(newArray, multisigAddressesBytes);
        });
        return newArray;
    }
}
