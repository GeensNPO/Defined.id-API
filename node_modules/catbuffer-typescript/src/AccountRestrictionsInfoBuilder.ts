// tslint:disable: jsdoc-format
/**
*** Copyright (c) 2016-present,
*** Jaguar0625, gimre, BloodyRookie, Tech Bureau, Corp. All rights reserved.
***
*** This file is part of Catapult.
***
*** Catapult is free software: you can redistribute it and/or modify
*** it under the terms of the GNU Lesser General Public License as published by
*** the Free Software Foundation, either version 3 of the License, or
*** (at your option) any later version.
***
*** Catapult is distributed in the hope that it will be useful,
*** but WITHOUT ANY WARRANTY; without even the implied warranty of
*** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
*** GNU Lesser General Public License for more details.
***
*** You should have received a copy of the GNU Lesser General Public License
*** along with Catapult. If not, see <http://www.gnu.org/licenses/>.
**/

import { AccountRestrictionAddressValueBuilder } from './AccountRestrictionAddressValueBuilder';
import { AccountRestrictionFlagsDto } from './AccountRestrictionFlagsDto';
import { AccountRestrictionMosaicValueBuilder } from './AccountRestrictionMosaicValueBuilder';
import { AccountRestrictionTransactionTypeValueBuilder } from './AccountRestrictionTransactionTypeValueBuilder';
import { GeneratorUtils } from './GeneratorUtils';

/** Binary layout for account restrictions. */
export class AccountRestrictionsInfoBuilder {
    /** Raw restriction flags. */
    restrictionFlags: AccountRestrictionFlagsDto;
    /** Address restrictions. */
    addressRestrictions?: AccountRestrictionAddressValueBuilder;
    /** Mosaic identifier restrictions. */
    mosaicIdRestrictions?: AccountRestrictionMosaicValueBuilder;
    /** Transaction type restrictions. */
    transactionTypeRestrictions?: AccountRestrictionTransactionTypeValueBuilder;

    /**
     * Constructor.
     *
     * @param restrictionFlags Raw restriction flags.
     * @param addressRestrictions Address restrictions.
     * @param mosaicIdRestrictions Mosaic identifier restrictions.
     * @param transactionTypeRestrictions Transaction type restrictions.
     */
    // tslint:disable-next-line: max-line-length
    public constructor(restrictionFlags: AccountRestrictionFlagsDto,  addressRestrictions?: AccountRestrictionAddressValueBuilder,  mosaicIdRestrictions?: AccountRestrictionMosaicValueBuilder,  transactionTypeRestrictions?: AccountRestrictionTransactionTypeValueBuilder) {
        this.restrictionFlags = restrictionFlags;
        this.addressRestrictions = addressRestrictions;
        this.mosaicIdRestrictions = mosaicIdRestrictions;
        this.transactionTypeRestrictions = transactionTypeRestrictions;
    }

    /**
     * Creates an instance of AccountRestrictionsInfoBuilder from binary payload.
     *
     * @param payload Byte payload to use to serialize the object.
     * @return Instance of AccountRestrictionsInfoBuilder.
     */
    public static loadFromBinary(payload: Uint8Array): AccountRestrictionsInfoBuilder {
        const byteArray = Array.from(payload);
        const restrictionFlags = GeneratorUtils.bufferToUint(GeneratorUtils.getBytes(Uint8Array.from(byteArray), 2));
        byteArray.splice(0, 2);
        const restrictionFlagsConditionBytes = Uint8Array.from(byteArray.slice(0, 1));
        byteArray.splice(0, 1);
        let addressRestrictions;
        if (restrictionFlags & AccountRestrictionFlagsDto.ADDRESS) {
            addressRestrictions = AccountRestrictionAddressValueBuilder.loadFromBinary(restrictionFlagsConditionBytes);
        }
        let mosaicIdRestrictions;
        if (restrictionFlags & AccountRestrictionFlagsDto.MOSAIC_ID) {
            mosaicIdRestrictions = AccountRestrictionMosaicValueBuilder.loadFromBinary(restrictionFlagsConditionBytes);
        }
        let transactionTypeRestrictions;
        if (restrictionFlags & AccountRestrictionFlagsDto.TRANSACTION_TYPE) {
        // tslint:disable-next-line: max-line-length
            transactionTypeRestrictions = AccountRestrictionTransactionTypeValueBuilder.loadFromBinary(restrictionFlagsConditionBytes);
        }
        // tslint:disable-next-line: max-line-length
        return new AccountRestrictionsInfoBuilder(restrictionFlags, addressRestrictions, mosaicIdRestrictions, transactionTypeRestrictions);
    }

    /**
     * Gets raw restriction flags.
     *
     * @return Raw restriction flags.
     */
    public getRestrictionFlags(): AccountRestrictionFlagsDto {
        return this.restrictionFlags;
    }

    /**
     * Gets address restrictions.
     *
     * @return Address restrictions.
     */
    public getAddressRestrictions(): AccountRestrictionAddressValueBuilder | undefined {
        if (this.restrictionFlags & AccountRestrictionFlagsDto.ADDRESS) {
            throw new Error('restrictionFlags is not set to ADDRESS.');
        }
        return this.addressRestrictions;
    }

    /**
     * Gets mosaic identifier restrictions.
     *
     * @return Mosaic identifier restrictions.
     */
    public getMosaicIdRestrictions(): AccountRestrictionMosaicValueBuilder | undefined {
        if (this.restrictionFlags & AccountRestrictionFlagsDto.MOSAIC_ID) {
            throw new Error('restrictionFlags is not set to MOSAIC_ID.');
        }
        return this.mosaicIdRestrictions;
    }

    /**
     * Gets transaction type restrictions.
     *
     * @return Transaction type restrictions.
     */
    public getTransactionTypeRestrictions(): AccountRestrictionTransactionTypeValueBuilder | undefined {
        if (this.restrictionFlags & AccountRestrictionFlagsDto.TRANSACTION_TYPE) {
            throw new Error('restrictionFlags is not set to TRANSACTION_TYPE.');
        }
        return this.transactionTypeRestrictions;
    }

    /**
     * Gets the size of the object.
     *
     * @return Size in bytes.
     */
    public getSize(): number {
        let size = 0;
        size += 2; // restrictionFlags
        if (this.restrictionFlags & AccountRestrictionFlagsDto.ADDRESS) {
            size += this.addressRestrictions!.getSize();
        }
        if (this.restrictionFlags & AccountRestrictionFlagsDto.MOSAIC_ID) {
            size += this.mosaicIdRestrictions!.getSize();
        }
        if (this.restrictionFlags & AccountRestrictionFlagsDto.TRANSACTION_TYPE) {
            size += this.transactionTypeRestrictions!.getSize();
        }
        return size;
    }

    /**
     * Serializes an object to bytes.
     *
     * @return Serialized bytes.
     */
    public serialize(): Uint8Array {
        let newArray = Uint8Array.from([]);
        const restrictionFlagsBytes = GeneratorUtils.uintToBuffer(this.getRestrictionFlags(), 2);
        newArray = GeneratorUtils.concatTypedArrays(newArray, restrictionFlagsBytes);
        if (this.restrictionFlags & AccountRestrictionFlagsDto.ADDRESS) {
            const addressRestrictionsBytes = this.addressRestrictions!.serialize();
            newArray = GeneratorUtils.concatTypedArrays(newArray, addressRestrictionsBytes);
        }
        if (this.restrictionFlags & AccountRestrictionFlagsDto.MOSAIC_ID) {
            const mosaicIdRestrictionsBytes = this.mosaicIdRestrictions!.serialize();
            newArray = GeneratorUtils.concatTypedArrays(newArray, mosaicIdRestrictionsBytes);
        }
        if (this.restrictionFlags & AccountRestrictionFlagsDto.TRANSACTION_TYPE) {
            const transactionTypeRestrictionsBytes = this.transactionTypeRestrictions!.serialize();
            newArray = GeneratorUtils.concatTypedArrays(newArray, transactionTypeRestrictionsBytes);
        }
        return newArray;
    }
}
