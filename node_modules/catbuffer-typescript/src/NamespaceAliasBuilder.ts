// tslint:disable: jsdoc-format
/**
*** Copyright (c) 2016-present,
*** Jaguar0625, gimre, BloodyRookie, Tech Bureau, Corp. All rights reserved.
***
*** This file is part of Catapult.
***
*** Catapult is free software: you can redistribute it and/or modify
*** it under the terms of the GNU Lesser General Public License as published by
*** the Free Software Foundation, either version 3 of the License, or
*** (at your option) any later version.
***
*** Catapult is distributed in the hope that it will be useful,
*** but WITHOUT ANY WARRANTY; without even the implied warranty of
*** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
*** GNU Lesser General Public License for more details.
***
*** You should have received a copy of the GNU Lesser General Public License
*** along with Catapult. If not, see <http://www.gnu.org/licenses/>.
**/

import { AddressDto } from './AddressDto';
import { GeneratorUtils } from './GeneratorUtils';
import { MosaicIdDto } from './MosaicIdDto';
import { NamespaceAliasTypeDto } from './NamespaceAliasTypeDto';

/** Binary layout for alias. */
export class NamespaceAliasBuilder {
    /** Namespace alias type. */
    namespaceAliasType: NamespaceAliasTypeDto;
    /** Mosaic alias. */
    mosaicAlias?: MosaicIdDto;
    /** Address alias. */
    addressAlias?: AddressDto;

    /**
     * Constructor.
     *
     * @param mosaicAlias Mosaic alias.
     * @param addressAlias Address alias.
     */
    public constructor(mosaicAlias?: MosaicIdDto,  addressAlias?: AddressDto) {
        this.mosaicAlias = mosaicAlias;
        this.addressAlias = addressAlias;
        if (mosaicAlias) {
            this.namespaceAliasType = NamespaceAliasTypeDto.MOSAIC_ID;
        }
        else {
            this.namespaceAliasType = NamespaceAliasTypeDto.ADDRESS;
        }
    }

    /**
     * Creates an instance of NamespaceAliasBuilder from binary payload.
     *
     * @param payload Byte payload to use to serialize the object.
     * @return Instance of NamespaceAliasBuilder.
     */
    public static loadFromBinary(payload: Uint8Array): NamespaceAliasBuilder {
        const byteArray = Array.from(payload);
        const namespaceAliasType = GeneratorUtils.bufferToUint(GeneratorUtils.getBytes(Uint8Array.from(byteArray), 1));
        byteArray.splice(0, 1);
        const namespaceAliasTypeConditionBytes = Uint8Array.from(byteArray.slice(0, 8));
        byteArray.splice(0, 8);
        let mosaicAlias;
        if (namespaceAliasType === NamespaceAliasTypeDto.MOSAIC_ID) {
            mosaicAlias = MosaicIdDto.loadFromBinary(namespaceAliasTypeConditionBytes);
        }
        let addressAlias;
        if (namespaceAliasType === NamespaceAliasTypeDto.ADDRESS) {
            addressAlias = AddressDto.loadFromBinary(namespaceAliasTypeConditionBytes);
        }
        return new NamespaceAliasBuilder(mosaicAlias, addressAlias);
    }

    /**
     * Gets namespace alias type.
     *
     * @return Namespace alias type.
     */
    public getNamespaceAliasType(): NamespaceAliasTypeDto {
        return this.namespaceAliasType;
    }

    /**
     * Gets mosaic alias.
     *
     * @return Mosaic alias.
     */
    public getMosaicAlias(): MosaicIdDto | undefined {
        if (this.namespaceAliasType !== NamespaceAliasTypeDto.MOSAIC_ID) {
            throw new Error('namespaceAliasType is not set to MOSAIC_ID.');
        }
        return this.mosaicAlias;
    }

    /**
     * Gets address alias.
     *
     * @return Address alias.
     */
    public getAddressAlias(): AddressDto | undefined {
        if (this.namespaceAliasType !== NamespaceAliasTypeDto.ADDRESS) {
            throw new Error('namespaceAliasType is not set to ADDRESS.');
        }
        return this.addressAlias;
    }

    /**
     * Gets the size of the object.
     *
     * @return Size in bytes.
     */
    public getSize(): number {
        let size = 0;
        size += 1; // namespaceAliasType
        if (this.namespaceAliasType === NamespaceAliasTypeDto.MOSAIC_ID) {
            size += this.mosaicAlias!.getSize();
        }
        if (this.namespaceAliasType === NamespaceAliasTypeDto.ADDRESS) {
            size += this.addressAlias!.getSize();
        }
        return size;
    }

    /**
     * Serializes an object to bytes.
     *
     * @return Serialized bytes.
     */
    public serialize(): Uint8Array {
        let newArray = Uint8Array.from([]);
        const namespaceAliasTypeBytes = GeneratorUtils.uintToBuffer(this.namespaceAliasType, 1);
        newArray = GeneratorUtils.concatTypedArrays(newArray, namespaceAliasTypeBytes);
        if (this.namespaceAliasType === NamespaceAliasTypeDto.MOSAIC_ID) {
            const mosaicAliasBytes = this.mosaicAlias!.serialize();
            newArray = GeneratorUtils.concatTypedArrays(newArray, mosaicAliasBytes);
        }
        if (this.namespaceAliasType === NamespaceAliasTypeDto.ADDRESS) {
            const addressAliasBytes = this.addressAlias!.serialize();
            newArray = GeneratorUtils.concatTypedArrays(newArray, addressAliasBytes);
        }
        return newArray;
    }
}
