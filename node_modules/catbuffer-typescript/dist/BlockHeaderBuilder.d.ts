import { AddressDto } from './AddressDto';
import { BlockFeeMultiplierDto } from './BlockFeeMultiplierDto';
import { DifficultyDto } from './DifficultyDto';
import { EntityTypeDto } from './EntityTypeDto';
import { Hash256Dto } from './Hash256Dto';
import { HeightDto } from './HeightDto';
import { KeyDto } from './KeyDto';
import { NetworkTypeDto } from './NetworkTypeDto';
import { SignatureDto } from './SignatureDto';
import { TimestampDto } from './TimestampDto';
import { VrfProofBuilder } from './VrfProofBuilder';
export declare class BlockHeaderBuilder {
    size: number;
    verifiableEntityHeader_Reserved1: number;
    signature: SignatureDto;
    signerPublicKey: KeyDto;
    entityBody_Reserved1: number;
    version: number;
    network: NetworkTypeDto;
    type: EntityTypeDto;
    height: HeightDto;
    timestamp: TimestampDto;
    difficulty: DifficultyDto;
    generationHashProof: VrfProofBuilder;
    previousBlockHash: Hash256Dto;
    transactionsHash: Hash256Dto;
    receiptsHash: Hash256Dto;
    stateHash: Hash256Dto;
    beneficiaryAddress: AddressDto;
    feeMultiplier: BlockFeeMultiplierDto;
    blockHeader_Reserved1: number;
    constructor(signature: SignatureDto, signerPublicKey: KeyDto, version: number, network: NetworkTypeDto, type: EntityTypeDto, height: HeightDto, timestamp: TimestampDto, difficulty: DifficultyDto, generationHashProof: VrfProofBuilder, previousBlockHash: Hash256Dto, transactionsHash: Hash256Dto, receiptsHash: Hash256Dto, stateHash: Hash256Dto, beneficiaryAddress: AddressDto, feeMultiplier: BlockFeeMultiplierDto);
    static loadFromBinary(payload: Uint8Array): BlockHeaderBuilder;
    getVerifiableEntityHeader_Reserved1(): number;
    getSignature(): SignatureDto;
    getSignerPublicKey(): KeyDto;
    getEntityBody_Reserved1(): number;
    getVersion(): number;
    getNetwork(): NetworkTypeDto;
    getType(): EntityTypeDto;
    getHeight(): HeightDto;
    getTimestamp(): TimestampDto;
    getDifficulty(): DifficultyDto;
    getGenerationHashProof(): VrfProofBuilder;
    getPreviousBlockHash(): Hash256Dto;
    getTransactionsHash(): Hash256Dto;
    getReceiptsHash(): Hash256Dto;
    getStateHash(): Hash256Dto;
    getBeneficiaryAddress(): AddressDto;
    getFeeMultiplier(): BlockFeeMultiplierDto;
    getBlockHeader_Reserved1(): number;
    getSize(): number;
    serialize(): Uint8Array;
}
