"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RootNamespaceHistoryBuilder = void 0;
const AddressDto_1 = require("./AddressDto");
const GeneratorUtils_1 = require("./GeneratorUtils");
const NamespaceIdDto_1 = require("./NamespaceIdDto");
const NamespaceLifetimeBuilder_1 = require("./NamespaceLifetimeBuilder");
const NamespacePathBuilder_1 = require("./NamespacePathBuilder");
class RootNamespaceHistoryBuilder {
    constructor(id, ownerAddress, lifetime, rootAlias, paths) {
        this.id = id;
        this.ownerAddress = ownerAddress;
        this.lifetime = lifetime;
        this.rootAlias = rootAlias;
        this.paths = paths;
    }
    static loadFromBinary(payload) {
        const byteArray = Array.from(payload);
        const id = NamespaceIdDto_1.NamespaceIdDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, id.getSize());
        const ownerAddress = AddressDto_1.AddressDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, ownerAddress.getSize());
        const lifetime = NamespaceLifetimeBuilder_1.NamespaceLifetimeBuilder.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, lifetime.getSize());
        const rootAlias = GeneratorUtils_1.GeneratorUtils.bufferToUint(GeneratorUtils_1.GeneratorUtils.getBytes(Uint8Array.from(byteArray), 1));
        byteArray.splice(0, 1);
        const childrenCount = GeneratorUtils_1.GeneratorUtils.bufferToUint64(GeneratorUtils_1.GeneratorUtils.getBytes(Uint8Array.from(byteArray), 8));
        byteArray.splice(0, 8);
        const paths = [];
        for (let i = 0; i < (Array.isArray(childrenCount) ? GeneratorUtils_1.GeneratorUtils.compact(childrenCount) : childrenCount); i++) {
            const item = NamespacePathBuilder_1.NamespacePathBuilder.loadFromBinary(Uint8Array.from(byteArray));
            paths.push(item);
            byteArray.splice(0, item.getSize());
        }
        return new RootNamespaceHistoryBuilder(id, ownerAddress, lifetime, rootAlias, paths);
    }
    getId() {
        return this.id;
    }
    getOwnerAddress() {
        return this.ownerAddress;
    }
    getLifetime() {
        return this.lifetime;
    }
    getRootAlias() {
        return this.rootAlias;
    }
    getPaths() {
        return this.paths;
    }
    getSize() {
        let size = 0;
        size += this.id.getSize();
        size += this.ownerAddress.getSize();
        size += this.lifetime.getSize();
        size += 1;
        size += 8;
        this.paths.forEach((o) => size += o.getSize());
        return size;
    }
    serialize() {
        let newArray = Uint8Array.from([]);
        const idBytes = this.id.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, idBytes);
        const ownerAddressBytes = this.ownerAddress.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, ownerAddressBytes);
        const lifetimeBytes = this.lifetime.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, lifetimeBytes);
        const rootAliasBytes = GeneratorUtils_1.GeneratorUtils.uintToBuffer(this.rootAlias, 1);
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, rootAliasBytes);
        const childrenCountBytes = GeneratorUtils_1.GeneratorUtils.uint64ToBuffer(GeneratorUtils_1.GeneratorUtils.fromUint(this.paths.length));
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, childrenCountBytes);
        this.paths.forEach((item) => {
            const pathsBytes = item.serialize();
            newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, pathsBytes);
        });
        return newArray;
    }
}
exports.RootNamespaceHistoryBuilder = RootNamespaceHistoryBuilder;
//# sourceMappingURL=RootNamespaceHistoryBuilder.js.map