"use strict";
/*
 * Copyright 2019 NEM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const operators_1 = require("rxjs/operators");
const symbol_openapi_typescript_fetch_client_1 = require("symbol-openapi-typescript-fetch-client");
const DtoMapping_1 = require("../core/utils/DtoMapping");
const Address_1 = require("../model/account/Address");
const MosaicFlags_1 = require("../model/mosaic/MosaicFlags");
const MosaicId_1 = require("../model/mosaic/MosaicId");
const MosaicInfo_1 = require("../model/mosaic/MosaicInfo");
const UInt64_1 = require("../model/UInt64");
const Http_1 = require("./Http");
/**
 * Mosaic http repository.
 *
 * @since 1.0
 */
class MosaicHttp extends Http_1.Http {
    /**
     * Constructor
     * @param url Base catapult-rest url
     * @param networkType the network type.
     * @param fetchApi fetch function to be used when performing rest requests.
     */
    constructor(url, networkType, fetchApi) {
        super(url, fetchApi);
        this.mosaicRoutesApi = new symbol_openapi_typescript_fetch_client_1.MosaicRoutesApi(this.config());
        this.networkTypeObservable = this.createNetworkTypeObservable(networkType);
    }
    /**
     * Gets the MosaicInfo for a given mosaicId
     * @param mosaicId - Mosaic id
     * @returns Observable<MosaicInfo>
     */
    getMosaic(mosaicId) {
        return this.call(this.mosaicRoutesApi.getMosaic(mosaicId.toHex()), (body) => this.toMosaicInfo(body));
    }
    /**
     * Gets MosaicInfo for different mosaicIds.
     * @param mosaicIds - Array of mosaic ids
     * @returns Observable<MosaicInfo[]>
     */
    getMosaics(mosaicIds) {
        return this.call(this.mosaicRoutesApi.getMosaics({
            mosaicIds: mosaicIds.map((id) => id.toHex()),
        }), (body) => body.map((b) => this.toMosaicInfo(b)));
    }
    /**
     * Gets an array of mosaics.
     * @summary Get mosaics created for given address
     * @param criteria Mosaic search criteria
     * @returns {Page<MosaicInfo>}
     */
    search(criteria) {
        return this.networkTypeObservable.pipe(operators_1.mergeMap((networkType) => {
            var _a;
            return this.call(this.mosaicRoutesApi.searchMosaics((_a = criteria.ownerAddress) === null || _a === void 0 ? void 0 : _a.plain(), criteria.pageSize, criteria.pageNumber, criteria.offset, DtoMapping_1.DtoMapping.mapEnum(criteria.order)), (body) => super.toPage(body.pagination, body.data, this.toMosaicInfo, networkType));
        }));
    }
    /**
     * Maps MosaicInfoDTO to MosaicInfo
     *
     * @param mosaicInfo the dto object.
     * @returns the model object
     */
    toMosaicInfo(mosaicInfo) {
        return new MosaicInfo_1.MosaicInfo(mosaicInfo.id, new MosaicId_1.MosaicId(mosaicInfo.mosaic.id), UInt64_1.UInt64.fromNumericString(mosaicInfo.mosaic.supply), UInt64_1.UInt64.fromNumericString(mosaicInfo.mosaic.startHeight), Address_1.Address.createFromEncoded(mosaicInfo.mosaic.ownerAddress), mosaicInfo.mosaic.revision, new MosaicFlags_1.MosaicFlags(mosaicInfo.mosaic.flags), mosaicInfo.mosaic.divisibility, UInt64_1.UInt64.fromNumericString(mosaicInfo.mosaic.duration));
    }
}
exports.MosaicHttp = MosaicHttp;
//# sourceMappingURL=MosaicHttp.js.map