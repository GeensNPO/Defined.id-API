"use strict";
/*
 * Copyright 2019 NEM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const symbol_openapi_typescript_fetch_client_1 = require("symbol-openapi-typescript-fetch-client");
const DtoMapping_1 = require("../core/utils/DtoMapping");
const Http_1 = require("./Http");
const CreateReceiptFromDTO_1 = require("./receipt/CreateReceiptFromDTO");
/**
 * Receipt http repository.
 *
 * @since 1.0
 */
class ReceiptHttp extends Http_1.Http {
    /**
     * Constructor
     * @param url Base catapult-rest url
     * @param fetchApi fetch function to be used when performing rest requests.
     */
    constructor(url, fetchApi) {
        super(url, fetchApi);
        this.receiptRoutesApi = new symbol_openapi_typescript_fetch_client_1.ReceiptRoutesApi(this.config());
    }
    searchAddressResolutionStatements(criteria) {
        var _a;
        return this.call(this.receiptRoutesApi.searchAddressResolutionStatements((_a = criteria.height) === null || _a === void 0 ? void 0 : _a.toString(), criteria.pageSize, criteria.pageNumber, criteria.offset, DtoMapping_1.DtoMapping.mapEnum(criteria.order)), (body) => super.toPage(body.pagination, body.data, CreateReceiptFromDTO_1.createAddressResolutionStatement));
    }
    searchMosaicResolutionStatements(criteria) {
        var _a;
        return this.call(this.receiptRoutesApi.searchMosaicResolutionStatements((_a = criteria.height) === null || _a === void 0 ? void 0 : _a.toString(), criteria.pageSize, criteria.pageNumber, criteria.offset, DtoMapping_1.DtoMapping.mapEnum(criteria.order)), (body) => super.toPage(body.pagination, body.data, CreateReceiptFromDTO_1.createMosaicResolutionStatement));
    }
    searchReceipts(criteria) {
        var _a, _b, _c, _d, _e, _f;
        return this.call(this.receiptRoutesApi.searchReceipts((_a = criteria.height) === null || _a === void 0 ? void 0 : _a.toString(), (_b = criteria.receiptTypes) === null || _b === void 0 ? void 0 : _b.map((t) => t.valueOf()), (_c = criteria.recipientAddress) === null || _c === void 0 ? void 0 : _c.plain(), (_d = criteria.senderAddress) === null || _d === void 0 ? void 0 : _d.plain(), (_e = criteria.targetAddress) === null || _e === void 0 ? void 0 : _e.plain(), (_f = criteria.artifactId) === null || _f === void 0 ? void 0 : _f.toHex(), criteria.pageSize, criteria.pageNumber, criteria.offset, DtoMapping_1.DtoMapping.mapEnum(criteria.order)), (body) => super.toPage(body.pagination, body.data, CreateReceiptFromDTO_1.createTransactionStatement));
    }
}
exports.ReceiptHttp = ReceiptHttp;
//# sourceMappingURL=ReceiptHttp.js.map