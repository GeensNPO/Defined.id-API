"use strict";
/*
 * Copyright 2019 NEM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const symbol_openapi_typescript_fetch_client_1 = require("symbol-openapi-typescript-fetch-client");
const Address_1 = require("../model/account/Address");
const MosaicId_1 = require("../model/mosaic/MosaicId");
const MosaicAddressRestriction_1 = require("../model/restriction/MosaicAddressRestriction");
const MosaicGlobalRestriction_1 = require("../model/restriction/MosaicGlobalRestriction");
const MosaicGlobalRestrictionItem_1 = require("../model/restriction/MosaicGlobalRestrictionItem");
const Http_1 = require("./Http");
const DtoMapping_1 = require("../core/utils/DtoMapping");
/**
 * RestrictionMosaic http repository.
 *
 * @since 1.0
 */
class RestrictionMosaicHttp extends Http_1.Http {
    /**
     * Constructor
     * @param url Base catapult-rest url
     * @param fetchApi fetch function to be used when performing rest requests.
     */
    constructor(url, fetchApi) {
        super(url, fetchApi);
        this.restrictionMosaicRoutesApi = new symbol_openapi_typescript_fetch_client_1.RestrictionMosaicRoutesApi(this.config());
    }
    /**
     * Returns a mosaic restrictions page based on the criteria.
     *
     * @param criteria the criteria
     * @return a page of {@link MosaicAddressRestriction | MosaicGlobalRestriction}
     */
    searchMosaicRestrictions(criteria) {
        var _a, _b, _c;
        return this.call(this.restrictionMosaicRoutesApi.searchMosaicRestriction((_a = criteria.mosaicId) === null || _a === void 0 ? void 0 : _a.toHex(), (_b = criteria.entryType) === null || _b === void 0 ? void 0 : _b.valueOf(), (_c = criteria.targetAddress) === null || _c === void 0 ? void 0 : _c.plain(), criteria.pageSize, criteria.pageNumber, criteria.offset, DtoMapping_1.DtoMapping.mapEnum(criteria.order)), (body) => super.toPage(body.pagination, body.data, this.toMosaicRestriction));
    }
    /**
     * This method maps a mosaic restriction dto from rest to the SDK's model object.
     *
     * @internal
     * @param {MosaicAddressRestrictionDTO | MosaicGlobalRestrictionDTO} dto the restriction object from rest.
     * @returns {MosaicAddressRestriction | MosaicGlobalRestriction} a restriction model
     */
    toMosaicRestriction(dto) {
        if (dto.mosaicRestrictionEntry.targetAddress) {
            const mosaicAddressrestrictionItems = new Map();
            dto.mosaicRestrictionEntry.restrictions.forEach((restriction) => {
                mosaicAddressrestrictionItems.set(restriction.key, restriction.value);
            });
            return new MosaicAddressRestriction_1.MosaicAddressRestriction(dto.mosaicRestrictionEntry.compositeHash, dto.mosaicRestrictionEntry.entryType.valueOf(), new MosaicId_1.MosaicId(dto.mosaicRestrictionEntry.mosaicId), Address_1.Address.createFromEncoded(dto.mosaicRestrictionEntry.targetAddress), mosaicAddressrestrictionItems);
        }
        const restirctionItems = new Map();
        dto.mosaicRestrictionEntry.restrictions.forEach((restriction) => restirctionItems.set(restriction.key, new MosaicGlobalRestrictionItem_1.MosaicGlobalRestrictionItem(new MosaicId_1.MosaicId(restriction.restriction.referenceMosaicId), restriction.restriction.restrictionValue, restriction.restriction.restrictionType.valueOf())));
        return new MosaicGlobalRestriction_1.MosaicGlobalRestriction(dto.mosaicRestrictionEntry.compositeHash, dto.mosaicRestrictionEntry.entryType.valueOf(), new MosaicId_1.MosaicId(dto.mosaicRestrictionEntry.mosaicId), restirctionItems);
    }
}
exports.RestrictionMosaicHttp = RestrictionMosaicHttp;
//# sourceMappingURL=RestrictionMosaicHttp.js.map