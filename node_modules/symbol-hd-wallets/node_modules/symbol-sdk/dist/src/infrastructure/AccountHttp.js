"use strict";
/*
 * Copyright 2018 NEM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const symbol_openapi_typescript_fetch_client_1 = require("symbol-openapi-typescript-fetch-client");
const AccountInfo_1 = require("../model/account/AccountInfo");
const ActivityBucket_1 = require("../model/account/ActivityBucket");
const Address_1 = require("../model/account/Address");
const Mosaic_1 = require("../model/mosaic/Mosaic");
const MosaicId_1 = require("../model/mosaic/MosaicId");
const UInt64_1 = require("../model/UInt64");
const Http_1 = require("./Http");
const SupplementalPublicKeys_1 = require("../model/account/SupplementalPublicKeys");
const AccountLinkPublicKey_1 = require("../model/account/AccountLinkPublicKey");
const AccountLinkVotingKey_1 = require("../model/account/AccountLinkVotingKey");
const DtoMapping_1 = require("../core/utils/DtoMapping");
/**
 * Account http repository.
 *
 * @since 1.0
 */
class AccountHttp extends Http_1.Http {
    /**
     * Constructor
     * @param url Base catapult-rest url
     * @param fetchApi fetch function to be used when performing rest requests.
     */
    constructor(url, fetchApi) {
        super(url, fetchApi);
        this.accountRoutesApi = new symbol_openapi_typescript_fetch_client_1.AccountRoutesApi(this.config());
    }
    /**
     * Gets an AccountInfo for an account.
     * @param address Address
     * @returns Observable<AccountInfo>
     */
    getAccountInfo(address) {
        return this.call(this.accountRoutesApi.getAccountInfo(address.plain()), (body) => this.toAccountInfo(body));
    }
    /**
     * Gets AccountsInfo for different accounts.
     * @param addresses List of Address
     * @returns Observable<AccountInfo[]>
     */
    getAccountsInfo(addresses) {
        const accountIds = {
            addresses: addresses.map((address) => address.plain()),
        };
        return this.call(this.accountRoutesApi.getAccountsInfo(accountIds), (body) => body.map(this.toAccountInfo));
    }
    /**
     * Gets an array of accounts.
     * @param criteria - Account search criteria
     * @returns Observable<Page<AccountInfo>>
     */
    search(criteria) {
        var _a;
        return this.call(this.accountRoutesApi.searchAccounts(criteria.pageSize, criteria.pageNumber, criteria.offset, DtoMapping_1.DtoMapping.mapEnum(criteria.order), DtoMapping_1.DtoMapping.mapEnum(criteria.orderBy), (_a = criteria.mosaicId) === null || _a === void 0 ? void 0 : _a.toHex()), (body) => super.toPage(body.pagination, body.data, this.toAccountInfo));
    }
    /**
     * This method maps a AccountInfoDTO from rest to the SDK's AccountInfo model object.
     *
     * @internal
     * @param {AccountInfoDTO} dto AccountInfoDTO the dto object from rest.
     * @returns AccountInfo model
     */
    toAccountInfo(dto) {
        var _a, _b, _c, _d;
        return new AccountInfo_1.AccountInfo(Address_1.Address.createFromEncoded(dto.account.address), UInt64_1.UInt64.fromNumericString(dto.account.addressHeight), dto.account.publicKey, UInt64_1.UInt64.fromNumericString(dto.account.publicKeyHeight), dto.account.accountType.valueOf(), new SupplementalPublicKeys_1.SupplementalPublicKeys(dto.account.supplementalPublicKeys.linked
            ? new AccountLinkPublicKey_1.AccountLinkPublicKey((_a = dto.account.supplementalPublicKeys.linked) === null || _a === void 0 ? void 0 : _a.publicKey)
            : undefined, dto.account.supplementalPublicKeys.node
            ? new AccountLinkPublicKey_1.AccountLinkPublicKey((_b = dto.account.supplementalPublicKeys.node) === null || _b === void 0 ? void 0 : _b.publicKey)
            : undefined, dto.account.supplementalPublicKeys.vrf
            ? new AccountLinkPublicKey_1.AccountLinkPublicKey((_c = dto.account.supplementalPublicKeys.vrf) === null || _c === void 0 ? void 0 : _c.publicKey)
            : undefined, dto.account.supplementalPublicKeys.voting
            ? (_d = dto.account.supplementalPublicKeys.voting) === null || _d === void 0 ? void 0 : _d.publicKeys.map((v) => new AccountLinkVotingKey_1.AccountLinkVotingKey(v.publicKey, v.startEpoch, v.endEpoch)) : undefined), dto.account.activityBuckets.map((bucket) => {
            return new ActivityBucket_1.ActivityBucket(UInt64_1.UInt64.fromNumericString(bucket.startHeight), UInt64_1.UInt64.fromNumericString(bucket.totalFeesPaid), bucket.beneficiaryCount, UInt64_1.UInt64.fromNumericString(bucket.rawScore));
        }), dto.account.mosaics.map((mosaicDTO) => new Mosaic_1.Mosaic(new MosaicId_1.MosaicId(mosaicDTO.id), UInt64_1.UInt64.fromNumericString(mosaicDTO.amount))), UInt64_1.UInt64.fromNumericString(dto.account.importance), UInt64_1.UInt64.fromNumericString(dto.account.importanceHeight));
    }
}
exports.AccountHttp = AccountHttp;
//# sourceMappingURL=AccountHttp.js.map