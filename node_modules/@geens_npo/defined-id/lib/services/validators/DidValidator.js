"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DidValidator = void 0;
class DidValidator {
    static isMethodValid(method) {
        return this.methodRegex.test(method);
    }
    static isSaltValid(salt) {
        return this.saltRegex.test(salt);
    }
    static isNemPublicKeyValid(nemPublicKey) {
        const validLength = !(nemPublicKey.length !== 64 && nemPublicKey.length !== 66);
        const validHexFormat = this.hexRegex.test(nemPublicKey);
        return validLength && validHexFormat;
    }
    static isDidStringValid(didString) {
        return this.didStringRegex.test(didString);
    }
    static validateDidModel(did) {
        const errors = [];
        if (!did.method)
            errors.push('Method is required');
        else if (!this.isMethodValid(did.method))
            errors.push('Method is invalid');
        if (!did.nemPublicKey)
            errors.push('Nem public key is required');
        else if (!this.isNemPublicKeyValid(did.nemPublicKey))
            errors.push('Nem public key is invalid');
        if (!did.salt)
            errors.push('Salt is required');
        else if (!this.isSaltValid(did.salt))
            errors.push('Salt is invalid');
        return errors;
    }
}
exports.DidValidator = DidValidator;
DidValidator.methodRegex = /^[a-z]+$/;
DidValidator.didStringRegex = /^did:[a-z]+:[0-9A-Za-z]{34}$/;
DidValidator.saltRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/;
DidValidator.hexRegex = /^[a-fA-F0-9]+$/;
