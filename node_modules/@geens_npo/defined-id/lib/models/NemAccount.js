"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NemAccount = void 0;
const __1 = require("..");
const symbol_sdk_1 = require("symbol-sdk");
const KeyPurposes_1 = require("../enums/KeyPurposes");
class NemAccount {
    constructor(key, blockchain) {
        this._key = key;
        this._blockchain = blockchain;
        this._privateKey = this.derivePrivateKey();
        this._publicKey = this.derivePublicKey();
        this._networkType = this.deriveNetworkType();
        this._account = this.deriveAccount();
        this._address = this.deriveAddress();
    }
    derivePrivateKey() {
        if (this._key.purpose.purpose == KeyPurposes_1.KeyPurposes.nemRegistrationKey) {
            this._privateKey = this._key.privateKey.toString('hex').toUpperCase();
            return this._privateKey;
        }
        return undefined;
    }
    derivePublicKey() {
        if (this._key.purpose.purpose == KeyPurposes_1.KeyPurposes.nemRegistrationKey) {
            this._publicKey = this._key.publicKey.toString('hex').toUpperCase();
            return this._publicKey;
        }
        return undefined;
    }
    deriveAddress() {
        this._address = this._account ? this._account.address.pretty() : undefined;
        return this._address;
    }
    deriveNetworkType() {
        const networkType = __1.Blockchain.getNetworkTypeByBlockchain(this._blockchain);
        if (networkType)
            return networkType;
    }
    deriveAccount() {
        if (this._networkType && this._privateKey) {
            return symbol_sdk_1.Account.createFromPrivateKey(this._privateKey, this._networkType);
        }
        return undefined;
    }
    getGenerationHash() {
        const generationHash = __1.Blockchain;
        return;
    }
    get publicAccount() {
        return this._account ? this._account.publicAccount : undefined;
    }
    get networkType() {
        return this._networkType;
    }
    get privateKey() {
        return this._privateKey;
    }
    get publicKey() {
        return this._publicKey;
    }
    get address() {
        return this._address;
    }
}
exports.NemAccount = NemAccount;
