"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenerateKeysHandler = void 0;
const __1 = require("../..");
const GenerateKeyHandler_1 = require("./GenerateKeyHandler");
class GenerateKeysHandler extends GenerateKeyHandler_1.GenerateKeyHandler {
    handleCore(request) {
        const keys = [];
        request.keyIds.forEach((keyId) => {
            const tempRequest = {
                // @ts-ignore
                keyId: keyId,
                seed: request.seed,
                personaId: request.personaId,
                connectionId: request.connectionId
            };
            const key = super.handleCore(tempRequest).key;
            const addKey = key ? keys.push(key) : undefined;
        });
        return {
            keys: keys
        };
    }
    validateCore(request) {
        const errors = [];
        if (!request.seed)
            errors.push('Seed is required');
        if (!request.personaId && request.personaId !== 0)
            errors.push('Persona id is required');
        else if (!__1.KeyValidator.isNaturalNumber(request.personaId))
            errors.push('Persona id is invalid');
        if (!request.connectionId)
            errors.push('Connection id is required');
        if (request.connectionId && !__1.KeyValidator.isNaturalNumber(request.connectionId))
            errors.push('Connection id is invalid');
        if (!request.keyIds || request.keyIds.length === 0)
            errors.push('Key ids are required');
        else
            request.keyIds.forEach((keyId) => __1.Purposes.find(keyId) === undefined ? errors.push(`Key id : {${keyId}} is invalid`) : '');
        return errors;
    }
}
exports.GenerateKeysHandler = GenerateKeysHandler;
