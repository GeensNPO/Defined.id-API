"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GeneratePublicKeysDocumentHandler = void 0;
const __1 = require("../..");
const BaseHandler_1 = require("../BaseHandler");
class GeneratePublicKeysDocumentHandler extends BaseHandler_1.BaseHandler {
    handleCore(request) {
        const context = [
            "https://w3id.org/did/v1",
            "https://w3id.org/security/v1"
        ];
        const pubKeys = [];
        request.pubKeys.forEach((key) => {
            switch (request.encode) {
                case __1.Encodes.Base58: {
                    pubKeys.push({
                        id: request.did + "#" + key.purpose.purpose.toString() + "-" + key.purpose.id,
                        owner: request.did,
                        type: key.purpose.type,
                        publicKeyBase58: __1.SecurityService.base58Encode(key.publicKey)
                    });
                    break;
                }
                case __1.Encodes.Hex: {
                    pubKeys.push({
                        id: request.did + "#" + key.purpose.purpose.toString() + "-" + key.purpose.id,
                        owner: request.did,
                        type: key.purpose.type,
                        publicKeyHex: key.publicKey.toString('hex')
                    });
                    break;
                }
                case __1.Encodes.Pem: {
                    pubKeys.push({
                        id: request.did + "#" + key.purpose.purpose.toString() + "-" + key.purpose.id,
                        owner: request.did,
                        type: key.purpose.type,
                        publicKeyPem: __1.SecurityService.pemEncode(key.publicKey)
                    });
                    break;
                }
            }
        });
        const meta = {
            createdAt: (new Date()).toISOString(),
            createdBy: 'http://defined-id/'
        };
        return {
            context: context,
            pubKey: pubKeys,
            meta: meta
        };
    }
    validateCore(request) {
        const errors = [];
        if (!request.encode)
            errors.push('Encode is required');
        else if (!__1.KeyValidator.isEncodeValid(request.encode))
            errors.push('Encode is invalid');
        if (!request.pubKeys || request.pubKeys.length === 0)
            errors.push('PubKeys is required');
        else {
            request.pubKeys.forEach((key) => {
                if (!__1.KeyValidator.validateKeyModel(key))
                    errors.push(`Pub key with did : ${request.did} is invalid`);
            });
        }
        if (!request.did)
            errors.push('Did is required');
        else if (!__1.DidValidator.isDidStringValid(request.did))
            errors.push('Did is invalid');
        return errors;
    }
}
exports.GeneratePublicKeysDocumentHandler = GeneratePublicKeysDocumentHandler;
