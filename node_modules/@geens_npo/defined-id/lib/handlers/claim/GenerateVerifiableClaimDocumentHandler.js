"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenerateVerifiableClaimDocumentHandler = void 0;
const BaseHandler_1 = require("../BaseHandler");
const VerifiableClaimValidator_1 = require("../../services/validators/VerifiableClaimValidator");
class GenerateVerifiableClaimDocumentHandler extends BaseHandler_1.BaseHandler {
    handleCore(request) {
        let type = request.type;
        if (type && type.indexOf('VerifiableCredential') === -1)
            type.push('VerifiableCredential');
        if (!type)
            type = ['VerifiableCredential'];
        let context = request.context;
        if (context && context.indexOf('https://w3id.org/security/v2') === -1)
            context.push('https://w3id.org/security/v2');
        if (context && context.indexOf('https://www.w3.org/2018/credentials/v1') === -1)
            context.push('https://www.w3.org/2018/credentials/v1');
        if (!context)
            context = ['https://www.w3.org/2018/credentials/v1', 'https://w3id.org/security/v2'];
        const document = {
            context: context,
            id: request.id,
            type: type,
            issuer: request.issuer,
            claim: request.claim,
            issuanceDate: request.issuanceDate,
            expirationDate: request.expirationDate
        };
        return {
            verifiableClaimDocument: document
        };
    }
    validateCore(request) {
        let errors = [];
        if (!request.id)
            errors.push('Id is required');
        else if (!VerifiableClaimValidator_1.VerifiableClaimValidator.isIdValid(request.id))
            errors.push('Id is invalid');
        if (request.type && !Array.isArray(request.type))
            errors.push('Type is invalid');
        if (request.context && !Array.isArray(request.context))
            errors.push('Context is invalid');
        if (!request.issuer)
            errors.push('Issuer is required');
        if (!request.claim)
            errors.push('Claim is required');
        else {
            const claimErrros = VerifiableClaimValidator_1.VerifiableClaimValidator.validateVerifiableClaim(request.claim);
            if (claimErrros.length > 0)
                errors = errors.concat(claimErrros);
        }
        if (!request.issuanceDate)
            errors.push('Issuance date is required');
        else if (!VerifiableClaimValidator_1.VerifiableClaimValidator.isDateValid(request.issuanceDate))
            errors.push('Issuance date is invalid');
        else if (Date.parse(request.issuanceDate) > Date.parse((new Date()).toISOString()))
            errors.push('Issuance date can not be in the future');
        if (!request.expirationDate)
            errors.push('Expiration date is required');
        else if (!VerifiableClaimValidator_1.VerifiableClaimValidator.isDateValid(request.expirationDate))
            errors.push('Expiration date is invalid');
        else if (Date.parse(request.expirationDate) < Date.parse((new Date()).toISOString()))
            errors.push('Expiration date can not be in the future');
        return errors;
    }
}
exports.GenerateVerifiableClaimDocumentHandler = GenerateVerifiableClaimDocumentHandler;
