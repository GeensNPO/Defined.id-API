"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VerifyOwnershipHandler = void 0;
const __1 = require("../..");
const BaseHandler_1 = require("../BaseHandler");
class VerifyOwnershipHandler extends BaseHandler_1.BaseHandler {
    handleCore(req) {
        let didProver = req.didProver;
        if (didProver)
            didProver = didProver.trim();
        let didVerifier = req.didVerifier;
        if (didVerifier)
            didVerifier = didVerifier.trim();
        let publicKey = req.publicKey;
        if (publicKey)
            publicKey = publicKey.trim();
        const publicKeyBytes = Buffer.from(publicKey, "hex");
        const timestamp = req.timestamp;
        const timestampDate = new Date(timestamp);
        let signature = req.signature;
        if (signature)
            signature = signature.trim();
        const poo = new __1.ProofOfOwnership(didProver, didVerifier, publicKeyBytes, timestampDate, signature);
        const errors = __1.ProofOfOwnershipService.verify(poo);
        return {
            errors: errors
        };
    }
    validateCore(req) {
        const errors = [];
        if (!req.didProver)
            errors.push('DidProver is required');
        else if (!__1.DidValidator.isDidStringValid(req.didProver))
            errors.push('DidProver is invalid');
        if (!req.didVerifier)
            errors.push('DidVerifier is required');
        else if (!__1.DidValidator.isDidStringValid(req.didVerifier))
            errors.push('DidVerifier is invalid');
        return errors;
    }
}
exports.VerifyOwnershipHandler = VerifyOwnershipHandler;
