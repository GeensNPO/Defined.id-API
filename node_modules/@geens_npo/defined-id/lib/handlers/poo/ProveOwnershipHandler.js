"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProveOwnershipHandler = void 0;
const __1 = require("../..");
const BaseHandler_1 = require("../BaseHandler");
class ProveOwnershipHandler extends BaseHandler_1.BaseHandler {
    handleCore(req) {
        let seed = req.seed;
        if (seed)
            seed = seed.trim();
        let didProver = req.didProver;
        if (didProver)
            didProver = didProver.trim();
        let didVerifier = req.didVerifier;
        if (didVerifier)
            didVerifier = didVerifier.trim();
        const key = new __1.Key(
        // @ts-ignore
        __1.Purposes.find(req.keyId), seed, req.personaId, req.connectionId);
        const poo = new __1.ProofOfOwnership(didProver, didVerifier, key.publicKey);
        const errors = __1.ProofOfOwnershipService.proveOwnership(poo, key.privateKey64);
        if (errors.length > 0)
            throw new Error(errors.join());
        return {
            didProver: poo.didProver,
            didVerifier: poo.didVerifier,
            publicKey: poo.publicKey.toString('hex'),
            // @ts-ignore
            timestamp: poo.timestamp.getTime(),
            // @ts-ignore
            signature: poo.signature
        };
    }
    validateCore(req) {
        const errors = [];
        if (!req.seed)
            errors.push('Seed is required');
        if (!req.personaId && req.personaId !== 0)
            errors.push('Persona id is required');
        else if (!__1.KeyValidator.isNaturalNumber(req.personaId))
            errors.push('Persona id is invalid');
        if (req.connectionId && !__1.KeyValidator.isNaturalNumber(req.connectionId))
            errors.push('Connection id is invalid');
        if (!req.keyId)
            errors.push('Key id is required');
        else
            __1.Purposes.find(req.keyId) === undefined ? errors.push(`Key id is invalid`) : '';
        if (!req.didProver)
            errors.push('DidProver is required');
        else if (!__1.DidValidator.isDidStringValid(req.didProver))
            errors.push('DidProver is invalid');
        if (!req.didVerifier)
            errors.push('DidVerifier is required');
        else if (!__1.DidValidator.isDidStringValid(req.didVerifier))
            errors.push('DidVerifier is invalid');
        return errors;
    }
}
exports.ProveOwnershipHandler = ProveOwnershipHandler;
